import "./shared.del";
import "./config.del";

struct DamageInstance {
  public Number timestamp;
  public Number amount;
  public Player attacker;
  public Player victim;
}

playervar DamageInstance[] damageReceivedEvents = [];
playervar Number damageReceivedInPeriod;
playervar Number damageReceivedInPeriodNonSelf;
playervar DamageInstance[] damageDealtEvents = [];
playervar Number damageDealtInPeriod;
playervar Number damageDealtInPeriodNonSelf;

rule: "[lib/damagePerSecond.ostw] Track when a player receives damage"
Event.OnDamageTaken
if (EventDamage() > 0)
{
  eventTimestamp = TotalTimeElapsed();
  Victim().damageReceivedEvents = Victim().damageReceivedEvents.Append({ timestamp: eventTimestamp, amount: EventDamage(), attacker: Attacker(), victim: Victim() });
  Attacker().damageDealtEvents = Attacker().damageDealtEvents.Append({ timestamp: eventTimestamp, amount: EventDamage(), attacker: Attacker(), victim: Victim() });

  if (eventTimestamp < Victim().damageReceivedEvents.First.timestamp + durationToAverageOver) {
    Victim().damageReceivedInPeriod += EventDamage();
    if (Attacker() != Victim()) Victim().damageReceivedInPeriodNonSelf += EventDamage();
  }
  if (eventTimestamp < Attacker().damageDealtEvents.First.timestamp + durationToAverageOver) {
    Attacker().damageDealtInPeriod += EventDamage();
    if (Attacker() != Victim()) Attacker().damageDealtInPeriodNonSelf += EventDamage();
  }
}

rule: "[lib/damagePerSecond.ostw] When the head of the damage received array has expired, remove all expired events"
Event.OngoingPlayer
if (damageReceivedEvents.Length > 0)
if (UpdateEveryFrame(TotalTimeElapsed()) >= damageReceivedEvents.First.timestamp + durationToAverageOver + perSecondBufferRetentionSeconds)
{
  oldTimeAcceptanceThreshold = damageReceivedEvents.First.timestamp + durationToAverageOver;
  // LogToInspector(<"Old time window: <0> - <1>", damageReceivedEvents.First.timestamp, oldTimeAcceptanceThreshold>);
  structArraysStartIndex = 0;
  structArraysCount = damageReceivedEvents.Length;
  // LogToInspector(<"Initial conditions | damageReceivedInPastSecond: <0> | damageReceivedInPastSecondNonSelf: <1>", damageReceivedInPastSecond, damageReceivedInPastSecondNonSelf>);

  # Remove expired events
  while (damageReceivedEvents[structArraysStartIndex].timestamp + durationToAverageOver + perSecondBufferRetentionSeconds < TotalTimeElapsed() && structArraysStartIndex < damageReceivedEvents.Length) {
    damageReceivedInPeriod = Max(0, damageReceivedInPeriod - damageReceivedEvents[structArraysStartIndex].amount);
    // LogToInspector(<"Index <0> with timestamp <1> expired, removing <2> for <3>", structArraysStartIndex, damageReceivedEvents[structArraysStartIndex].timestamp, damageReceivedEvents[structArraysStartIndex].amount, damageReceivedInPastSecond>);
    if (damageReceivedEvents[structArraysStartIndex].victim != damageReceivedEvents[structArraysStartIndex].attacker) {
      damageReceivedInPeriodNonSelf = Max(0, damageReceivedInPeriodNonSelf - damageReceivedEvents[structArraysStartIndex].amount);
      // LogToInspector(<"Attacker <0> did not match victim <1>, so removing <2> for <3>", damageReceivedEvents[structArraysStartIndex].attacker, damageReceivedEvents[structArraysStartIndex].victim, damageReceivedEvents[structArraysStartIndex].amount, damageReceivedInPastSecondNonSelf>);
    }
    structArraysStartIndex++;
    structArraysCount--;
  }
  sweepNewlyValidEventsIndex = structArraysStartIndex;
  // LogToInspector(<"New start index: <2> | New time window: <0> - <1>", damageReceivedEvents[structArraysStartIndex].timestamp, damageReceivedEvents[structArraysStartIndex].timestamp + durationToAverageOver, structArraysStartIndex>);
  # Add newly valid events
  while (damageReceivedEvents[sweepNewlyValidEventsIndex].timestamp < damageReceivedEvents[structArraysStartIndex].timestamp + durationToAverageOver && sweepNewlyValidEventsIndex < damageReceivedEvents.Length) {
    // LogToInspector(<"index: <0> | timestamp: <1> | damageReceivedInPastSecond: <2> | damageReceivedInPastSecondNonSelf: <3>", sweepNewlyValidEventsIndex, damageReceivedEvents[sweepNewlyValidEventsIndex].timestamp, damageReceivedInPastSecond, damageReceivedInPastSecondNonSelf>);
    # Make sure to only include NEWLY valid events
    if (damageReceivedEvents[sweepNewlyValidEventsIndex].timestamp >= oldTimeAcceptanceThreshold) {
      damageReceivedInPeriod += damageReceivedEvents[sweepNewlyValidEventsIndex].amount;
      // LogToInspector(<"above considered newly valid, added <0> for total <1>", damageReceivedEvents[sweepNewlyValidEventsIndex].amount, damageReceivedInPastSecond>);
      if (damageReceivedEvents[sweepNewlyValidEventsIndex].attacker != damageReceivedEvents[sweepNewlyValidEventsIndex].victim) {
        damageReceivedInPeriodNonSelf += damageReceivedEvents[sweepNewlyValidEventsIndex].amount;
        // LogToInspector(<"attacker <0> did not match victim <1>, so adding <2> for total of <3>", damageReceivedEvents[sweepNewlyValidEventsIndex].attacker, damageReceivedEvents[sweepNewlyValidEventsIndex].victim, damageReceivedEvents[sweepNewlyValidEventsIndex].amount, damageReceivedInPastSecondNonSelf>);
      }
    }
    sweepNewlyValidEventsIndex++;
  }
  # Slice arrays instead of doing incremental updates for perf
  damageReceivedEvents = damageReceivedEvents.Slice(structArraysStartIndex, structArraysCount);
  MinWait();
  LoopIfConditionIsTrue();
}

rule: "[lib/damagePerSecond.ostw] When the head of the damage dealt array has expired, remove all expired events"
Event.OngoingPlayer
if (damageDealtEvents.Length > 0)
if (UpdateEveryFrame(TotalTimeElapsed()) >= damageDealtEvents.First.timestamp + durationToAverageOver + perSecondBufferRetentionSeconds)
{
  oldTimeAcceptanceThreshold = damageDealtEvents.First.timestamp + durationToAverageOver;
  // LogToInspector(<"NEW RUN\nOld time window: <0> - <1>", damageDealtEvents.First.timestamp, oldTimeAcceptanceThreshold>);
  structArraysStartIndex = 0;
  structArraysCount = damageDealtEvents.Length;
  // LogToInspector(<"Initial conditions | damageReceivedInPastSecond: <0> | damageReceivedInPastSecondNonSelf: <1>", damageDealtInPastSecond, damageDealtInPastSecondNonSelf>);

  # Remove expired events
  while (damageDealtEvents[structArraysStartIndex].timestamp + durationToAverageOver + perSecondBufferRetentionSeconds < TotalTimeElapsed() && structArraysStartIndex < damageDealtEvents.Length) {
    damageDealtInPeriod = Max(0, damageDealtInPeriod - damageDealtEvents[structArraysStartIndex].amount);
    // LogToInspector(<"Index <0> with timestamp <1> expired, removing <2> for <3>", structArraysStartIndex, damageDealtEvents[structArraysStartIndex].timestamp, damageDealtEvents[structArraysStartIndex].amount, damageDealtInPastSecond>);
    if (damageDealtEvents[structArraysStartIndex].victim != damageDealtEvents[structArraysStartIndex].attacker) {
      damageDealtInPeriodNonSelf = Max(0, damageDealtInPeriodNonSelf - damageDealtEvents[structArraysStartIndex].amount);
      // LogToInspector(<"Attacker <0> did not match victim <1>, so removing <2> for <3>", damageDealtEvents[structArraysStartIndex].attacker, damageDealtEvents[structArraysStartIndex].victim, damageDealtEvents[structArraysStartIndex].amount, damageDealtInPastSecondNonSelf>);
    }
    structArraysStartIndex++;
    structArraysCount--;
  }
  sweepNewlyValidEventsIndex = structArraysStartIndex;
  // LogToInspector(<"New start index: <2> | New time window: <0> - <1>", damageDealtEvents[structArraysStartIndex].timestamp, damageDealtEvents[structArraysStartIndex].timestamp + durationToAverageOver, structArraysStartIndex>);
  # Add newly valid events
  while (damageDealtEvents[sweepNewlyValidEventsIndex].timestamp < damageDealtEvents[structArraysStartIndex].timestamp + durationToAverageOver && sweepNewlyValidEventsIndex < damageDealtEvents.Length) {
    // LogToInspector(<"index: <0> | timestamp: <1> | damageReceivedInPastSecond: <2> | damageReceivedInPastSecondNonSelf: <3>", sweepNewlyValidEventsIndex, damageDealtEvents[sweepNewlyValidEventsIndex].timestamp, damageDealtInPastSecond, damageDealtInPastSecondNonSelf>);
    # Make sure to only include NEWLY valid events
    if (damageDealtEvents[sweepNewlyValidEventsIndex].timestamp >= oldTimeAcceptanceThreshold) {
      damageDealtInPeriod += damageDealtEvents[sweepNewlyValidEventsIndex].amount;
      // LogToInspector(<"above considered newly valid, added <0> for total <1>", damageDealtEvents[sweepNewlyValidEventsIndex].amount, damageDealtInPastSecond>);
      if (damageDealtEvents[sweepNewlyValidEventsIndex].attacker != damageDealtEvents[sweepNewlyValidEventsIndex].victim) {
        damageDealtInPeriodNonSelf += damageDealtEvents[sweepNewlyValidEventsIndex].amount;
        // LogToInspector(<"attacker <0> did not match victim <1>, so adding <2> for total of <3>", damageDealtEvents[sweepNewlyValidEventsIndex].attacker, damageDealtEvents[sweepNewlyValidEventsIndex].victim, damageDealtEvents[sweepNewlyValidEventsIndex].amount, damageDealtInPastSecondNonSelf>);
      }
    }
    sweepNewlyValidEventsIndex++;
  }
  # Slice arrays instead of doing incremental updates for perf
  damageDealtEvents = damageDealtEvents.Slice(structArraysStartIndex, structArraysCount);
  MinWait();
  LoopIfConditionIsTrue();
}
