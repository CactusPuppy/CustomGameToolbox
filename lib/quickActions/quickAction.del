import "globalTriggers.del";

globalvar (() => void)[] QuickActions = [
  // 0
  () => {},
  // 1
  () => {
    # Set the point for the player to return to
    menuActivationPoint = NewResetFromPlayer(EventPlayer());
    ChangeHero();
  },
  // 2
  () => {
    ToggleNoClip();
    # Must manually stop camera since we didn't deactivate noclip by using the menu
    if (!isNoClipActive) StopCamera();
  },
  // 3
  PlayAllReplays,
  // 4
  () => { Damage(EventPlayer(), null, 0.2 * MaxHealth()); },
  // 5
  () => {
    if (respawnPoint.location == null) {
      SmallMessage(EventPlayer(), IconString(Icon.Warning) + "No respawn point set");
      PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
      return;
    }
    Respawn();
    TeleportPlayerToResetPoint(EventPlayer(), EventPlayer().respawnPoint);
  },
  // 6
  () => {
    async! ResetAllBotsToResetPoints();
  },
  // 7
  () => {
    if (activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS)) {
      activeInfoDisplays.ModRemoveByValue(InfoAction.DAMAGE_HEAL_NUMBERS);
      return;
    }
    if (CountOf(activeInfoDisplays) >= MAX_ACTIVE_DISPLAYS) {
      PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 200);
      SmallMessage(EventPlayer(), <"<0> Too many active readouts (max <1>).", IconString(Icon.Warning), MAX_ACTIVE_DISPLAYS>);
      Wait(0.15);
      SmallMessage(EventPlayer(), <"<0> Remove some readouts and try again", IconString(Icon.Warning)>);
      return;
    }
    activeInfoDisplays.ModAppend(InfoAction.DAMAGE_HEAL_NUMBERS);
  },
  // 8
  () => {
    ToggleBotEditMode();
    # Must manually stop camera since we didn't deactivate noclip by using the menu
    if (!isNoClipActive) StopCamera();
  },
  // 9
  () => {
    ToggleThirdPerson();
    # For SOME reason trying to do this without opening the menu
    # causes some baloney and I can't be bothered to figure it out
    OpenMenuToPage(EventPlayer(), MenuState.MAIN_MENU);
    MinWait();
    CloseMenu(EventPlayer());
  },
  // 10
  () => activeModifications[Modification.FASTER_ABILITIES] = !activeModifications[Modification.FASTER_ABILITIES],
  // 11
  () => activeModifications[Modification.SLOW_MOTION] = !activeModifications[Modification.SLOW_MOTION],
  // 12
  () => activeModifications[Modification.DISABLE_SUPPORT_PASSIVE] = !activeModifications[Modification.DISABLE_SUPPORT_PASSIVE]
];

String[] QuickActionLabels: [
  "None",                         // 0
  "Change Hero",                  // 1
  "Toggle Noclip",                // 2
  "Play/Pause All Replays",       // 3
  "Damage Self",                  // 4
  "Reset Self to Respawn Point",  // 5
  "Reset All Bot Positions",      // 6
  "Toggle Damage/Heal Numbers",   // 7
  "Toggle Bot Edit Mode",         // 8
  "Toggle Third-Person",          // 9
  "Toggle Faster Abilities",      // 10
  "Toggle Slow Motion",           // 11
  "Toggle Self-Heal Passive"      // 12
];

String[] PossibleQuickTriggerLabels: [
  "Crouch + Reload",
  "Crouch + Melee",
  "Crouch + Interact",
  "Ability 1 + Interact",
  "Ability 2 + Interact",
  "Ultimate + Interact",
  "Ability 1 + Reload",
  "Ability 2 + Reload",
  "Ultimate + Reload"
];

Button[][] PossibleQuickTriggers: [
  [Button.Crouch, Button.Reload],
  [Button.Crouch, Button.Melee],
  [Button.Crouch, Button.Interact],
  [Button.Ability1, Button.Interact],
  [Button.Ability2, Button.Interact],
  [Button.Ultimate, Button.Interact],
  [Button.Ability1, Button.Reload],
  [Button.Ability2, Button.Reload],
  [Button.Ultimate, Button.Reload]
];

globalvar Number[] ActionSettings = [
  WorkshopSettingCombo(QuickActionsCategory, "Crouch + Reload",   5, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Crouch + Melee",    4, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Crouch + Interact", 8, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Ability 1 + Interact", 9, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Ability 2 + Interact", 6, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Ultimate + Interact", 1, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Ability 1 + Reload", 0, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Ability 2 + Reload", 0, QuickActionLabels, 0),
  WorkshopSettingCombo(QuickActionsCategory, "Ultimate + Reload", 0, QuickActionLabels, 0)
];

rule: "[lib/quickActions/quickAction.del] Set up quick actions" {
  for (i = 0; PossibleQuickTriggers.Length; 1) {
    if (ActionSettings[i] > 0)
      add_trigger(PossibleQuickTriggers[i], QuickActions[ActionSettings[i]]);
  }
}
