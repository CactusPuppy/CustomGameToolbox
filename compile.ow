settings
{
    main
    {
        Description: "v0.1-ALPHA
Created by CactusPuppy"
        Mode Name: "Overwatch Content Creation Toolbox"
    }
    lobby
    {
        Match Voice Chat: Enabled
    }
    modes
    {
        General
        {
            Hero Limit: Off
            Game Mode Start: Immediately
            Tank Role Passive Health Bonus: Disabled
        }
        Assault
        {
            Competitive Rules: On
        }
        Control
        {
            Competitive Rules: On
        }
        Escort
        {
            Competitive Rules: On
        }
        Hybrid
        {
            Competitive Rules: On
        }
        Push
        {
            Competitive Rules: On
        }
        Skirmish
        {
            enabled maps
            {
                Shambali Monastery
            }
        }
    }
}

variables
{
    global:
        0: _objectVariable_0
        1: _objectVariable_1
        2: _objectVariable_2
        3: _objectVariable_3
        4: UseRoleQueueHealth
        5: ButtonActionGrid
        6: _extendedGlobalCollection
        7: AllButtons
        8: isTimePaused
        9: isGameInProgress
        10: isInSetup
        11: OptimizeMetricsForOverTime
        12: activeModifications
        13: botHeroes
        14: heroQueue
        15: i
        16: colIndex
        17: rowIndex
        18: player
        19: foreachIndex
        20: _arrayConstructor
    player:
        0: menuActivationPoint_location
        1: menuActivationPoint_eyePosition
        2: menuActivationPoint_facing
        3: ButtonLabelGrid
        4: ButtonColorGrid
        5: currentMenuState
        6: menuXIndex
        7: menuYIndex
        8: hideMenuOpenTooltip
        9: _extendedPlayerCollection
        10: buttonLocks
        11: toolsActionID
        12: respawnPoint_location
        13: respawnPoint_eyePosition
        14: respawnPoint_facing
        15: position1
        16: isMovingPosition1
        17: position2
        18: isMovingPosition2
        19: playerRulerState
        20: rulerEffects
        21: thirdPersonState
        22: thirdPersonDirection
        23: thirdPersonZoom
        24: isNoClipActive
        25: activeInfoDisplays
        26: infoDisplayEntities
        27: healingReceivedEvents_timestamp
        28: healingReceivedEvents_amount
        29: healingReceivedEvents_healer
        30: healingReceivedEvents_healee
        31: healReceivedInPeriod
        32: healReceivedInPeriodNonSelf
        33: healingDealtEvents_timestamp
        34: healingDealtEvents_amount
        35: healingDealtEvents_healer
        36: healingDealtEvents_healee
        37: healDealtInPeriod
        38: healDealtInPeriodNonSelf
        39: damageReceivedEvents_timestamp
        40: damageReceivedEvents_amount
        41: damageReceivedEvents_attacker
        42: damageReceivedEvents_victim
        43: damageReceivedInPeriod
        44: damageReceivedInPeriodNonSelf
        45: damageDealtEvents_timestamp
        46: damageDealtEvents_amount
        47: damageDealtEvents_attacker
        48: damageDealtEvents_victim
        49: damageDealtInPeriod
        50: damageDealtInPeriodNonSelf
        51: effectStartTimestamp
        52: effectDuration
        53: selectedBotsReplayAction
        54: isEditing
        55: noclipPosition
        56: grabbedBot
        57: targetedDummy
        58: placementDistance
        59: isChangingBot
        60: prevFacings
        61: originalHero
        62: hasEdited
}

// Extended collection variables:
// global [0]: LOG_LEVEL
// player [0]: rowOffset
// player [1]: colOffset
// player [2]: structArraysStartIndex
// player [3]: structArraysCount
// player [4]: sweepNewlyValidEventsIndex
// player [5]: oldTimeAcceptanceThreshold
// player [6]: eventTimestamp
// player [7]: cumulativeDamageDisplayTextID
// player [8]: lastDamageDisplayTextID
// player [9]: cumulativeDamage
// player [10]: lastDamageInstanceAmount
// player [11]: lastDamageInstancePosition
// player [12]: cumulativeHealingDisplayTextID
// player [13]: lastHealingDisplayTextID
// player [14]: cumulativeHealing
// player [15]: lastHealInstanceAmount
// player [16]: lastHealInstancePosition

subroutines
{
    0: UpdatePlayerButtonStatus
    1: HandleConfirmEndGameClick
    2: findLeft
    3: zeroOffsets
    4: applyOffsets
    5: findRight
    6: findUp
    7: findDown
}

rule("[interface/menu.ostw] Set up action grid")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 7
    actions
    {
        Set Global Variable(ButtonActionGrid, Empty Array);
        Set Global Variable At Index(ButtonActionGrid, 1, Array(0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0));
        Set Global Variable At Index(ButtonActionGrid, 2, Array(True, True));
        Set Global Variable At Index(ButtonActionGrid, 5, Array(0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 7, 0, 8, 0, 0, 6, 4, 5, 0, 0, 0, 0, 0, 0));
        Set Global Variable At Index(ButtonActionGrid, 3, Array(0, 15, 2, 14, 0, 0, 7, 8, 1, 0, 0, 9, 10, 11, 0, 0, 3, 13, 5, 0, 0, 4, 16, 6, 0));
        Set Global Variable At Index(ButtonActionGrid, 4, Array(0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 7, 5, 0, 0, 4, 0, 6, 0, 0, 0, 0, 0, 0));
        Set Global Variable At Index(ButtonActionGrid, 6, Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));
    }
}

rule("[interface/menu.ostw] Set up button label grid")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Action count: 6
    actions
    {
        Set Player Variable(Event Player, ButtonLabelGrid, Empty Array);
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 1, Array(Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Information", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Modifications", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Tools", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Dummy Bots/Replay", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null)));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Array(Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Set Respawn Point", Null, Null, Null), Custom String("Change Hero", Null, Null, Null), Custom String("Enable NoClip", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Place Ruler", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Enable 3rd Person", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Unpause Match Time", Null, Null, Null), Custom String("Skip Setup", Null, Null, Null), Custom String("End Match", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null)));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Array(Custom String("", Null, Null, Null), Custom String("Show Exact Health", Null, Null, Null), Custom String("Show Distance To Crosshair", Null, Null, Null), Custom String("Show Is On Objective", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Show Position", Null, Null, Null), Custom String("Show Facing Direction", Null, Null, Null), Custom String("Show Move Speed", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Show Altitude", Null, Null, Null), Custom String("Show If On Ground", Null, Null, Null), Custom String("Show If On Wall", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Show HPS Dealt", Null, Null, Null), Custom String("Show Status Effects", Null, Null, Null), Custom String("Show DPS Dealt", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Show HPS Received", Null, Null, Null), Custom String("Show Damage/Heal Numbers", Null, Null, Null), Custom String("Show DPS Received", Null, Null, Null), Custom String("", Null, Null, Null)));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Array(Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Faster Abilities [OFF]", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Increased Damage Dealt [OFF]", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Reduced Damage Taken [OFF]", Null, Null, Null), Custom String("Slow Motion [OFF]", Null, Null, Null), Custom String("Faster Respawn [OFF]", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Auto-Regen Health [OFF]", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Disable Mode Completion [OFF]", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null)));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 6, Array(Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("Edit Dummy Bots", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null), Custom String("", Null, Null, Null)));
    }
}

rule("[interface/menu.ostw] Set up color grid")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Action count: 6
    actions
    {
        Set Player Variable(Event Player, ButtonColorGrid, Empty Array);
        Set Player Variable At Index(Event Player, ButtonColorGrid, 1, Array(Null, Null, Null, Null, Null, Null, Custom Color(200, 50, 50, 255), Null, Color(Green), Null, Null, Null, Null, Null, Null, Null, Color(Sky Blue), Null, Color(Yellow), Null, Null, Null, Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Array(Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(80, 187, 217, 255), Color(Blue), Color(Green), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Color(Yellow), Custom Color(0, 0, 0, 0), Color(Orange), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(50, 220, 27, 255), Color(Aqua), Custom Color(200, 50, 50, 255), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0)));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Array(Null, Custom Color(200, 50, 50, 255), Color(Aqua), Color(Turquoise), Null, Null, Color(Green), Color(Rose), Color(Orange), Null, Null, Color(Sky Blue), Color(Purple), Color(Violet), Null, Null, Color(Yellow), Color(Lime Green), Color(Red), Null, Null, Custom Color(245, 200, 0, 255), Color(Blue), Custom Color(218, 76, 10, 255), Null));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Array(Null, Null, Null, Null, Null, Null, Color(Gray), Null, Color(Gray), Null, Null, Color(Gray), Color(Gray), Color(Gray), Null, Null, Color(Gray), Null, Color(Gray), Null, Null, Null, Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 6, Array(Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Color(Yellow), Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Null, Null));
    }
}

rule("[interface/menu.ostw] When menu state changes, find new first selection")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, currentMenuState) != 0;
    }

    // Action count: 17
    actions
    {
        Wait(0.064, Abort When False);
        If(And(Compare(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), !=, 0), Not(Array Contains(Array(2), Player Variable(Event Player, currentMenuState)))));
            Set Player Variable(Event Player, menuXIndex, 0);
            Set Player Variable(Event Player, menuYIndex, 0);
            While(Compare(Player Variable(Event Player, menuYIndex), <, 5));
                While(Compare(Player Variable(Event Player, menuXIndex), <, 5));
                    If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), !=, 0));
                        Skip(6);
                    End;
                    Set Player Variable(Event Player, menuXIndex, Add(Player Variable(Event Player, menuXIndex), 1));
                End;
                Set Player Variable(Event Player, menuYIndex, Add(Player Variable(Event Player, menuYIndex), 1));
                Set Player Variable(Event Player, menuXIndex, 0);
            End;
        End;
        Wait Until(Compare(Player Variable(Event Player, currentMenuState), !=, Evaluate Once(Player Variable(Event Player, currentMenuState))), 1000000);
        Loop If Condition Is True;
    }
}

rule("Initial Global")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 4
    actions
    {
        Set Global Variable(UseRoleQueueHealth, Workshop Setting Toggle(Custom String("Hero Settings", Null, Null, Null), Custom String("Use Role Queue Tank Health", Null, Null, Null), True, 0));
        Set Global Variable At Index(_extendedGlobalCollection, 0, Workshop Setting Combo(Custom String("Settings", Null, Null, Null), Custom String("Log Level", Null, Null, Null), 0, Array(Custom String("Debug", Null, Null, Null), Custom String("Info", Null, Null, Null), Custom String("Warning", Null, Null, Null), Custom String("Error", Null, Null, Null)), 0));
        Set Global Variable(AllButtons, Array(Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Crouch), Button(Jump), Button(Melee), Button(Reload), Button(Ultimate), Button(Interact)));
        Set Global Variable(OptimizeMetricsForOverTime, Workshop Setting Toggle(Custom String("Information", Null, Null, Null), Custom String("Optimize DPS/HPS Meters for Over Time Effects", Null, Null, Null), False, 0));
    }
}

rule("Initial Player")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Action count: 26
    actions
    {
        Set Player Variable(Event Player, currentMenuState, 0);
        Set Player Variable(Event Player, buttonLocks, Empty Array);
        Set Player Variable(Event Player, thirdPersonDirection, 1);
        Set Player Variable(Event Player, thirdPersonZoom, -2.5);
        Set Player Variable(Event Player, activeInfoDisplays, Empty Array);
        Set Player Variable(Event Player, infoDisplayEntities, Empty Array);
        Set Player Variable(Event Player, healingReceivedEvents_timestamp, Empty Array);
        Set Player Variable(Event Player, healingReceivedEvents_amount, Empty Array);
        Set Player Variable(Event Player, healingReceivedEvents_healer, Empty Array);
        Set Player Variable(Event Player, healingReceivedEvents_healee, Empty Array);
        Set Player Variable(Event Player, healingDealtEvents_timestamp, Empty Array);
        Set Player Variable(Event Player, healingDealtEvents_amount, Empty Array);
        Set Player Variable(Event Player, healingDealtEvents_healer, Empty Array);
        Set Player Variable(Event Player, healingDealtEvents_healee, Empty Array);
        Set Player Variable(Event Player, damageReceivedEvents_timestamp, Empty Array);
        Set Player Variable(Event Player, damageReceivedEvents_amount, Empty Array);
        Set Player Variable(Event Player, damageReceivedEvents_attacker, Empty Array);
        Set Player Variable(Event Player, damageReceivedEvents_victim, Empty Array);
        Set Player Variable(Event Player, damageDealtEvents_timestamp, Empty Array);
        Set Player Variable(Event Player, damageDealtEvents_amount, Empty Array);
        Set Player Variable(Event Player, damageDealtEvents_attacker, Empty Array);
        Set Player Variable(Event Player, damageDealtEvents_victim, Empty Array);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 7, -1);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 8, -1);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 12, -1);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 13, -1);
    }
}

rule("[main.ostw] Skip assembling heroes")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Is Assembling Heroes == True;
    }

    // Action count: 8
    actions
    {
        Set Match Time(Workshop Setting Integer(Custom String("Settings", Null, Null, Null), Custom String("Assembling Heroes Length (too short may mean no replay)", Null, Null, Null), 5, 0, 30, 0));
        If(Global Variable(isTimePaused));
            Unpause Match Time;
            Set Global Variable(isTimePaused, False);
            Wait Until(Not(Is Assembling Heroes), 9999);
            Pause Match Time;
            Set Global Variable(isTimePaused, True);
        End;
    }
}

rule("[main.ostw] pause match time on start of round")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Not(Is Assembling Heroes) == True;
    }

    // Action count: 2
    actions
    {
        Pause Match Time;
        Set Global Variable(isTimePaused, True);
    }
}

rule("[main.ostw] Go back to lobby early, skipping victory poses and POTG")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Workshop Setting Toggle(Custom String("Settings", Null, Null, Null), Custom String("Skip Post-Match Flow", Null, Null, Null), True, 0) == True;
        Is Match Complete == True;
    }

    // Action count: 2
    actions
    {
        Wait(3, Ignore Condition);
        Return To Lobby;
    }
}

rule("[main.ostw] Avoid getting people stuck in menu")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Between Rounds == True;
    }

    // Action count: 1
    actions
    {
        Set Player Variable(Event Player, currentMenuState, 0);
    }
}

rule("Create tank health pool")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Global Variable(UseRoleQueueHealth) == True;
        Array Contains(All Tank Heroes, Hero Of(Event Player)) == True;
        And(Compare(Hero Of(Event Player), ==, Hero(D.va)), Is In Alternate Form(Event Player)) == False;
    }

    // Action count: 3
    actions
    {
        Add Health Pool To Player(Event Player, Health, 150, True, True);
        Wait Until(Or(Or(Not(Global Variable(UseRoleQueueHealth)), Not(Array Contains(All Tank Heroes, Hero Of(Event Player)))), And(Compare(Hero Of(Event Player), ==, Hero(D.va)), Is In Alternate Form(Event Player))), 1000000);
        Remove Health Pool From Player(Last Created Health Pool);
    }
}

rule("[interface/menu.ostw] Global menu setup")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 15
    actions
    {
        "Create prompt to open mneu"
        Create HUD Text(If-Then-Else(Or(Not(Player Variable(Local Player, hideMenuOpenTooltip)), Compare(Player Variable(Local Player, currentMenuState), !=, 0)), Local Player, Null), Null, Null, Custom String("Hold [{0}] to {1} menu", Input Binding String(Button(Interact)), If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), ==, 0), Custom String("open", Null, Null, Null), Custom String("close", Null, Null, Null)), Null), Top, 1, Color(White), Color(White), If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), ==, 0), Color(Green), Color(Red)), Visible To String and Color, Visible Never);
        "Create controls hint"
        Create In-World Text(If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), !=, 0), Local Player, Null), Custom String("{0} SELECT  |  {2} {1}", Input Binding String(Button(Primary Fire)), If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), ==, 1), Custom String("CLOSE", Null, Null, Null), Custom String("BACK", Null, Null, Null)), Input Binding String(Button(Secondary Fire))), Update Every Frame(Add(Add(Add(Multiply(True, Eye Position(Local Player)), Multiply(Empty Array, Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))))), Multiply(-170, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(300, Facing Direction Of(Local Player)))), 2, Do Not Clip, Visible To Position and String, Color(White), Visible Never);
        "Create grid menu items"
        Set Global Variable(colIndex, 0);
        While(Compare(Global Variable(colIndex), <, 5));
            Set Global Variable(rowIndex, 0);
            While(Compare(Global Variable(rowIndex), <, 5));
                Create In-World Text(If-Then-Else(Array Contains(Array(0, 2), Player Variable(Local Player, currentMenuState)), Null, Local Player), Value In Array(Value In Array(Player Variable(Local Player, ButtonLabelGrid), Player Variable(Local Player, currentMenuState)), Add(Multiply(Evaluate Once(Global Variable(rowIndex)), 5), Evaluate Once(Global Variable(colIndex)))), Update Every Frame(Add(Add(Add(Multiply(True, Eye Position(Local Player)), Multiply(Multiply(100, Add(-3, Multiply(1.5, Evaluate Once(Global Variable(colIndex))))), Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))))), Multiply(Multiply(100, Subtract(Subtract(1.75, Multiply(0.75, Evaluate Once(Global Variable(rowIndex)))), 0.2)), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(300, Facing Direction Of(Local Player)))), 2, Do Not Clip, Visible To Position String and Color, If-Then-Else(And(And(Compare(Player Variable(Local Player, menuXIndex), ==, Evaluate Once(Global Variable(colIndex))), Compare(Player Variable(Local Player, menuYIndex), ==, Evaluate Once(Global Variable(rowIndex)))), Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Local Player, currentMenuState)), Add(Multiply(Player Variable(Local Player, menuYIndex), 5), Player Variable(Local Player, menuXIndex)))), Custom Color(255, 255, 255, Add(155, Multiply(100, Sine From Degrees(Modulo(Multiply(Total Time Elapsed, 720), 360))))), Value In Array(Value In Array(Player Variable(Local Player, ButtonColorGrid), Player Variable(Local Player, currentMenuState)), Add(Multiply(Evaluate Once(Global Variable(rowIndex)), 5), Evaluate Once(Global Variable(colIndex))))), Visible Never);
                Modify Global Variable(rowIndex, Add, 1);
            End;
            Modify Global Variable(colIndex, Add, 1);
        End;
        "Create confirm and abort buttons"
        Create In-World Text(If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), ==, 2), Local Player, Null), Custom String("Are you sure you want to end the game?", Null, Null, Null), Update Every Frame(Add(Add(Add(Multiply(True, Eye Position(Local Player)), Multiply(Empty Array, Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))))), Multiply(80, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(300, Facing Direction Of(Local Player)))), 3, Do Not Clip, Visible To And Position, Color(Rose), Visible Never);
        "Create bespoke end match confirm screen"
        Create In-World Text(If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), ==, 2), Local Player, Null), Custom String("[YES]", Null, Null, Null), Update Every Frame(Add(Add(Add(Multiply(True, Eye Position(Local Player)), Multiply(-70, Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))))), Multiply(-90, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(300, Facing Direction Of(Local Player)))), 3, Do Not Clip, Visible To Position String and Color, If-Then-Else(And(Compare(Player Variable(Local Player, menuXIndex), ==, 0), Compare(Player Variable(Local Player, menuYIndex), ==, 0)), Custom Color(255, 255, 255, Add(155, Multiply(100, Sine From Degrees(Modulo(Multiply(Total Time Elapsed, 720), 360))))), Color(Red)), Visible Never);
        Create In-World Text(If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), ==, 2), Local Player, Null), Custom String("[NO]", Null, Null, Null), Update Every Frame(Add(Add(Add(Multiply(True, Eye Position(Local Player)), Multiply(70, Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))))), Multiply(-90, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(300, Facing Direction Of(Local Player)))), 3, Do Not Clip, Visible To Position String and Color, If-Then-Else(And(Compare(Player Variable(Local Player, menuXIndex), ==, 1), Compare(Player Variable(Local Player, menuYIndex), ==, 0)), Custom Color(255, 255, 255, Add(155, Multiply(100, Sine From Degrees(Modulo(Multiply(Total Time Elapsed, 720), 360))))), Color(Lime Green)), Visible Never);
        "Create background orbie"
        Create Effect(If-Then-Else(Compare(Player Variable(Local Player, currentMenuState), !=, 0), Local Player, Null), Orb, Color(Black), Subtract(Player Variable(Local Player, menuActivationPoint_eyePosition), Multiply(0.325, Player Variable(Local Player, menuActivationPoint_facing))), 0.25, Visible To Position and Radius);
    }
}

rule("[interface/menu.ostw] When player first opens menu, hide tooltip when menu is closed")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Not(Player Variable(Event Player, hideMenuOpenTooltip)) == True;
        Player Variable(Event Player, currentMenuState) != 0;
    }

    // Action count: 1
    actions
    {
        Set Player Variable(Event Player, hideMenuOpenTooltip, True);
    }
}

rule("[lib/player/buttonControl.del] update player button status")
{

    event
    {
        Subroutine;
        UpdatePlayerButtonStatus;
    }

    // Action count: 7
    actions
    {
        For Global Variable(foreachIndex, 0, Count Of(Global Variable(AllButtons)), 1);
            If(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Value In Array(Global Variable(AllButtons), Global Variable(foreachIndex)))), ==, 0));
                Allow Button(Global Variable(player), Value In Array(Global Variable(AllButtons), Global Variable(foreachIndex)));
            Else;
                Disallow Button(Global Variable(player), Value In Array(Global Variable(AllButtons), Global Variable(foreachIndex)));
            End;
        End;
    }
}

rule("[interface/menu.ostw] Initialize player and perform cleanup")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, currentMenuState) != 0;
    }

    // Action count: 37
    actions
    {
        "Note that we store it for reevaluation, because changing heroes causes a respawn which overwrites non-reeval force pos and facing"
        Set Player Variable(Event Player, menuActivationPoint_location, Position Of(Event Player));
        Set Player Variable(Event Player, menuActivationPoint_eyePosition, Eye Position(Event Player));
        Set Player Variable(Event Player, menuActivationPoint_facing, Facing Direction Of(Event Player));
        Set Aim Speed(Event Player, 0);
        Start Facing(Event Player, Player Variable(Event Player, menuActivationPoint_facing), 1000, To World, None);
        Start Forcing Player Position(Event Player, Player Variable(Event Player, menuActivationPoint_location), False);
        Set Gravity(Event Player, 0);
        Set Player Variable(Event Player, buttonLocks, Mapped Array(Player Variable(Event Player, buttonLocks), Add(Current Array Element, 1)));
        Set Global Variable(player, Event Player);
        Call Subroutine(UpdatePlayerButtonStatus);
        Set Invisible(Event Player, All);
        Set Status(Event Player, Null, Phased Out, 1000000);
        Disable Kill Feed(Event Player);
        Disable Game Mode In-World UI(Event Player);
        Disable Game Mode HUD(Event Player);
        Disable Hero HUD(Event Player);
        Start Camera(Event Player, Player Variable(Event Player, menuActivationPoint_eyePosition), Add(Player Variable(Event Player, menuActivationPoint_eyePosition), Player Variable(Event Player, menuActivationPoint_facing)), 100);
        Set Player Variable(Event Player, menuXIndex, 0);
        Set Player Variable(Event Player, menuYIndex, 0);
        Wait Until(Compare(Player Variable(Event Player, currentMenuState), ==, 0), 9999);
        Stop Camera(Event Player);
        Enable Kill Feed(Event Player);
        Enable Game Mode In-World UI(Event Player);
        Enable Game Mode HUD(Event Player);
        Enable Hero HUD(Event Player);
        Stop Facing(Event Player);
        Stop Forcing Player Position(Event Player);
        If(Not(Player Variable(Event Player, isNoClipActive)));
            Set Gravity(Event Player, 100);
        End;
        Set Aim Speed(Event Player, 100);
        "Give a leniency period for buttons to be let go of"
        Wait(0.25, Restart When True);
        Set Player Variable(Event Player, buttonLocks, Mapped Array(Player Variable(Event Player, buttonLocks), Max(0, Subtract(Current Array Element, 1))));
        Set Global Variable(player, Event Player);
        Call Subroutine(UpdatePlayerButtonStatus);
        Set Invisible(Event Player, None);
        Clear Status(Event Player, Phased Out);
    }
}

rule("[interface/menu.ostw] When player holds Interact long enough, toggle menu")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
    }

    // Action count: 6
    actions
    {
        Wait(0.5, Abort When False);
        If(Compare(Player Variable(Event Player, currentMenuState), ==, 0));
            Set Player Variable(Event Player, currentMenuState, 1);
        Else;
            Set Player Variable(Event Player, currentMenuState, 0);
        End;
    }
}

rule("Handle confirm/cancel for ending game")
{

    event
    {
        Subroutine;
        HandleConfirmEndGameClick;
    }

    // Action count: 11
    actions
    {
        If(And(Compare(Player Variable(Event Player, menuXIndex), ==, 1), Compare(Player Variable(Event Player, menuYIndex), ==, 0)));
            Set Player Variable(Event Player, currentMenuState, 5);
            Else If(And(Compare(Player Variable(Event Player, menuXIndex), ==, 0), Compare(Player Variable(Event Player, menuYIndex), ==, 0)));
            Declare Match Draw;
            Wait(0.25, Ignore Condition);
            If(Is Match Complete);
                Set Player Variable(Event Player, currentMenuState, 0);
                Skip(3);
            End;
            Small Message(Event Player, Custom String("Can't seem to end the game right now. Try again in a bit!"));
        End;
    }
}

rule("[interface/menu.ostw] Primary fire to select current item")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Action count: 33
    actions
    {
        Abort If(Compare(Player Variable(Event Player, currentMenuState), ==, 0));
        Abort If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), ==, 0));
        Skip(Value In Array(Array(30, 0, 2, 4, 9, 23, 26), Add(Index Of Array Value(Array(1, 2, 5, 3, 4, 6), Player Variable(Event Player, currentMenuState)), 1)));
        Set Player Variable(Event Player, currentMenuState, Value In Array(Value In Array(Global Variable(ButtonActionGrid), 1), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))));
        Skip(28);
        Call Subroutine(HandleConfirmEndGameClick);
        Skip(26);
        Abort If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), 5), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), ==, 0));
        Set Player Variable(Event Player, toolsActionID, Value In Array(Value In Array(Global Variable(ButtonActionGrid), 5), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, toolsActionID, Null);
        Skip(21);
        Abort If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), 3), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), ==, 0));
        If(Compare(Count Of(Player Variable(Event Player, activeInfoDisplays)), >=, 5));
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 200);
            Small Message(Event Player, Custom String("{0} Too many active readouts (max {1}).", Icon String(Warning), 5, Null));
            Wait(0.15, Ignore Condition);
            Small Message(Event Player, Custom String("{0} Remove some readouts and try again", Icon String(Warning), Null, Null));
            Skip(6);
        End;
        If(Array Contains(Player Variable(Event Player, activeInfoDisplays), Value In Array(Value In Array(Global Variable(ButtonActionGrid), 3), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex)))));
            Modify Player Variable(Event Player, activeInfoDisplays, Remove From Array By Value, Value In Array(Value In Array(Global Variable(ButtonActionGrid), 3), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))));
        Else;
            Modify Player Variable(Event Player, activeInfoDisplays, Append To Array, Value In Array(Value In Array(Global Variable(ButtonActionGrid), 3), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))));
        End;
        Skip(7);
        Abort If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), 4), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), ==, 0));
        Set Global Variable At Index(activeModifications, Value In Array(Value In Array(Global Variable(ButtonActionGrid), 4), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), Not(Value In Array(Global Variable(activeModifications), Value In Array(Value In Array(Global Variable(ButtonActionGrid), 4), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))))));
        Skip(4);
        Abort If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), 6), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))), ==, 0));
        Set Player Variable(Event Player, selectedBotsReplayAction, Value In Array(Value In Array(Global Variable(ButtonActionGrid), 6), Add(Multiply(Player Variable(Event Player, menuYIndex), 5), Player Variable(Event Player, menuXIndex))));
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, selectedBotsReplayAction, 0);
    }
}

rule("[interface/menu.ostw] Secondary fire to go back")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }

    // Action count: 12
    actions
    {
        Abort If(Compare(Player Variable(Event Player, currentMenuState), ==, 0));
        If(Compare(Player Variable(Event Player, currentMenuState), ==, 1));
            "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
            Wait(0.016, Ignore Condition);
            Set Player Variable(Event Player, currentMenuState, 0);
            Abort;
        End;
        If(Array Contains(Array(3, 4, 5, 6), Player Variable(Event Player, currentMenuState)));
            Set Player Variable(Event Player, currentMenuState, 1);
        End;
        If(Compare(Player Variable(Event Player, currentMenuState), ==, 2));
            Set Player Variable(Event Player, currentMenuState, 5);
        End;
    }
}

rule("[interface/menuDefinitions.ostw | SUB] Zero row and column offsets")
{

    event
    {
        Subroutine;
        zeroOffsets;
    }

    // Action count: 2
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, 0);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, 0);
    }
}

rule("[interface/menuDefinitions.ostw | SUB] Apply current offsets")
{

    event
    {
        Subroutine;
        applyOffsets;
    }

    // Action count: 2
    actions
    {
        Set Player Variable(Event Player, menuXIndex, Modulo(Add(Modulo(Add(Player Variable(Event Player, menuXIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)));
        Set Player Variable(Event Player, menuYIndex, Modulo(Add(Modulo(Add(Player Variable(Event Player, menuYIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)));
    }
}

rule("[interface/menuDefinitions.ostw | SUB] Find first item to the left")
{

    event
    {
        Subroutine;
        findLeft;
    }

    // Action count: 15
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Compare(Absolute Value(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), <, Divide(Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1), 2)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, -1);
            While(Compare(Absolute Value(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), <, Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)));
                "If item here, shift menu selection to the new item"
                If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), Add(Multiply(Add(Player Variable(Event Player, menuYIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Modulo(Add(Modulo(Add(Player Variable(Event Player, menuXIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)))), !=, 0));
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Subtract, 1);
            End;
            If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0), >=, 0));
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Add, 1);
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Multiply(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0), -1));
        End;
    }
}

rule("[interface/menuDefinitions.ostw | SUB] Find first item to the right")
{

    event
    {
        Subroutine;
        findRight;
    }

    // Action count: 15
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Compare(Absolute Value(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), <, Divide(Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1), 2)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, 1);
            While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), <, Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)));
                "If item here, shift menu selection to the new item"
                If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), Add(Multiply(Add(Player Variable(Event Player, menuYIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Modulo(Add(Modulo(Add(Player Variable(Event Player, menuXIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)))), !=, 0));
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Add, 1);
            End;
            If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0), >=, 0));
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Add, 1);
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Multiply(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0), -1));
        End;
    }
}

rule("[interface/menu.ostw] Menu left-right")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, currentMenuState) != 0;
        Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.5;
    }

    // Action count: 5
    actions
    {
        If(Compare(X Component Of(Throttle Of(Event Player)), >, 0));
            Call Subroutine(findLeft);
        Else;
            Call Subroutine(findRight);
        End;
    }
}

rule("[interface/menuDefinitions.ostw | SUB] Find first item upwards")
{

    event
    {
        Subroutine;
        findUp;
    }

    // Action count: 15
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Compare(Absolute Value(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), <, Divide(Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1), 2)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, -1);
            While(Compare(Absolute Value(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), <, Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)));
                "If item here, shift menu selection to the new item"
                If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), Add(Multiply(Modulo(Add(Modulo(Add(Player Variable(Event Player, menuYIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Player Variable(Event Player, menuXIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)))), !=, 0));
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Subtract, 1);
            End;
            If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), >=, 0));
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Add, 1);
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Multiply(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), -1));
        End;
    }
}

rule("interface/menuDefinitions.ostw | [SUB] Find first item downwards")
{

    event
    {
        Subroutine;
        findDown;
    }

    // Action count: 15
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Compare(Absolute Value(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)), <, Divide(Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1), 2)));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 0, 1);
            While(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0), <, Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)));
                "If item here, shift menu selection to the new item"
                If(Compare(Value In Array(Value In Array(Global Variable(ButtonActionGrid), Player Variable(Event Player, currentMenuState)), Add(Multiply(Modulo(Add(Modulo(Add(Player Variable(Event Player, menuYIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 0)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Add(1.75, 1.25), 0.75), Down), 1)), Add(Round To Integer(Divide(Subtract(3, -3), 1.5), Down), 1)), Add(Player Variable(Event Player, menuXIndex), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1)))), !=, 0));
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 0, Add, 1);
            End;
            If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), >=, 0));
                Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Add, 1);
            End;
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 1, Multiply(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 1), -1));
        End;
    }
}

rule("[interface/menu.ostw] Menu up-down")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, currentMenuState) != 0;
        Absolute Value(Z Component Of(Throttle Of(Event Player))) > 0.5;
    }

    // Action count: 5
    actions
    {
        If(Compare(Z Component Of(Throttle Of(Event Player)), >, 0));
            Call Subroutine(findUp);
        Else;
            Call Subroutine(findDown);
        End;
    }
}

rule("[lib/player/buttonControl.del] Initialize buttonLocks array")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Action count: 1
    actions
    {
        Set Player Variable At Index(Event Player, buttonLocks, Count Of(Global Variable(AllButtons)), 0);
    }
}

rule("[lib/player/buttonControl.del] MONKEY PATCH - For Winston, disable secondary fire instead of just disallowing button (because disallow doesn't work on Winston)")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Secondary Fire))) > 0;
        Hero Of(Event Player) == Hero(Winston);
    }

    // Action count: 3
    actions
    {
        Set Secondary Fire Enabled(Event Player, False);
        Wait Until(Or(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Secondary Fire))), ==, 0), Compare(Hero Of(Event Player), !=, Hero(Winston))), 99999);
        Set Secondary Fire Enabled(Event Player, True);
    }
}

rule("[interface/toolsMenu.ostw] Respawn point")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 1;
    }

    // Action count: 24
    actions
    {
        If(Compare(Player Variable(Event Player, respawnPoint_location), ==, Null));
            Set Player Variable(Event Player, respawnPoint_location, Position Of(Event Player));
            Set Player Variable(Event Player, respawnPoint_eyePosition, Eye Position(Event Player));
            Set Player Variable(Event Player, respawnPoint_facing, Facing Direction Of(Event Player));
            Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
            Small Message(Event Player, Custom String("Respawn point set!", Null, Null, Null));
            "Set new button look"
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 6, Custom String("Clear Respawn Point", Null, Null, Null));
            Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 6, Color(Gray));
            Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Else;
            Set Player Variable(Event Player, respawnPoint_location, Null);
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Small Message(Event Player, Custom String("Respawn point cleared", Null, Null, Null));
            "Set new button look"
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 6, Custom String("Set Respawn Point", Null, Null, Null));
            Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 6, Custom Color(80, 187, 217, 255));
            Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        End;
        Wait(0.5, Ignore Condition);
    }
}

rule("[interface/toolsMenu.ostw] If respawn point is set, and player dies, respawn them at the respawn point")
{

    event
    {
        Player died;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, respawnPoint_location) != Null;
    }

    // Action count: 4
    actions
    {
        Wait Until(Is Alive(Event Player), 9999);
        Teleport(Event Player, Player Variable(Event Player, respawnPoint_location));
        "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Player Variable(Event Player, respawnPoint_facing), To World);
    }
}

rule("[interface/toolsMenu.ostw] Change hero")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 2;
    }

    // Action count: 10
    actions
    {
        Set Player Allowed Heroes(Event Player, Remove From Array(Allowed Heroes(Event Player), Hero Of(Event Player)));
        Wait Until(Not(Has Spawned(Event Player)), 3);
        Reset Player Hero Availability(Event Player);
        Wait Until(Has Spawned(Event Player), 9999);
        Stop Forcing Player Position(Event Player);
        Start Forcing Player Position(Event Player, Player Variable(Event Player, menuActivationPoint_location), True);
        Wait(0.064, Ignore Condition);
        Wait Until(And(Compare(Distance Between(Event Player, Player Variable(Event Player, menuActivationPoint_location)), <, 0.05), Compare(Angle Between Vectors(Facing Direction Of(Event Player), Player Variable(Event Player, menuActivationPoint_facing)), <, 0.1)), 1);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, currentMenuState, 0);
    }
}

rule("[interface/toolsMenu.ostw] Toggle noclip")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 3;
    }

    // Action count: 19
    actions
    {
        If(Player Variable(Event Player, isNoClipActive));
            Set Player Variable(Event Player, isNoClipActive, False);
            "Set new button look"
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 8, Custom String("Enable NoClip", Null, Null, Null));
            Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 8, Color(Green));
            Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Else;
            Set Player Variable(Event Player, isNoClipActive, True);
            "Set new button look"
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 8, Custom String("Disable NoClip", Null, Null, Null));
            Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
            Set Global Variable At Index(_arrayConstructor, 8, Color(Red));
            Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        End;
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, currentMenuState, 0);
    }
}

rule("[interface/toolsMenu.ostw] Toggle pause button")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 6;
    }

    // Action count: 6
    actions
    {
        If(Global Variable(isTimePaused));
            Unpause Match Time;
        Else;
            Pause Match Time;
        End;
        Set Global Variable(isTimePaused, Not(Global Variable(isTimePaused)));
    }
}

rule("[interface/toolsMenu.ostw] Keep pause button appearance updated for everyone - Unpause")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Global Variable(isTimePaused) == True;
    }

    // Action count: 6
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 16, Custom String("Unpause Match Time", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 16, Custom Color(50, 220, 27, 255));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
    }
}

rule("[interface/toolsMenu.ostw] Keep pause button appearance update for everyone - Pause")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Not(Global Variable(isTimePaused)) == True;
    }

    // Action count: 6
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 16, Custom String("Pause Match Time", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 16, Color(Purple));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
    }
}

rule("[interface/toolsMenu.ostw] When fast-forward is requested, make it happen")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 4;
    }

    // Action count: 22
    actions
    {
        "Setup skip"
        If(Is In Setup);
            Set Match Time(0);
            Else If(Is Game In Progress);
            If(Compare(Current Game Mode, ==, Game Mode(Control)));
                Declare Round Victory(Team Of(Event Player));
            Else;
                Set Match Time(0);
            End;
        Else;
            Small Message(Event Player, Custom String(" Current phase can't be skipped?", Null, Null, Null));
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Abort;
        "Otherwise, logic to end round"
        End;
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, currentMenuState, 0);
        If(Global Variable(isTimePaused));
            Unpause Match Time;
            Set Global Variable(isTimePaused, False);
            Wait(0.032, Ignore Condition);
            Pause Match Time;
            Set Global Variable(isTimePaused, True);
        End;
    }
}

rule("[interface/toolsMenu.ostw] When in setup, change fast-forward button to skip setup")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is In Setup == True;
    }

    // Action count: 6
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 17, Custom String("Skip Setup", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 17, Color(Aqua));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
    }
}

rule("[interface/toolsMenu.ostw] When game is in progress, change fast-forward button to end round")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Game In Progress == True;
    }

    // Action count: 6
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 17, Custom String("End Round", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 17, Custom Color(212, 62, 62, 255));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
    }
}

rule("[interface/toolsMenu.ostw] Handle request to end match")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 5;
    }

    // Action count: 4
    actions
    {
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, currentMenuState, 2);
        Set Player Variable(Event Player, menuXIndex, 1);
        Set Player Variable(Event Player, menuYIndex, 0);
    }
}

rule("[interface/toolsMenu.ostw] Handle request to toggle ruler")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 7;
    }

    // Action count: 26
    actions
    {
        Skip(Value In Array(Array(25, 0, 10, 18), Add(Index Of Array Value(Array(0, 1, 2), Player Variable(Event Player, playerRulerState)), 1)));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Freeze Ruler", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 11, Color(Orange));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Set Player Variable(Event Player, playerRulerState, 1);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, currentMenuState, 0);
        Skip(15);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Hide Ruler", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 11, Custom Color(200, 50, 50, 255));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Set Player Variable(Event Player, playerRulerState, 2);
        Skip(7);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Place Ruler", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 11, Color(Yellow));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Set Player Variable(Event Player, playerRulerState, 0);
    }
}

rule("[interface/toolsMenu.ostw] Handle request to change third person state")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, toolsActionID) == 8;
    }

    // Action count: 24
    actions
    {
        Skip(Value In Array(Array(23, 0, 8, 16), Add(Index Of Array Value(Array(0, 1, 2), Player Variable(Event Player, thirdPersonState)), 1)));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Set 3P Camera Pos", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Green));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Set Player Variable(Event Player, thirdPersonState, 1);
        Skip(15);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Stop 3rd Person", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Red));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Set Player Variable(Event Player, thirdPersonState, 2);
        Skip(7);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Enable 3rd Person", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 5, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 5));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Orange));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 5, Global Variable(_arrayConstructor));
        Set Player Variable(Event Player, thirdPersonState, 0);
    }
}

rule("Initiate confirmation dialog")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, currentMenuState) == 2;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Action count: 2
    actions
    {
        Set Player Variable(Event Player, menuXIndex, 1);
        Set Player Variable(Event Player, menuYIndex, 0);
    }
}

rule("[interface/tools/ruler.ostw] Create help text for ruler")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 1
    actions
    {
        Create HUD Text(If-Then-Else(And(Compare(Player Variable(Local Player, currentMenuState), ==, 0), Compare(Player Variable(Local Player, playerRulerState), ==, 1)), Local Player, Null), Null, Custom String("Placing Ruler Endpoints", Null, Null, Null), Custom String("[{0}] Move Blue Point\n[{1}] Move Orange Point", Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Null), Right, 0, Color(White), Color(Yellow), Color(White), Visible To And String, Default Visibility);
    }
}

rule("[interface/tools/ruler.ostw] When ruler is active, disable primary + secondary until ruler placement is not active")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, playerRulerState) == 1;
    }

    // Action count: 13
    actions
    {
        Modify Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Primary Fire)), Add, 1);
        Disallow Button(Event Player, Button(Primary Fire));
        Modify Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Secondary Fire)), Add, 1);
        Disallow Button(Event Player, Button(Secondary Fire));
        Wait Until(Compare(Player Variable(Event Player, playerRulerState), !=, 1), 99999);
        Set Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Primary Fire)), Max(0, Subtract(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Primary Fire))), 1)));
        If(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Primary Fire))), ==, 0));
            Allow Button(Event Player, Button(Primary Fire));
        End;
        Set Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Secondary Fire)), Max(0, Subtract(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Secondary Fire))), 1)));
        If(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Secondary Fire))), ==, 0));
            Allow Button(Event Player, Button(Secondary Fire));
        End;
    }
}

rule("[interface/tools/ruler.ostw] Manage ruler visual effects lifecycle")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, playerRulerState) != 0;
    }

    // Action count: 20
    actions
    {
        "Need to initialize ruler if it hasn't been placed before"
        If(Compare(Player Variable(Event Player, position1), ==, Null));
            Set Player Variable(Event Player, position1, Ray Cast Hit Position(Eye Position(Event Player), Add(Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), World Vector Of(Left, Event Player, Rotation)), Null, Null, False));
        End;
        If(Compare(Player Variable(Event Player, position2), ==, Null));
            Set Player Variable(Event Player, position2, Ray Cast Hit Position(Eye Position(Event Player), Add(Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), World Vector Of(Right, Event Player, Rotation)), Null, Null, False));
        End;
        Create Effect(All Players(Team(All)), Sphere, Color(Blue), Update Every Frame(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1))), 0.2, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, rulerEffects, 0, Last Created Entity);
        Create Effect(All Players(Team(All)), Sphere, Color(Orange), Update Every Frame(If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2))), 0.2, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, rulerEffects, 1, Last Created Entity);
        Create Beam Effect(All Players(Team(All)), Grapple Beam, Update Every Frame(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1))), Update Every Frame(If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2))), Null, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, rulerEffects, 2, Last Created Entity);
        Create In-World Text(Filtered Array(All Players(Team(All)), Compare(Player Variable(Current Array Element, currentMenuState), ==, 0)), Custom String("{0}m\n", Distance Between(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1)), If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2))), Null, Null), Update Every Frame(Divide(Add(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1)), If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2))), 2)), 1.5, Do Not Clip, Visible To Position and String, Color(White), Visible Always);
        Set Player Variable At Index(Event Player, rulerEffects, 3, Last Text ID);
        Create In-World Text(Filtered Array(All Players(Team(All)), Compare(Player Variable(Current Array Element, currentMenuState), ==, 0)), Custom String(" \nLOS: {0}", Is In Line Of Sight(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1)), If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2)), Barriers Do Not Block LOS), Null, Null), Update Every Frame(Divide(Add(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1)), If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2))), 2)), 1.5, Do Not Clip, Visible To Position String and Color, If-Then-Else(Is In Line Of Sight(If-Then-Else(Player Variable(Event Player, isMovingPosition1), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position1)), If-Then-Else(Player Variable(Event Player, isMovingPosition2), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True), Player Variable(Event Player, position2)), Barriers Do Not Block LOS), Color(Green), Color(Red)), Visible Always);
        Set Player Variable At Index(Event Player, rulerEffects, 4, Last Text ID);
        Wait Until(Compare(Player Variable(Event Player, playerRulerState), ==, 0), 99999);
        Destroy Effect(Array Slice(Player Variable(Event Player, rulerEffects), 0, 3));
        Destroy In-World Text(Value In Array(Player Variable(Event Player, rulerEffects), 3));
        Destroy In-World Text(Value In Array(Player Variable(Event Player, rulerEffects), 4));
    }
}

rule("[interface/tools/ruler.ostw] Handle player setting first point")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Alive(Event Player) == True;
        Player Variable(Event Player, playerRulerState) == 1;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Action count: 5
    actions
    {
        Abort If(Compare(Player Variable(Event Player, currentMenuState), !=, 0));
        Set Player Variable(Event Player, isMovingPosition1, True);
        Wait Until(Not(Is Button Held(Event Player, Button(Primary Fire))), 99999);
        Set Player Variable(Event Player, isMovingPosition1, False);
        Set Player Variable(Event Player, position1, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True));
    }
}

rule("[interface/tools/ruler.ostw] Handle player setting second point")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Alive(Event Player) == True;
        Player Variable(Event Player, playerRulerState) == 1;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }

    // Action count: 5
    actions
    {
        Abort If(Compare(Player Variable(Event Player, currentMenuState), !=, 0));
        Set Player Variable(Event Player, isMovingPosition2, True);
        Wait Until(Not(Is Button Held(Event Player, Button(Secondary Fire))), 99999);
        Set Player Variable(Event Player, isMovingPosition2, False);
        Set Player Variable(Event Player, position2, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(5, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True));
    }
}

rule("[interface/tools/thirdPerson.ostw] When person is in third person and their menu state becomes closed, start third person camera")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Alive(Event Player) == True;
        And(Array Contains(Array(Hero(Widowmaker), Hero(Ashe), Hero(Ana)), Hero Of(Event Player)), Is Firing Secondary(Event Player)) == False;
        Player Variable(Event Player, thirdPersonState) != 0;
        Player Variable(Event Player, currentMenuState) == 0;
    }

    // Action count: 2
    actions
    {
        Wait(0.016, Ignore Condition);
        "Code borrowed from workshop.codes/third-person"
        Start Camera(Event Player, Ray Cast Hit Position(Eye Position(Event Player), Add(Add(Eye Position(Event Player), World Vector Of(Vector(Multiply(Player Variable(Event Player, thirdPersonDirection), Min(Divide(Player Variable(Event Player, thirdPersonZoom), 2.5), -0.75)), Empty Array, Empty Array), Event Player, Rotation)), Multiply(Facing Direction Of(Event Player), Player Variable(Event Player, thirdPersonZoom))), All Players(Team(All)), Event Player, False), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 200)), All Players(Team(All)), Event Player, False), 60);
    }
}

rule("[interface/tools/thirdPerson.ostw] Stop third person during certain conditions")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Array(Hero(Widowmaker), Hero(Ashe), Hero(Ana)), Hero Of(Event Player)) == True;
        Is Firing Secondary(Event Player) == True;
        Player Variable(Event Player, thirdPersonState) != 0;
        Player Variable(Event Player, currentMenuState) == 0;
    }

    // Action count: 1
    actions
    {
        Stop Camera(Event Player);
    }
}

rule("[lib/player/noClip.del] Global noclip setup")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 1
    actions
    {
        Create HUD Text(If-Then-Else(And(Player Variable(Local Player, isNoClipActive), Compare(Player Variable(Local Player, currentMenuState), ==, 0)), Local Player, Null), Null, Custom String("NoClip Active", Null, Null, Null), Custom String("Hold [{0}] - Move Faster", Input Binding String(Button(Reload)), Null, Null), Right, 1, Color(White), Color(Orange), If-Then-Else(Is Button Held(Local Player, Button(Reload)), Color(Orange), Color(Blue)), Visible To String and Color, Visible Never);
    }
}

rule("[lib/player/noClip.del] Engage noclip")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isNoClipActive) == True;
    }

    // Action count: 8
    actions
    {
        Set Gravity(Event Player, 0);
        Disable Movement Collision With Environment(Event Player, True);
        Disable Movement Collision With Players(Event Player);
        Set Move Speed(Event Player, 0);
        Modify Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Jump)), Add, 1);
        Disallow Button(Event Player, Button(Jump));
        Modify Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Crouch)), Add, 1);
        Disallow Button(Event Player, Button(Crouch));
    }
}

rule("[lib/player/noClip.del] Disengage noclip")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Not(Player Variable(Event Player, isNoClipActive)) == True;
    }

    // Action count: 12
    actions
    {
        Set Gravity(Event Player, 100);
        Enable Movement Collision With Environment(Event Player);
        Enable Movement Collision With Players(Event Player);
        Set Move Speed(Event Player, 100);
        Set Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Jump)), Max(0, Subtract(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Jump))), 1)));
        If(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Jump))), ==, 0));
            Allow Button(Event Player, Button(Jump));
        End;
        Set Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Crouch)), Max(0, Subtract(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Crouch))), 1)));
        If(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Crouch))), ==, 0));
            Allow Button(Event Player, Button(Crouch));
        End;
    }
}

rule("Noclip propulsion")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isNoClipActive) == True;
        Or(Or(Is Button Held(Event Player, Button(Crouch)), Is Button Held(Event Player, Button(Jump))), Compare(Throttle Of(Event Player), !=, Subtract(Left, Left))) == True;
    }

    // Action count: 6
    actions
    {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Multiply(Speed Of(Event Player), 0.03), To World, Incorporate Contrary Motion);
        If(Not(And(And(Is Button Held(Event Player, Button(Crouch)), Is Button Held(Event Player, Button(Jump))), Compare(Magnitude Of(Throttle Of(Event Player)), ==, 0))));
            Apply Impulse(Event Player, Normalize(Add(Add(Multiply(Facing Direction Of(Event Player), Z Component Of(Throttle Of(Event Player))), Multiply(World Vector Of(Left, Event Player, Rotation), X Component Of(Throttle Of(Event Player)))), Multiply(Up, Subtract(Is Button Held(Event Player, Button(Jump)), Is Button Held(Event Player, Button(Crouch)))))), Divide(Subtract(Add(100, Multiply(300, Is Button Held(Event Player, Button(Reload)))), Speed Of(Event Player)), 62.5), To World, Incorporate Contrary Motion);
        End;
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("Noclip air resistance")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isNoClipActive) == True;
        Not(Or(Or(Is Button Held(Event Player, Button(Crouch)), Is Button Held(Event Player, Button(Jump))), Compare(Throttle Of(Event Player), !=, Subtract(Left, Left)))) == True;
        Speed Of(Event Player) > 0.01;
    }

    // Action count: 3
    actions
    {
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Multiply(Speed Of(Event Player), 0.12), To World, Incorporate Contrary Motion);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has Position HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 7) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" POS: {0} ", Update Every Frame(Position Of(Event Player)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 7), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 7, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 6, Custom String("Hide Position", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 6, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 7)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 7));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 6, Custom String("Show Position", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 6, Color(Green));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has Facing Direction HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 8) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" LOOK: {0} ", Update Every Frame(Facing Direction Of(Event Player)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 8), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 8, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 7, Custom String("Hide Facing Direction", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 7, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 8)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 8));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 7, Custom String("Show Facing Direction", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 7, Color(Rose));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has Move Speed HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 1) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" SPEED: {0} ", Update Every Frame(Speed Of(Event Player)), Null, Null), Custom String("Vert: {0}", Vertical Speed Of(Event Player), Null, Null), Custom String("Horiz: {0}{1}", Horizontal Speed Of(Event Player), Custom String("                                                                                          ", Null, Null, Null), Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 1), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 1, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 8, Custom String("Hide Move Speed", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 8, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 1)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 1));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 8, Custom String("Show Move Speed", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 8, Color(Orange));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has Altitude HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 9) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" ALT: {0} ", Update Every Frame(Altitude Of(Event Player)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 9), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 9, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Hide Altitude", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 11, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 9)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 9));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Show Altitude", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 11, Color(Sky Blue));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has On Ground HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 10) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" ON GROUND: {0} ", Update Every Frame(Is On Ground(Event Player)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 10), If-Then-Else(Is On Ground(Event Player), Color(Green), Color(Red)), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 10, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 12, Custom String("Hide If On Ground", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 12, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 10)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 10));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 12, Custom String("Show If On Ground", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 12, Color(Purple));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has On Wall HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 11) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" ON WALL: {0} ", If-Then-Else(Update Every Frame(Is On Wall(Event Player)), Custom String("True", Null, Null, Null), Custom String("False", Null, Null, Null)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 11), If-Then-Else(Is On Wall(Event Player), Color(Green), Color(Red)), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 11, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Hide If On Wall", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 11)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 11));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Show If On Wall", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Violet));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has On Objective HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 14) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" ON OBJECTIVE: {0} ", If-Then-Else(Update Every Frame(Is On Objective(Event Player)), Custom String("True", Null, Null, Null), Custom String("False", Null, Null, Null)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 14), If-Then-Else(Is On Wall(Event Player), Color(Green), Color(Red)), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 14, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 3, Custom String("Hide Is On Objective", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 3, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 14)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 14));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 3, Custom String("Show Is On Objective", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 3, Color(Turquoise));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has Exact Health HUD, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 15) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String(" Exact Health: {0} ", Update Every Frame(Health(Event Player)), Null, Null), Custom String(" ", Null, Null, Null), Custom String("{0}", Custom String("                                                                                          ", Null, Null, Null), Null, Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 15), Update Every Frame(Custom Color(Multiply(Add(If-Then-Else(Compare(Multiply(100, Normalized Health(Event Player)), <, 60), 0.64, Multiply(0.64, Subtract(1, Absolute Value(Subtract(Modulo(Divide(Multiply(100, Normalized Health(Event Player)), 60), 2), 1))))), 0.16), 255), Multiply(Add(If-Then-Else(Compare(Multiply(100, Normalized Health(Event Player)), <, 60), Multiply(0.64, Subtract(1, Absolute Value(Subtract(Modulo(Divide(Multiply(100, Normalized Health(Event Player)), 60), 2), 1)))), 0.64), 0.16), 255), 40.8, 255)), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 15, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 1, Custom String("Hide Exact Health", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 1, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 15)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 15));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 1, Custom String("Show Exact Health", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 1, Custom Color(200, 50, 50, 255));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/simpleInfoReadouts.ostw] If player has Distance Crosshair, enable it")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 2) == True;
    }

    // Action count: 16
    actions
    {
        Create In-World Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String("DIST: {0}", Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(200, Facing Direction Of(Event Player))), All Players(Team(All)), Event Player, True)), Null, Null), Update Every Frame(Add(Add(Add(Multiply(True, Eye Position(Local Player)), Multiply(Empty Array, Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90))))), Multiply(-10, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Local Player)), 90)))), Multiply(300, Facing Direction Of(Local Player)))), 1, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 2, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 2, Custom String("Hide Distance To Crosshair", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 2, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 2)), 99999);
        Destroy In-World Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 2));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 2, Custom String("Show Distance To Crosshair", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 2, Color(Aqua));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/metricsReadout.ostw] Player enables/disables heals dealt display")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 3) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String("HPS Dealt: {0}", Update Every Frame(Divide(Player Variable(Event Player, healDealtInPeriod), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Null, Null), Custom String("Self: {0}", Max(0, Update Every Frame(Divide(Subtract(Player Variable(Event Player, healDealtInPeriod), Player Variable(Event Player, healDealtInPeriodNonSelf)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)))), Null, Null), Custom String("Other: {0}{1}", Update Every Frame(Divide(Player Variable(Event Player, healDealtInPeriodNonSelf), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Custom String("                                                                                          ", Null, Null, Null), Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 3), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 3, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 16, Custom String("Hide HPS Dealt", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 16, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 3)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 3));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 16, Custom String("Show HPS Dealt", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 16, Color(Yellow));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/metricsReadout.ostw] Player enables/disables heals received display")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 4) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String("HPS Received: {0}", Update Every Frame(Divide(Player Variable(Event Player, healReceivedInPeriod), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Null, Null), Custom String("Self: {0}", Max(0, Update Every Frame(Divide(Subtract(Player Variable(Event Player, healReceivedInPeriod), Player Variable(Event Player, healReceivedInPeriodNonSelf)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)))), Null, Null), Custom String("Other: {0}{1}", Update Every Frame(Divide(Player Variable(Event Player, healReceivedInPeriodNonSelf), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Custom String("                                                                                          ", Null, Null, Null), Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 4), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 4, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 21, Custom String("Hide HPS Received", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 21, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 4)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 4));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 21, Custom String("Show HPS Received", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 21, Custom Color(245, 200, 0, 255));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/metricsReadout.ostw] Player enables/disables damage dealt display")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 5) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String("DPS Dealt: {0}", Update Every Frame(Divide(Player Variable(Event Player, damageDealtInPeriod), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Null, Null), Custom String("Self: {0}", Max(0, Update Every Frame(Divide(Subtract(Player Variable(Event Player, damageDealtInPeriod), Player Variable(Event Player, damageDealtInPeriodNonSelf)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)))), Null, Null), Custom String("Other: {0}{1}", Update Every Frame(Divide(Player Variable(Event Player, damageDealtInPeriodNonSelf), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Custom String("                                                                                          ", Null, Null, Null), Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 5), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 5, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 18, Custom String("Hide DPS Dealt", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 18, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 5)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 5));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 18, Custom String("Show DPS Dealt", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 18, Color(Red));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/metricsReadout.ostw] Player enables/disables damage received display")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 6) == True;
    }

    // Action count: 16
    actions
    {
        Create HUD Text(If-Then-Else(Compare(Player Variable(Event Player, currentMenuState), ==, 0), Event Player, Null), Custom String("DPS Received: {0}", Update Every Frame(Divide(Player Variable(Event Player, damageReceivedInPeriod), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Null, Null), Custom String("Self: {0}", Max(0, Update Every Frame(Divide(Subtract(Player Variable(Event Player, damageReceivedInPeriod), Player Variable(Event Player, damageReceivedInPeriodNonSelf)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)))), Null, Null), Custom String("Other: {0}{1}", Update Every Frame(Divide(Player Variable(Event Player, damageReceivedInPeriodNonSelf), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Custom String("                                                                                          ", Null, Null, Null), Null), Left, Index Of Array Value(Player Variable(Event Player, activeInfoDisplays), 6), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Set Player Variable At Index(Event Player, infoDisplayEntities, 6, Last Text ID);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 23, Custom String("Hide DPS Received", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 23, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 6)), 99999);
        Destroy HUD Text(Value In Array(Player Variable(Event Player, infoDisplayEntities), 6));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 23, Custom String("Show DPS Received", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 23, Custom Color(218, 76, 10, 255));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[lib/healingPerSecond.ostw] Track when a player receives healing")
{

    event
    {
        Player Received Healing;
        All;
        All;
    }

    conditions
    {
        Event Healing > 0;
    }

    // Action count: 21
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 6, Total Time Elapsed);
        Modify Player Variable(Healee, healingReceivedEvents_timestamp, Append To Array, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6));
        Modify Player Variable(Healee, healingReceivedEvents_amount, Append To Array, Event Healing);
        Modify Player Variable(Healee, healingReceivedEvents_healer, Append To Array, Healer);
        Modify Player Variable(Healee, healingReceivedEvents_healee, Append To Array, Healee);
        Modify Player Variable(Healer, healingDealtEvents_timestamp, Append To Array, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6));
        Modify Player Variable(Healer, healingDealtEvents_amount, Append To Array, Event Healing);
        Modify Player Variable(Healer, healingDealtEvents_healer, Append To Array, Healer);
        Modify Player Variable(Healer, healingDealtEvents_healee, Append To Array, Healee);
        If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6), <, Add(First Of(Player Variable(Healee, healingReceivedEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))));
            Modify Player Variable(Healee, healReceivedInPeriod, Add, Event Healing);
            If(Compare(Healer, !=, Healee));
                Modify Player Variable(Healee, healReceivedInPeriodNonSelf, Add, Event Healing);
            End;
        End;
        If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6), <, Add(First Of(Player Variable(Healer, healingDealtEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))));
            Modify Player Variable(Healer, healDealtInPeriod, Add, Event Healing);
            If(Compare(Healer, !=, Healee));
                Modify Player Variable(Healer, healDealtInPeriodNonSelf, Add, Event Healing);
            End;
        End;
    }
}

rule("[lib/healingPerSecond.ostw] When the head of the healing received array has expired, remove all expired events")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Player Variable(Event Player, healingReceivedEvents_timestamp)) > 0;
        Update Every Frame(Total Time Elapsed) >= Add(Add(First Of(Player Variable(Event Player, healingReceivedEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25);
    }

    // Action count: 34
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 5, Add(First Of(Player Variable(Event Player, healingReceivedEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 2, 0);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Count Of(Player Variable(Event Player, healingReceivedEvents_timestamp)));
        "Remove expired events"
        While(And(Compare(Add(Add(Value In Array(Player Variable(Event Player, healingReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25), <, Total Time Elapsed), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), <, Count Of(Player Variable(Event Player, healingReceivedEvents_timestamp)))));
            Set Player Variable(Event Player, healReceivedInPeriod, Max(0, Subtract(Player Variable(Event Player, healReceivedInPeriod), Value In Array(Player Variable(Event Player, healingReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            If(Compare(Value In Array(Player Variable(Event Player, healingReceivedEvents_healee), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), !=, Value In Array(Player Variable(Event Player, healingReceivedEvents_healer), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2))));
                Set Player Variable(Event Player, healReceivedInPeriodNonSelf, Max(0, Subtract(Player Variable(Event Player, healReceivedInPeriodNonSelf), Value In Array(Player Variable(Event Player, healingReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 2, Add, 1);
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Subtract, 1);
        End;
        "Early termination optimization/safety clause"
        If(Compare(Count Of(Player Variable(Event Player, healingReceivedEvents_timestamp)), ==, 0));
            Set Player Variable(Event Player, healReceivedInPeriod, 0);
            Set Player Variable(Event Player, healReceivedInPeriodNonSelf, 0);
            Wait(0.016, Ignore Condition);
            Loop If Condition Is True;
            Abort;
        End;
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2));
        "Add newly valid events"
        While(And(Compare(Value In Array(Player Variable(Event Player, healingReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), <, Add(Value In Array(Player Variable(Event Player, healingReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), <, Count Of(Player Variable(Event Player, healingReceivedEvents_timestamp)))));
            "Make sure to only include NEWLY valid events"
            If(Compare(Value In Array(Player Variable(Event Player, healingReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), >=, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 5)));
                Modify Player Variable(Event Player, healReceivedInPeriod, Add, Value In Array(Player Variable(Event Player, healingReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                If(Compare(Value In Array(Player Variable(Event Player, healingReceivedEvents_healer), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), !=, Value In Array(Player Variable(Event Player, healingReceivedEvents_healee), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
                    Modify Player Variable(Event Player, healReceivedInPeriodNonSelf, Add, Value In Array(Player Variable(Event Player, healingReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                End;
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Add, 1);
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Set Player Variable(Event Player, healingReceivedEvents_timestamp, Array Slice(Player Variable(Event Player, healingReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, healingReceivedEvents_amount, Array Slice(Player Variable(Event Player, healingReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, healingReceivedEvents_healer, Array Slice(Player Variable(Event Player, healingReceivedEvents_healer), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, healingReceivedEvents_healee, Array Slice(Player Variable(Event Player, healingReceivedEvents_healee), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[lib/healingPerSecond.ostw] When the head of the healing dealt array has expired, remove all expired events")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Player Variable(Event Player, healingDealtEvents_timestamp)) > 0;
        Update Every Frame(Total Time Elapsed) >= Add(Add(First Of(Player Variable(Event Player, healingDealtEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25);
    }

    // Action count: 34
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 5, Add(First Of(Player Variable(Event Player, healingDealtEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 2, 0);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Count Of(Player Variable(Event Player, healingDealtEvents_timestamp)));
        "Remove expired events"
        While(And(Compare(Add(Add(Value In Array(Player Variable(Event Player, healingDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25), <, Total Time Elapsed), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), <, Count Of(Player Variable(Event Player, healingDealtEvents_timestamp)))));
            Set Player Variable(Event Player, healDealtInPeriod, Max(0, Subtract(Player Variable(Event Player, healDealtInPeriod), Value In Array(Player Variable(Event Player, healingDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            If(Compare(Value In Array(Player Variable(Event Player, healingDealtEvents_healee), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), !=, Value In Array(Player Variable(Event Player, healingDealtEvents_healer), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2))));
                Set Player Variable(Event Player, healDealtInPeriodNonSelf, Max(0, Subtract(Player Variable(Event Player, healDealtInPeriodNonSelf), Value In Array(Player Variable(Event Player, healingDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 2, Add, 1);
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Subtract, 1);
        End;
        "Early termination optimization/safety clause"
        If(Compare(Count Of(Player Variable(Event Player, healingDealtEvents_timestamp)), ==, 0));
            Set Player Variable(Event Player, healDealtInPeriod, 0);
            Set Player Variable(Event Player, healDealtInPeriodNonSelf, 0);
            Wait(0.016, Ignore Condition);
            Loop If Condition Is True;
            Abort;
        End;
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2));
        "Add newly valid events"
        While(And(Compare(Value In Array(Player Variable(Event Player, healingDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), <, Add(Value In Array(Player Variable(Event Player, healingDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), <, Count Of(Player Variable(Event Player, healingDealtEvents_timestamp)))));
            "Make sure to only include NEWLY valid events"
            If(Compare(Value In Array(Player Variable(Event Player, healingDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), >=, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 5)));
                Modify Player Variable(Event Player, healDealtInPeriod, Add, Value In Array(Player Variable(Event Player, healingDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                If(Compare(Value In Array(Player Variable(Event Player, healingDealtEvents_healer), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), !=, Value In Array(Player Variable(Event Player, healingDealtEvents_healee), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
                    Modify Player Variable(Event Player, healDealtInPeriodNonSelf, Add, Value In Array(Player Variable(Event Player, healingDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                End;
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Add, 1);
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Set Player Variable(Event Player, healingDealtEvents_timestamp, Array Slice(Player Variable(Event Player, healingDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, healingDealtEvents_amount, Array Slice(Player Variable(Event Player, healingDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, healingDealtEvents_healer, Array Slice(Player Variable(Event Player, healingDealtEvents_healer), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, healingDealtEvents_healee, Array Slice(Player Variable(Event Player, healingDealtEvents_healee), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[lib/damagePerSecond.ostw] Track when a player receives damage")
{

    event
    {
        Player took damage;
        All;
        All;
    }

    conditions
    {
        Event Damage > 0;
    }

    // Action count: 21
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 6, Total Time Elapsed);
        Modify Player Variable(Victim, damageReceivedEvents_timestamp, Append To Array, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6));
        Modify Player Variable(Victim, damageReceivedEvents_amount, Append To Array, Event Damage);
        Modify Player Variable(Victim, damageReceivedEvents_attacker, Append To Array, Attacker);
        Modify Player Variable(Victim, damageReceivedEvents_victim, Append To Array, Victim);
        Modify Player Variable(Attacker, damageDealtEvents_timestamp, Append To Array, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6));
        Modify Player Variable(Attacker, damageDealtEvents_amount, Append To Array, Event Damage);
        Modify Player Variable(Attacker, damageDealtEvents_attacker, Append To Array, Attacker);
        Modify Player Variable(Attacker, damageDealtEvents_victim, Append To Array, Victim);
        If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6), <, Add(First Of(Player Variable(Victim, damageReceivedEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))));
            Modify Player Variable(Victim, damageReceivedInPeriod, Add, Event Damage);
            If(Compare(Attacker, !=, Victim));
                Modify Player Variable(Victim, damageReceivedInPeriodNonSelf, Add, Event Damage);
            End;
        End;
        If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 6), <, Add(First Of(Player Variable(Attacker, damageDealtEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))));
            Modify Player Variable(Attacker, damageDealtInPeriod, Add, Event Damage);
            If(Compare(Attacker, !=, Victim));
                Modify Player Variable(Attacker, damageDealtInPeriodNonSelf, Add, Event Damage);
            End;
        End;
    }
}

rule("[lib/damagePerSecond.ostw] When the head of the damage received array has expired, remove all expired events")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Player Variable(Event Player, damageReceivedEvents_timestamp)) > 0;
        Update Every Frame(Total Time Elapsed) >= Add(Add(First Of(Player Variable(Event Player, damageReceivedEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25);
    }

    // Action count: 27
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 5, Add(First Of(Player Variable(Event Player, damageReceivedEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 2, 0);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Count Of(Player Variable(Event Player, damageReceivedEvents_timestamp)));
        "Remove expired events"
        While(And(Compare(Add(Add(Value In Array(Player Variable(Event Player, damageReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25), <, Total Time Elapsed), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), <, Count Of(Player Variable(Event Player, damageReceivedEvents_timestamp)))));
            Set Player Variable(Event Player, damageReceivedInPeriod, Max(0, Subtract(Player Variable(Event Player, damageReceivedInPeriod), Value In Array(Player Variable(Event Player, damageReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            If(Compare(Value In Array(Player Variable(Event Player, damageReceivedEvents_victim), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), !=, Value In Array(Player Variable(Event Player, damageReceivedEvents_attacker), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2))));
                Set Player Variable(Event Player, damageReceivedInPeriodNonSelf, Max(0, Subtract(Player Variable(Event Player, damageReceivedInPeriodNonSelf), Value In Array(Player Variable(Event Player, damageReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 2, Add, 1);
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Subtract, 1);
        End;
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2));
        "Add newly valid events"
        While(And(Compare(Value In Array(Player Variable(Event Player, damageReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), <, Add(Value In Array(Player Variable(Event Player, damageReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), <, Count Of(Player Variable(Event Player, damageReceivedEvents_timestamp)))));
            "Make sure to only include NEWLY valid events"
            If(Compare(Value In Array(Player Variable(Event Player, damageReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), >=, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 5)));
                Modify Player Variable(Event Player, damageReceivedInPeriod, Add, Value In Array(Player Variable(Event Player, damageReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                If(Compare(Value In Array(Player Variable(Event Player, damageReceivedEvents_attacker), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), !=, Value In Array(Player Variable(Event Player, damageReceivedEvents_victim), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
                    Modify Player Variable(Event Player, damageReceivedInPeriodNonSelf, Add, Value In Array(Player Variable(Event Player, damageReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                End;
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Add, 1);
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Set Player Variable(Event Player, damageReceivedEvents_timestamp, Array Slice(Player Variable(Event Player, damageReceivedEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, damageReceivedEvents_amount, Array Slice(Player Variable(Event Player, damageReceivedEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, damageReceivedEvents_attacker, Array Slice(Player Variable(Event Player, damageReceivedEvents_attacker), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, damageReceivedEvents_victim, Array Slice(Player Variable(Event Player, damageReceivedEvents_victim), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[lib/damagePerSecond.ostw] When the head of the damage dealt array has expired, remove all expired events")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Count Of(Player Variable(Event Player, damageDealtEvents_timestamp)) > 0;
        Update Every Frame(Total Time Elapsed) >= Add(Add(First Of(Player Variable(Event Player, damageDealtEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25);
    }

    // Action count: 27
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 5, Add(First Of(Player Variable(Event Player, damageDealtEvents_timestamp)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 2, 0);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Count Of(Player Variable(Event Player, damageDealtEvents_timestamp)));
        "Remove expired events"
        While(And(Compare(Add(Add(Value In Array(Player Variable(Event Player, damageDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1)), 0.25), <, Total Time Elapsed), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), <, Count Of(Player Variable(Event Player, damageDealtEvents_timestamp)))));
            Set Player Variable(Event Player, damageDealtInPeriod, Max(0, Subtract(Player Variable(Event Player, damageDealtInPeriod), Value In Array(Player Variable(Event Player, damageDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            If(Compare(Value In Array(Player Variable(Event Player, damageDealtEvents_victim), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), !=, Value In Array(Player Variable(Event Player, damageDealtEvents_attacker), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2))));
                Set Player Variable(Event Player, damageDealtInPeriodNonSelf, Max(0, Subtract(Player Variable(Event Player, damageDealtInPeriodNonSelf), Value In Array(Player Variable(Event Player, damageDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)))));
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 2, Add, 1);
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 3, Subtract, 1);
        End;
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2));
        "Add newly valid events"
        While(And(Compare(Value In Array(Player Variable(Event Player, damageDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), <, Add(Value In Array(Player Variable(Event Player, damageDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2)), If-Then-Else(Global Variable(OptimizeMetricsForOverTime), 0.96, 1))), Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4), <, Count Of(Player Variable(Event Player, damageDealtEvents_timestamp)))));
            "Make sure to only include NEWLY valid events"
            If(Compare(Value In Array(Player Variable(Event Player, damageDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), >=, Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 5)));
                Modify Player Variable(Event Player, damageDealtInPeriod, Add, Value In Array(Player Variable(Event Player, damageDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                If(Compare(Value In Array(Player Variable(Event Player, damageDealtEvents_attacker), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)), !=, Value In Array(Player Variable(Event Player, damageDealtEvents_victim), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4))));
                    Modify Player Variable(Event Player, damageDealtInPeriodNonSelf, Add, Value In Array(Player Variable(Event Player, damageDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 4)));
                End;
            End;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 4, Add, 1);
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Set Player Variable(Event Player, damageDealtEvents_timestamp, Array Slice(Player Variable(Event Player, damageDealtEvents_timestamp), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, damageDealtEvents_amount, Array Slice(Player Variable(Event Player, damageDealtEvents_amount), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, damageDealtEvents_attacker, Array Slice(Player Variable(Event Player, damageDealtEvents_attacker), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Set Player Variable(Event Player, damageDealtEvents_victim, Array Slice(Player Variable(Event Player, damageDealtEvents_victim), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 2), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 3)));
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[interface/information/statusEffects.ostw] Keep Status Effect button appearance up to date")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 13) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 17, Custom String("Hide Status Effects", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 17, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 13)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 17, Custom String("Show Status Effects", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 17, Color(Lime Green));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/statusEffects.ostw] Sleep")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Asleep) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 0, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Asleep)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 0, Subtract(Total Time Elapsed, First Of(Player Variable(Event Player, effectStartTimestamp))));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Ana), Button(Ability 1)), Event Player, Custom String("ASLEEP", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(First Of(Player Variable(Event Player, effectDuration)), 0.016), Round To Integer(Add(Multiply(First Of(Player Variable(Event Player, effectDuration)), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Burning")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Burning) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 1, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Burning)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 1, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 1)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Icon String(Fire), Event Player, Custom String("BURNING", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 1), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 1), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Frozen")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Frozen) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 2, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Frozen)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 2, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 2)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Mei), Button(Ultimate)), Event Player, Custom String("FROZEN", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 2), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 2), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Hacked")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Hacked) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 3, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Hacked)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 3, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 3)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Sombra), Button(Ultimate)), Event Player, Custom String("HACKED", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 3), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 3), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Invincible")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Invincible) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 4, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Invincible)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 4, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 4)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Brigitte), Button(Secondary Fire)), Event Player, Custom String("INVINCIBLE", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 4), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 4), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Knocked Down")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Knocked Down) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 5, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Knocked Down)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 5, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 5)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Icon String(Arrow: Down), Event Player, Custom String("KNOCKED DOWN", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 5), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 5), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Phased Out")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Phased Out) == True;
    }

    // Action count: 6
    actions
    {
        "This needs to be handled differently because spawn room gives phased out, as does opening menu"
        Abort If(Or(Compare(Player Variable(Event Player, currentMenuState), !=, 0), Is In Spawn Room(Event Player)));
        Set Player Variable At Index(Event Player, effectStartTimestamp, 6, Total Time Elapsed);
        Wait Until(Or(Or(Not(Has Status(Event Player, Phased Out)), Compare(Player Variable(Event Player, currentMenuState), !=, 0)), Is In Spawn Room(Event Player)), 99999);
        "If the player entered the spawn room or entered the menu, don't print a message"
        Abort If(Or(Compare(Player Variable(Event Player, currentMenuState), !=, 0), Is In Spawn Room(Event Player)));
        Set Player Variable At Index(Event Player, effectDuration, 6, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 6)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Reaper), Button(Ability 1)), Event Player, Custom String("PHASED OUT", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 6), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 6), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Rooted")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Rooted) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 7, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Rooted)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 7, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 7)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Junkrat), Button(Ability 2)), Event Player, Custom String("ROOTED", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 7), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 7), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Stunned")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Stunned) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 8, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Stunned)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 8, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 8)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Icon String(Dizzy), Event Player, Custom String("STUNNED", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 8), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 8), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/statusEffects.ostw] Unkillable")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Has Status(Event Player, Unkillable) == True;
    }

    // Action count: 4
    actions
    {
        Set Player Variable At Index(Event Player, effectStartTimestamp, 9, Total Time Elapsed);
        Wait Until(Not(Has Status(Event Player, Unkillable)), 99999);
        Set Player Variable At Index(Event Player, effectDuration, 9, Subtract(Total Time Elapsed, Value In Array(Player Variable(Event Player, effectStartTimestamp), 9)));
        Small Message(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Baptiste), Button(Ability 2)), Event Player, Custom String("UNKILLABLE", Null, Null, Null)), Custom String(" for {0} secs ({1} ticks)", Add(Value In Array(Player Variable(Event Player, effectDuration), 9), 0.016), Round To Integer(Add(Multiply(Value In Array(Player Variable(Event Player, effectDuration), 9), 62.5), 1), To Nearest), Null), Null));
    }
}

rule("[interface/information/damageNumbers.ostw] Update Information Menu button appearance for damage/heal numbers")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Array Contains(Player Variable(Event Player, activeInfoDisplays), 16) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 22, Custom String("Hide Damage/Heal Numbers", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 22, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
        Wait Until(Not(Array Contains(Player Variable(Event Player, activeInfoDisplays), 16)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 22, Custom String("Show Damage/Heal Numbers", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 3, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 3));
        Set Global Variable At Index(_arrayConstructor, 22, Color(Blue));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 3, Global Variable(_arrayConstructor));
    }
}

rule("[interface/information/damageNumbers.ostw] When player takes damage, create the text if necessary and update values")
{

    event
    {
        Player took damage;
        All;
        All;
    }

    conditions
    {
        Event Damage > 0;
    }

    // Action count: 16
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 10, Event Damage);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 11, Position Of(Event Player));
        "If we don't have any active cumulative damage number, reset and create it"
        If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 7), ==, -1));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 9, Event Damage);
            Create In-World Text(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 16)), Custom String("-{0}{1}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 9), If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), !=, -1), Custom String("    ", Null, Null, Null), Custom String("", Null, Null, Null)), Null), Add(Update Every Frame(Position Of(Event Player)), Vector(0, 2.5, 0)), 4, Do Not Clip, Visible To Position and String, Custom Color(200, 50, 50, 255), Default Visibility);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 7, Last Text ID);
            Create In-World Text(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 16)), Custom String("-{0}{1}", Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 10), If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), !=, -1), Custom String("    ", Null, Null, Null), Custom String("", Null, Null, Null)), Null), Add(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 11), Vector(0, 2, 0)), 1.5, Do Not Clip, Visible To Position and String, Custom Color(200, 50, 50, 255), Default Visibility);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 8, Last Text ID);
        Else;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 9, Add, Event Damage);
        End;
        Wait(3, Restart When True);
        Destroy In-World Text(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 7));
        Destroy In-World Text(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 8));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 7, -1);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 8, -1);
    }
}

rule("[interface/information/damageNumbers.ostw] When player received healing, create the text if necessary and update values")
{

    event
    {
        Player Received Healing;
        All;
        All;
    }

    conditions
    {
        Event Healing > 0;
    }

    // Action count: 16
    actions
    {
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 15, Event Healing);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 16, Position Of(Event Player));
        "If we don't have any active damage number, reset and create it"
        If(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12), ==, -1));
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 14, Event Healing);
            Create In-World Text(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 16)), Custom String("{0}+{1}", If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 7), !=, -1), Custom String("    ", Null, Null, Null), Custom String("", Null, Null, Null)), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 14), Null), Add(Update Every Frame(Position Of(Event Player)), Vector(0, 2.5, 0)), 4, Do Not Clip, Visible To Position and String, Color(Yellow), Default Visibility);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 12, Last Text ID);
            Create In-World Text(Filtered Array(All Players(Team(All)), Array Contains(Player Variable(Current Array Element, activeInfoDisplays), 16)), Custom String("{0}+{1}", If-Then-Else(Compare(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 7), !=, -1), Custom String("    ", Null, Null, Null), Custom String("", Null, Null, Null)), Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 15), Null), Add(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 16), Vector(0, 2, 0)), 1.5, Do Not Clip, Visible To Position and String, Color(Yellow), Default Visibility);
            Set Player Variable At Index(Event Player, _extendedPlayerCollection, 13, Last Text ID);
        Else;
            Modify Player Variable At Index(Event Player, _extendedPlayerCollection, 14, Add, Event Healing);
        End;
        Wait(3, Restart When True);
        Destroy In-World Text(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 12));
        Destroy In-World Text(Value In Array(Player Variable(Event Player, _extendedPlayerCollection), 13));
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 12, -1);
        Set Player Variable At Index(Event Player, _extendedPlayerCollection, 13, -1);
    }
}

rule("[interface/modifications/modsMenu.ostw] Update faster abilities button appearance")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 6, Custom String("Faster Abilities [ON]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 6, Color(Blue));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 1)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 6, Custom String("Faster Abilities [OFF]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 6, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle reduced damage taken")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 2) == True;
    }

    // Action count: 15
    actions
    {
        Set Damage Received(Event Player, 10);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Reduced Damage Taken [ON]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 11, Color(Orange));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 2)), 99999);
        Set Damage Received(Event Player, 100);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 11, Custom String("Reduced Damage Taken [OFF]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 11, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle increased damage dealt")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 3) == True;
    }

    // Action count: 15
    actions
    {
        Set Damage Dealt(Event Player, 300);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 8, Custom String("Increased Damage Dealt [ON]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 8, Color(Rose));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 3)), 99999);
        Set Damage Dealt(Event Player, 100);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 8, Custom String("Increased Damage Dealt [OFF]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 8, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle auto-regen health")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 4) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 16, Custom String("Auto-Regen Health [ON]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 16, Color(Red));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 4)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 16, Custom String("Auto-Regen Health [OFF]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 16, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] When player takes damage, and they avoid damage for 5 seconds, fill health")
{

    event
    {
        Player took damage;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 4) == True;
    }

    // Action count: 2
    actions
    {
        Wait(Workshop Setting Integer(Custom String("Modifications", Null, Null, Null), Custom String("Auto-Regen Delay", Null, Null, Null), 5, 1, 20, 0), Restart When True);
        Set Player Health(Event Player, Max Health(Event Player));
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle faster respawn button appearance")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 5) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Faster Respawn [ON]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Aqua));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 5)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 13, Custom String("Faster Respawn [OFF]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 13, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] Make respawn happen faster if enabled")
{

    event
    {
        Player died;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 5) == True;
    }

    // Action count: 3
    actions
    {
        Wait Until(Is Alive(Event Player), 3);
        Abort If(Is Alive(Event Player));
        Respawn(Event Player);
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle disable mode completion button appearance")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 6) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(All Players(Team(All)), ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 18, Custom String("Disable Mode Completion [ON]", Null, Null, Null));
        Set Player Variable At Index(All Players(Team(All)), ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(All Players(Team(All)), ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 18, Color(Sky Blue));
        Set Player Variable At Index(All Players(Team(All)), ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 6)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(All Players(Team(All)), ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 18, Custom String("Disable Mode Completion [OFF]", Null, Null, Null));
        Set Player Variable At Index(All Players(Team(All)), ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(All Players(Team(All)), ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 18, Color(Gray));
        Set Player Variable At Index(All Players(Team(All)), ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle disable mode completion")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 6) == True;
    }

    // Action count: 3
    actions
    {
        Disable Built-In Game Mode Completion;
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 6)), 99999);
        Enable Built-In Game Mode Completion;
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle slow motion button appearanace")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 7) == True;
    }

    // Action count: 13
    actions
    {
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 12, Custom String("Slow Motion [ON]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 12, Color(Violet));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 7)), 99999);
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 12, Custom String("Slow Motion [OFF]", Null, Null, Null));
        Set Player Variable At Index(Event Player, ButtonLabelGrid, 4, Global Variable(_arrayConstructor));
        Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonColorGrid), 4));
        Set Global Variable At Index(_arrayConstructor, 12, Color(Gray));
        Set Player Variable At Index(Event Player, ButtonColorGrid, 4, Global Variable(_arrayConstructor));
    }
}

rule("[interface/modifications/modsMenu.ostw] Handle slow motion")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 7) == True;
    }

    // Action count: 3
    actions
    {
        Set Slow Motion(30);
        Wait Until(Not(Value In Array(Global Variable(activeModifications), 7)), 99999);
        Set Slow Motion(100);
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Ultimate")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ultimate Charge Percent(Event Player) < 100;
    }

    // Action count: 3
    actions
    {
        Set Ultimate Charge(Event Player, 100);
        Wait(0.5, Abort When False);
        Loop;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Primary fire cooldown")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ability Cooldown(Event Player, Button(Primary Fire)) > 0;
    }

    // Action count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Primary Fire), 1);
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Primary fire: Refill Moira Biotic Energy")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player)) == Hero(Moira);
        Ability Resource(Event Player, Button(Primary Fire)) < 95;
    }

    // Action count: 3
    actions
    {
        "Don't fill all the way because that makes the meter disappear"
        Set Ability Resource(Event Player, Button(Primary Fire), 95);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Secondary fire cooldown")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ability Cooldown(Event Player, Button(Secondary Fire)) > 0;
    }

    // Action count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 1);
    }
}

rule("[interface/modifications/fasterCooldown.ostw] Secondary fire: Refill D.Va defense matrix")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player)) == Hero(D.va);
        Ability Resource(Event Player, Button(Secondary Fire)) < 100;
    }

    // Action count: 3
    actions
    {
        Set Ability Resource(Event Player, Button(Secondary Fire), 100);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Ability 1 cooldown")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ability Cooldown(Event Player, Button(Ability 1)) > 0;
    }

    // Action count: 4
    actions
    {
        If(Array Contains(Array(Hero(Roadhog), Hero(Ashe)), If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player))));
            Wait Until(Not(Is Using Ability 1(Event Player)), Ability Cooldown(Event Player, Button(Ability 1)));
        End;
        Set Ability Cooldown(Event Player, Button(Ability 1), 1);
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Zarya/Junkrat - 2 Ability 1 charges")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Array Contains(Array(Hero(Zarya), Hero(Junkrat)), If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player))) == True;
        Ability Charge(Event Player, Button(Ability 1)) < 2;
    }

    // Action count: 3
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 1), Add(Ability Charge(Event Player, Button(Ability 1)), 1));
        Loop If Condition Is True;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Symmetra/Tracer - 3 Ability 1 charges")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Array Contains(Array(Hero(Tracer), Hero(Symmetra)), If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player))) == True;
        Ability Charge(Event Player, Button(Ability 1)) < 3;
    }

    // Action count: 3
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 1), Add(Ability Charge(Event Player, Button(Ability 1)), 1));
        Loop If Condition Is True;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Ability 2 cooldown")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ability Cooldown(Event Player, Button(Ability 2)) > 0;
    }

    // Action count: 4
    actions
    {
        If(Array Contains(Array(Hero(D.va)), If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player))));
            Wait Until(Not(Is Using Ability 2(Event Player)), Ability Cooldown(Event Player, Button(Ability 2)));
        End;
        Set Ability Cooldown(Event Player, Button(Ability 2), 1);
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Reinhardt - 2 Ability 2 charges")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player)) == Hero(Reinhardt);
        Ability Charge(Event Player, Button(Ability 2)) < 2;
    }

    // Action count: 3
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 2), Add(Ability Charge(Event Player, Button(Ability 2)), 1));
        Loop If Condition Is True;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Brigitte - 3 Ability 2 charges")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player)) == Hero(Brigitte);
        Ability Charge(Event Player, Button(Ability 2)) < 3;
    }

    // Action count: 3
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 2), Add(Ability Charge(Event Player, Button(Ability 2)), 1));
        Loop If Condition Is True;
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Doomfist - charge block instantly")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        If-Then-Else(Is Duplicating(Event Player), Hero Being Duplicated(Event Player), Hero Of(Event Player)) == Hero(Doomfist);
        Is Using Ability 2(Event Player) == True;
        Ability Resource(Event Player, Button(Ability 2)) < 100;
    }

    // Action count: 1
    actions
    {
        Set Ability Resource(Event Player, Button(Ability 2), 100);
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Crouch cooldown")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ability Cooldown(Event Player, Button(Crouch)) > 0;
    }

    // Action count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Crouch), 1);
    }
}

rule("[interface/modifications/fasterAbilities.ostw] Jump cooldown")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Value In Array(Global Variable(activeModifications), 1) == True;
        Ability Cooldown(Event Player, Button(Jump)) > 0;
    }

    // Action count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Jump), 1);
    }
}

rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Start/stop editing bots")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, selectedBotsReplayAction) == 1;
    }

    // Action count: 12
    actions
    {
        Set Player Variable(Event Player, isEditing, Not(Player Variable(Event Player, isEditing)));
        If(Player Variable(Event Player, isEditing));
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 6));
            Set Global Variable At Index(_arrayConstructor, 12, Custom String("Stop Editing Bots", Null, Null, Null));
            Set Player Variable At Index(Event Player, ButtonLabelGrid, 6, Global Variable(_arrayConstructor));
        Else;
            Set Global Variable(_arrayConstructor, Value In Array(Player Variable(Event Player, ButtonLabelGrid), 6));
            Set Global Variable At Index(_arrayConstructor, 12, Custom String("Edit Dummy Bots", Null, Null, Null));
            Set Player Variable At Index(Event Player, ButtonLabelGrid, 6, Global Variable(_arrayConstructor));
        End;
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, currentMenuState, 0);
    }
}

rule("Set up bot heroes here (duplicates may bug bot creation)")
{

    event
    {
        Ongoing - Global;
    }

    // Action count: 12
    actions
    {
        Set Global Variable(botHeroes, Empty Array);
        Modify Global Variable(botHeroes, Append To Array, Hero(Ana));
        Modify Global Variable(botHeroes, Append To Array, Hero(Ashe));
        Modify Global Variable(botHeroes, Append To Array, Hero(Baptiste));
        Modify Global Variable(botHeroes, Append To Array, Hero(Echo));
        Modify Global Variable(botHeroes, Append To Array, Hero(Genji));
        Modify Global Variable(botHeroes, Append To Array, Hero(Hanzo));
        Modify Global Variable(botHeroes, Append To Array, Hero(Junkrat));
        Modify Global Variable(botHeroes, Append To Array, Hero(Mercy));
        Modify Global Variable(botHeroes, Append To Array, Hero(Soldier: 76));
        Modify Global Variable(botHeroes, Append To Array, Hero(Zenyatta));
        Modify Global Variable(botHeroes, Append To Array, Hero(Moira));
    }
}

rule("Player setup")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Dummy Bot(Event Player) == False;
    }

    // Action count: 5
    actions
    {
        Set Player Variable(Event Player, placementDistance, 12);
        "show position bots are created and held at"
        Create Effect(If-Then-Else(Player Variable(Event Player, isEditing), Event Player, Empty Array), Sphere, Color(Green), Update Every Frame(Ray Cast Hit Position(Player Variable(Event Player, noclipPosition), Add(Player Variable(Event Player, noclipPosition), Multiply(Facing Direction Of(Event Player), Player Variable(Event Player, placementDistance))), All Players(Team(All)), Event Player, True)), 0.1, Visible To Position and Radius);
        "show binds to pick up and remove a bot when aiming at them"
        Create In-World Text(If-Then-Else(And(And(And(Player Variable(Event Player, isEditing), Compare(Player Variable(Event Player, grabbedBot), ==, Null)), Not(Is Button Held(Event Player, Button(Ability 1)))), Compare(First Of(Sorted Array(Filtered Array(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element))))), !=, Null)), Event Player, Empty Array), Custom String("{0} PICK UP\n[{1}] CHANGE HERO\n     [{2}] REMOVE", Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Ultimate))), First Of(Sorted Array(Filtered Array(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element))))), 1, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        "show keybind to stop holding a bot"
        Create In-World Text(If-Then-Else(And(And(Player Variable(Event Player, isEditing), Compare(Player Variable(Event Player, grabbedBot), !=, Null)), Not(Is Button Held(Event Player, Button(Ability 1)))), Event Player, Empty Array), Custom String("{0} DROP", Input Binding String(Button(Primary Fire)), Null, Null), Player Variable(Event Player, grabbedBot), 1, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        "show how to create a bot if none exist yet"
        Create HUD Text(If-Then-Else(And(Player Variable(Event Player, isEditing), Not(Number Of Players(Opposite Team Of(Team Of(Event Player))))), Event Player, Empty Array), Null, Null, Custom String("\n\n\n\n\n\n\n\n\n\n\n\n{0} CREATE BOT", Input Binding String(Button(Primary Fire)), Null, Null), Top, 10, Null, Null, Color(White), Visible To And String, Default Visibility);
    }
}

rule("Enable edit mode")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
    }

    // Action count: 20
    actions
    {
        Set Player Variable(Event Player, hasEdited, True);
        "start noclipping from current position"
        Set Player Variable(Event Player, noclipPosition, Eye Position(Event Player));
        "store the player's hero so they can go back to it when they change a bot's hero"
        Set Player Variable(Event Player, originalHero, Hero Of(Event Player));
        "disable controls"
        Set Ability 1 Enabled(Event Player, False);
        Set Ability 2 Enabled(Event Player, False);
        Set Primary Fire Enabled(Event Player, False);
        Set Secondary Fire Enabled(Event Player, False);
        Set Ultimate Ability Enabled(Event Player, False);
        Set Melee Enabled(Event Player, False);
        Set Jump Enabled(Event Player, False);
        Set Crouch Enabled(Event Player, False);
        "for some reason disabling crouch still lets wrecking ball use piledriver"
        Modify Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Crouch)), Add, 1);
        Disallow Button(Event Player, Button(Crouch));
        "don't physically move"
        Set Move Speed(Event Player, 0);
        "don't fall"
        Set Gravity(Event Player, 0);
        "resurrect and heal any bots that are dead so they can be edited"
        Resurrect(All Players(Team(All)));
        "make a camera from the noclip position and copy the player's facing direction"
        Start Camera(Event Player, Player Variable(Event Player, noclipPosition), Add(Player Variable(Event Player, noclipPosition), Facing Direction Of(Event Player)), 128);
        "take into account throttle, facing direction, jump, and crouch inputs to make a decent noclip"
        Chase Player Variable At Rate(Event Player, noclipPosition, Add(Player Variable(Event Player, noclipPosition), Multiply(Add(Add(Multiply(Facing Direction Of(Event Player), Z Component Of(Throttle Of(Event Player))), World Vector Of(Multiply(Throttle Of(Event Player), Left), Event Player, Rotation)), Multiply(Up, Subtract(Is Button Held(Event Player, Button(Jump)), Is Button Held(Event Player, Button(Crouch))))), 100)), 12, Destination And Rate);
        "wait for a bit so the player doesn't see where they are teleported to"
        Wait(0.032, Ignore Condition);
        Teleport(Event Player, Vector(0, 10000, 0));
    }
}

rule("Disable edit mode")
{

    event
    {
        Ongoing - Each Player;
        Team1;
        All;
    }

    conditions
    {
        Is Dummy Bot(Event Player) == False;
        Player Variable(Event Player, isEditing) == False;
    }

    // Action count: 21
    actions
    {
        "save some server load"
        Stop Chasing Player Variable(Event Player, noclipPosition);
        "subtract player's height from noclipPosition so that the camera is teleported to where the noclip camera was"
        Teleport(Event Player, Subtract(Player Variable(Event Player, noclipPosition), Subtract(Eye Position(Event Player), Position Of(Event Player))));
        "return values to normal"
        Set Gravity(Event Player, 100);
        Set Move Speed(Event Player, 100);
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Set Ultimate Ability Enabled(Event Player, True);
        Set Melee Enabled(Event Player, True);
        Set Jump Enabled(Event Player, True);
        Set Crouch Enabled(Event Player, True);
        Set Player Variable At Index(Event Player, buttonLocks, Index Of Array Value(Global Variable(AllButtons), Button(Crouch)), Max(0, Subtract(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Crouch))), 1)));
        If(Compare(Value In Array(Player Variable(Event Player, buttonLocks), Index Of Array Value(Global Variable(AllButtons), Button(Crouch))), ==, 0));
            Allow Button(Event Player, Button(Crouch));
        End;
        Stop Camera(Event Player);
        "cancel momentum"
        Apply Impulse(Event Player, Multiply(Velocity Of(Event Player), -1), Speed Of(Event Player), To World, Incorporate Contrary Motion);
        "if player was moving a bot"
        If(Compare(Player Variable(Event Player, grabbedBot), !=, Null));
            "stop grabbing bot"
            Set Player Variable(Event Player, grabbedBot, Null);
        End;
    }
}

rule("Create bot or drop if currently holding one")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
        Player Variable(Event Player, currentMenuState) == 0;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Action count: 13
    actions
    {
        "already have a bot grabbed"
        If(Compare(Player Variable(Event Player, grabbedBot), !=, Null));
            Set Facing(Player Variable(Event Player, grabbedBot), Multiply(Direction Towards(Position Of(Player Variable(Event Player, grabbedBot)), Player Variable(Event Player, noclipPosition)), Vector(1, Empty Array, 1)), To World);
            "stop grabbing bot"
            Set Player Variable(Event Player, grabbedBot, Null);
            Else If(Compare(Number Of Players(Team(Team2)), <, Count Of(Global Variable(botHeroes))));
            "set the temp variable to be the same as all available bot heroes"
            Set Global Variable(heroQueue, Global Variable(botHeroes));
            "foreach enemy"
            For Global Variable(i, 0, Number Of Players(Opposite Team Of(Team Of(Event Player))), 1);
                Modify Global Variable(heroQueue, Remove From Array By Index, Index Of Array Value(Global Variable(heroQueue), Hero Of(Value In Array(All Players(Opposite Team Of(Team Of(Event Player))), Global Variable(i)))));
            End;
            "create the first bot in the queue"
            Create Dummy Bot(First Of(Global Variable(heroQueue)), Team(Team2), -1, Ray Cast Hit Position(Player Variable(Event Player, noclipPosition), Add(Player Variable(Event Player, noclipPosition), Multiply(Facing Direction Of(Event Player), Player Variable(Event Player, placementDistance))), All Players(Team(All)), Event Player, True), Null);
            "grab the newly created bot"
            Set Player Variable(Event Player, grabbedBot, Last Created Entity);
        Else;
            Small Message(Event Player, Custom String("NO MORE BOTS LEFT TO CREATE", Null, Null, Null));
        End;
    }
}

rule("Set high gravity if near floor")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Altitude Of(Event Player) < 0.05;
        Is True For Any(All Players(Opposite Team Of(Team Of(Event Player))), Compare(Player Variable(Current Array Element, grabbedBot), ==, Event Player)) == False;
    }

    // Action count: 1
    actions
    {
        "this makes the playermodel properly stand on the ground"
        Set Gravity(Event Player, 10000);
    }
}

rule("Set low gravity if not near floor")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Altitude Of(Event Player) >= 0.05;
        Is True For Any(All Players(Opposite Team Of(Team Of(Event Player))), Compare(Player Variable(Current Array Element, grabbedBot), ==, Event Player)) == False;
    }

    // Action count: 1
    actions
    {
        Set Gravity(Event Player, 0);
    }
}

rule("Detect grab")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
        Player Variable(Event Player, currentMenuState) == 0;
        Is Button Held(Event Player, Button(Ability 1)) == False;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Player Variable(Event Player, grabbedBot) == Null;
    }

    // Action count: 5
    actions
    {
        If(Is True For Any(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)));
            Set Player Variable(Event Player, grabbedBot, First Of(Sorted Array(Filtered Array(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element))))));
        Else;
            Small Message(Event Player, Custom String("NO BOT IN LOS", Null, Null, Null));
        End;
    }
}

rule("Grab")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
        Player Variable(Event Player, grabbedBot) != Null;
    }

    // Action count: 2
    actions
    {
        Set Gravity(Player Variable(Event Player, grabbedBot), 10000);
        "force the bot to where the player is aiming"
        Start Forcing Player Position(Player Variable(Event Player, grabbedBot), Ray Cast Hit Position(Player Variable(Event Player, noclipPosition), Add(Player Variable(Event Player, noclipPosition), Multiply(Facing Direction Of(Event Player), Player Variable(Event Player, placementDistance))), Empty Array, Empty Array, True), True);
    }
}

rule("Delete bot")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
        Player Variable(Event Player, currentMenuState) == 0;
        Is Button Held(Event Player, Button(Ability 1)) == False;
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Player Variable(Event Player, grabbedBot) == Null;
    }

    // Action count: 7
    actions
    {
        If(Is True For Any(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)));
            Set Player Variable(Event Player, targetedDummy, First Of(Sorted Array(Filtered Array(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element))))));
            "show the player which bot they removed"
            Small Message(Event Player, Custom String("REMOVED {0}", Hero Icon String(Hero Of(Player Variable(Event Player, targetedDummy))), Null, Null));
            "destroy the bot"
            Destroy Dummy Bot(Team(Team2), Slot Of(Player Variable(Event Player, targetedDummy)));
        Else;
            Small Message(Event Player, Custom String("NO BOT IN LOS", Null, Null, Null));
        End;
    }
}

rule("Delete all bots")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
        Player Variable(Event Player, currentMenuState) == 0;
        Number Of Players(Team(Team2)) > 0;
        Is Button Held(Event Player, Button(Ability 1)) == True;
        Is Button Held(Event Player, Button(Ultimate)) == True;
    }

    // Action count: 4
    actions
    {
        For Global Variable(i, 0, Number Of Players(Team(Team2)), 1);
            Destroy Dummy Bot(Team(Team2), Value In Array(Mapped Array(All Players(Team(Team2)), Slot Of(Current Array Element)), Global Variable(i)));
        End;
        Small Message(Event Player, Custom String("REMOVED ALL BOTS", Null, Null, Null));
    }
}

rule("Change bot hero")
{

    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    conditions
    {
        Player Variable(Event Player, isEditing) == True;
        Player Variable(Event Player, currentMenuState) == 0;
        Is Button Held(Event Player, Button(Ability 1)) == False;
        Is Button Held(Event Player, Button(Ability 2)) == True;
        Player Variable(Event Player, grabbedBot) == Null;
        Player Variable(Event Player, isChangingBot) == False;
    }

    // Action count: 20
    actions
    {
        "any bot is in LoS"
        If(Is True For Any(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)));
            "set a flag to disable some other rules which interfere otherwise"
            Set Player Variable(Event Player, isChangingBot, True);
            "for some reason the game thinks the player should be moving when they're not spawned in"
            Stop Chasing Player Variable(Event Player, noclipPosition);
            "target the bot closest to the reticle in LoS"
            Set Player Variable(Event Player, targetedDummy, First Of(Sorted Array(Filtered Array(All Players(Team(Team2)), Is In Line Of Sight(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element), Barriers Do Not Block LOS)), Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Player Variable(Event Player, noclipPosition), Eye Position(Current Array Element))))));
            "store the facing direction for a seamless transition back"
            Set Player Variable(Event Player, prevFacings, Array(Facing Direction Of(Event Player), Facing Direction Of(Player Variable(Event Player, targetedDummy))));
            "force player into hero select"
            Set Player Allowed Heroes(Event Player, If-Then-Else(Compare(Hero Of(Player Variable(Event Player, targetedDummy)), !=, Hero Of(Event Player)), Hero Of(Player Variable(Event Player, targetedDummy)), Random Value In Array(Remove From Array(All Heroes, Hero Of(Event Player)))));
            "get kicked out of hero select immediately if this is too short"
            Wait(0.25, Ignore Condition);
            "re-allow all heroes"
            Set Player Allowed Heroes(Event Player, Append To Array(All Heroes, Hero Of(Player Variable(Event Player, targetedDummy))));
            Wait Until(Has Spawned(Event Player), 99999);
            "update botHeroes to contain the newly chosen hero"
            Set Global Variable At Index(botHeroes, Slot Of(Player Variable(Event Player, targetedDummy)), Hero Of(Event Player));
            "create a new dummy to replace the old one so that they run bot setup again"
            Create Dummy Bot(Hero Of(Event Player), Team(Team2), Slot Of(Player Variable(Event Player, targetedDummy)), Position Of(Player Variable(Event Player, targetedDummy)), Null);
            Set Facing(Last Created Entity, Last Of(Player Variable(Event Player, prevFacings)), To World);
            "force back onto hero the player entered edit mode as"
            Start Forcing Player To Be Hero(Event Player, Player Variable(Event Player, originalHero));
            "must stop forcing to let the player get kicked back to hero select in the future"
            Stop Forcing Player To Be Hero(Event Player);
            "set facing to the direction they were facing when triggering rule"
            Set Facing(Event Player, First Of(Player Variable(Event Player, prevFacings)), To World);
            "clear flag"
            Set Player Variable(Event Player, isChangingBot, False);
            "take into account throttle, facing direction, jump, and crouch inputs to make a decent noclip  # start running noclip movement logic again"
            Chase Player Variable At Rate(Event Player, noclipPosition, Add(Player Variable(Event Player, noclipPosition), Multiply(Add(Add(Multiply(Facing Direction Of(Event Player), Z Component Of(Throttle Of(Event Player))), World Vector Of(Multiply(Throttle Of(Event Player), Left), Event Player, Rotation)), Multiply(Up, Subtract(Is Button Held(Event Player, Button(Jump)), Is Button Held(Event Player, Button(Crouch))))), 100)), 12, Destination And Rate);
        Else;
            Small Message(Event Player, Custom String("NO BOT IN LOS", Null, Null, Null));
        End;
    }
}

rule("All bots dead - global")
{

    event
    {
        Ongoing - Global;
    }

    conditions
    {
        Number Of Players(Team(Team2)) > 0;
        Number Of Living Players(Team(Team2)) == 0;
    }

    // Action count: 2
    actions
    {
        Wait(0.5, Ignore Condition);
        Resurrect(All Players(Team(Team2)));
    }
}

rule("Stop bots floating")
{

    event
    {
        Ongoing - Each Player;
        Team2;
        All;
    }

    conditions
    {
        Speed Of(Event Player) > 0.01;
        Is In Air(Event Player) == True;
        Is True For Any(All Players(Team(Team1)), Compare(Player Variable(Current Array Element, grabbedBot), ==, Event Player)) == False;
    }

    // Action count: 8
    actions
    {
        "stop all momentum (works better than what is used to cancel momentum upon exiting noclip)"
        Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Backward, 0.001, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Forward, 0.001, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Right, 0.001, To World, Cancel Contrary Motion);
        Apply Impulse(Event Player, Left, 0.001, To World, Cancel Contrary Motion);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("Stop forcing bot position")
{

    event
    {
        Ongoing - Each Player;
        Team2;
        All;
    }

    conditions
    {
        Is True For Any(All Players(Team(Team1)), Compare(Player Variable(Current Array Element, grabbedBot), ==, Event Player)) == False;
    }

    // Action count: 3
    actions
    {
        Start Forcing Player Position(Event Player, Position Of(Event Player), False);
        Wait(0.032, Ignore Condition);
        Stop Forcing Player Position(Event Player);
    }
}
