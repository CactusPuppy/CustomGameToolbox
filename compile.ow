settings
{
    main
    {
        Mode Name: "CactusPuppy's Toolbox"
        Description: "CactusPuppy's Toolbox | v1.0.0
A set of tools that make custom games more useful for recreating, testing, and recording Overwatch scenarios."
    }
    modes
    {
        General
        {
            Hero Limit: 1 Per Team
            Game Mode Start: Immediately
            Tank Role Passive Health Bonus: Disabled
        }
        Escort
        {
            Limit Roles: 1 Tank 2 Offense 2 Support
            Competitive Rules: On
        }
        Hybrid
        {
            Limit Roles: 1 Tank 2 Offense 2 Support
            Competitive Rules: On
        }
        Clash
        {
            Limit Roles: 1 Tank 2 Offense 2 Support
            Competitive Rules: On
        }
        Control
        {
            Limit Roles: 1 Tank 2 Offense 2 Support
            Competitive Rules: On
        }
        Flashpoint
        {
            Limit Roles: 1 Tank 2 Offense 2 Support
            Competitive Rules: On
        }
        Push
        {
            Limit Roles: 1 Tank 2 Offense 2 Support
            Competitive Rules: On
        }
    }
    lobby
    {
        Match Voice Chat: Enabled
    }
}
variables
{
    global:
        0: _objectVariable_0
        1: _objectVariable_1
        2: _objectVariable_2
        3: _objectVariable_3
        4: i
        5: UseRoleQueueHealth
        6: ButtonActionGrid
        7: _extendedGlobalCollection
        8: AllButtons
        9: isTimePaused
        10: isGameInProgress
        11: isInSetup
        12: OptimizeMetricsForOverTime
        13: activeModifications
        14: punchingBagTargetHealthProportio
        15: nextSelectionEntityId
        16: uniqueHeroSkinCombosRemaining
        17: rainbowVector
        18: allBotsReplayDuringRecording
        19: longestRecordingLength
        20: SHOULD_LOOP_CLIP
        21: colIndex
        22: rowIndex
        23: player
        24: button
        25: _arrayConstructor
        26: SourcePlayer
        27: TargetPlayer
    player:
        0: menuActivationPoint
        1: ButtonLabelGrid
        2: ButtonColorGrid
        3: currentMenuState
        4: menuXIndex
        5: menuYIndex
        6: hideMenuOpenTooltip
        7: _extendedPlayerCollection
        8: buttonLocks
        9: toolsActionID
        10: position1
        11: isMovingPosition1
        12: position2
        13: isMovingPosition2
        14: playerRulerState
        15: rulerEffects
        16: thirdPersonState
        17: thirdPersonDirection
        18: thirdPersonZoom
        19: thirdPersonHeight
        20: isNoClipActive
        21: activeInfoDisplays
        22: infoDisplayEntities
        23: healingReceivedEvents
        24: healReceivedInPeriod
        25: healReceivedInPeriodNonSelf
        26: healingDealtEvents
        27: healDealtInPeriod
        28: healDealtInPeriodNonSelf
        29: damageReceivedEvents
        30: damageReceivedInPeriod
        31: damageReceivedInPeriodNonSelf
        32: damageDealtEvents
        33: damageDealtInPeriod
        34: damageDealtInPeriodNonSelf
        35: effectStartTimestamp
        36: effectEndTimestamp
        37: effectDuration
        38: selectedBotsReplayAction
        39: selectedControl
        40: selectionSetDistance
        41: selectedBot
        42: selectedBots
        43: replayResetPoint
        44: positionControl
        45: facingControl
        46: botControlMode
        47: isPunchingBag
        48: selectedBotEditAction
        49: pinnedPosition
        50: tempHeroStorage
        51: recordingPlayStopFlag
        52: buttonControlStates
        53: recordingHero
        54: originalHero
        55: replayState
        56: recordingLength
        57: frame
        58: sampleCount
        59: botReadyToReplay
        60: sampleValue
        61: currentInputValues
        62: currentEventIndices
        63: currentEventFrames
        64: primaryFireEvents
        65: secondaryFireEvents
        66: ability1Events
        67: ability2Events
        68: ultimateEvents
        69: jumpEvents
        70: crouchEvents
        71: meleeEvents
        72: reloadEvents
        73: throttleEvents
        74: facingEvents
        75: weaponEvents
        76: waitingOnPlayer
        77: cacheMenuYIndex
}

// Extended collection variables:
// global [0]: LOG_LEVEL
// player [0]: rowOffset
// player [1]: colOffset
// player [2]: respawnPoint
// player [3]: structArraysStartIndex
// player [4]: structArraysCount
// player [5]: sweepNewlyValidEventsIndex
// player [6]: oldTimeAcceptanceThreshold
// player [7]: eventTimestamp
// player [8]: cumulativeDamageDisplayTextID
// player [9]: lastDamageDisplayTextID
// player [10]: cumulativeDamage
// player [11]: lastDamageInstanceAmount
// player [12]: lastDamageInstancePosition
// player [13]: cumulativeHealingDisplayTextID
// player [14]: lastHealingDisplayTextID
// player [15]: cumulativeHealing
// player [16]: lastHealInstanceAmount
// player [17]: lastHealInstancePosition
// player [18]: botRespawnPoint_FX_Loc
// player [19]: botRespawnPoint_FX_Fac
// player [20]: wasPunchingBag
// player [21]: tempPinnedPosition
// player [22]: tempRespawnPoint
// player [23]: tempResetPoint
// player [24]: tempTeamStorage
// player [25]: tempPositionStorage
// player [26]: tempFacingStorage

subroutines
{
    0: UpdatePlayerButtonStatus
    1: HandleConfirmEndGameClick
    2: findLeft
    3: zeroOffsets
    4: applyOffsets
    5: findRight
    6: findUp
    7: findDown
    8: TransferRecording
    9: PreparePlayerForRecording
    10: ReturnToPreRecordState
    11: StartRecording
    12: DeleteRecording
    13: UpdateLongestRecordingLength
    14: StopClip
    15: PlayClip
    16: Recorder_StopRecording
    17: StopRecording
    18: UpdateSampleCount
    19: RecordFrame
    20: RecordFramePrimaryFire
    21: RecordFrameSecondaryFire
    22: RecordFrameAbility1
    23: RecordFrameAbility2
    24: RecordFrameUltimate
    25: RecordFrameJump
    26: RecordFrameCrouch
    27: RecordFrameMelee
    28: RecordFrameReload
    29: RecordFrameThrottle
    30: RecordFrameFacing
    31: RecordFrameWeapon
    32: PlayFrame
    33: PlayFramePrimaryFire
    34: PlayFrameSecondaryFire
    35: PlayFrameAbility1
    36: Rein_Ability1Handling
    37: PlayFrameAbility2
    38: PlayFrameUltimate
    39: PlayFrameMelee
    40: PlayFrameReload
    41: PlayFrameJump
    42: PlayFrameCrouch
    43: PlayFrameThrottle
    44: PlayFrameFacing
    45: PlayFrameWeapon
    46: LoopClip
}

// Rule Element Count: 2
rule("[main.ostw] Disable Inspector Recording")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Disable Inspector Recording;
    }
}

// Rule Element Count: 328
rule("[interface/menu.ostw] Set up action grid")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 327, Action Count: 9
    // Largest Action Index: 1 using 53 Elements
    actions
    {
        Global.ButtonActionGrid = Empty Array;
        Global.ButtonActionGrid[1] = Array(0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0);
        Global.ButtonActionGrid[2] = Array(True, True);
        Global.ButtonActionGrid[5] = Array(0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 7, 10, 8, 0, 0, 6, 4, 5, 0, 0, 0, 9, 0, 0);
        Global.ButtonActionGrid[3] = Array(0, 15, 2, 14, 0, 0, 7, 17, 1, 0, 0, 9, 10, 11, 0, 0, 3, 13, 5, 0, 0, 4, 16, 6, 0);
        Global.ButtonActionGrid[4] = Array(0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 2, 7, 5, 0, 0, 4, 8, 6, 0, 0, 0, 0, 0, 0);
        Global.ButtonActionGrid[6] = Array(0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 6, 3, 7, 0, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0);
        Global.ButtonActionGrid[7] = Array(0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 8, 7, 0, 2, 1, 0, 0, 6, 0, 0, 0, 0, 3, 0, 0);
        Global.ButtonActionGrid[8] = 42;
    }
}

// Rule Element Count: 320
rule("[interface/menu.ostw] Set up button label grid")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 319, Action Count: 7
    // Largest Action Index: 1 using 53 Elements
    actions
    {
        Event Player.ButtonLabelGrid = Empty Array;
        Event Player.ButtonLabelGrid[1] = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Information"), Custom String(""), Custom String("Modifications"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Tools"), Custom String(""), Custom String("Dummy Bots"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""));
        Event Player.ButtonLabelGrid[5] = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Set Respawn Point"), Custom String("Change Hero"), Custom String("Enable NoClip"), Custom String(""), Custom String(""), Custom String("Place Ruler"), Custom String("Back to Hero Select"), Custom String("Enable 3rd Person"), Custom String(""), Custom String(""), Custom String("Unpause Match Time"), Custom String("Skip Setup"), Custom String("End Match"), Custom String(""), Custom String(""), Custom String(""), Custom String("Unlock All Buttons"), Custom String(""), Custom String(""));
        Event Player.ButtonLabelGrid[3] = Array(Custom String(""), Custom String("Show Exact Health"), Custom String("Show Distance To Crosshair"), Custom String("Show Is On Objective"), Custom String(""), Custom String(""), Custom String("Show Position/Facing"), Custom String("Show Throttle"), Custom String("Show Move Speed"), Custom String(""), Custom String(""), Custom String("Show Altitude"), Custom String("Show If On Ground"), Custom String("Show If On Wall"), Custom String(""), Custom String(""), Custom String("Show HPS Dealt"), Custom String("Show Status Effects"), Custom String("Show DPS Dealt"), Custom String(""), Custom String(""), Custom String("Show HPS Received"), Custom String("Show Damage/Heal Numbers"), Custom String("Show DPS Received"), Custom String(""));
        Event Player.ButtonLabelGrid[4] = Array(Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Faster Abilities [OFF]"), Custom String(""), Custom String("Increased Damage Dealt [OFF]"), Custom String(""), Custom String(""), Custom String("Reduced Damage Taken [OFF]"), Custom String("Slow Motion [OFF]"), Custom String("Faster Respawn [OFF]"), Custom String(""), Custom String(""), Custom String("Auto-Regen Health [OFF]"), Custom String("Self-Heal Passive [ON]"), Custom String("Disable Mode Completion [OFF]"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String(""));
        Event Player.ButtonLabelGrid[6] = Array(Custom String(""), Custom String(""), Custom String("Create Dummy Bot"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Create Punching Bag"), Custom String(""), Custom String(""), Custom String(""), Custom String("Play All Replays"), Custom String("Edit Dummy Bots"), Custom String("Delete All Replays"), Custom String(""), Custom String(""), Custom String(""), Custom String("Reset Bot Positions"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Remove All Bots"), Custom String(""), Custom String(""));
        Event Player.ButtonLabelGrid[7] = Array(Custom String(""), Custom String(""), Custom String("Buttons"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Set Respawn Point"), Custom String(""), Custom String(""), Custom String("Delete Replay"), Custom String("Record Replay"), Custom String(""), Custom String("Change Hero"), Custom String("Switch Team"), Custom String(""), Custom String(""), Custom String("Pin Bot To Position"), Custom String(""), Custom String(""), Custom String(""), Custom String(""), Custom String("Delete"), Custom String(""), Custom String(""));
    }
}

// Rule Element Count: 412
rule("[interface/menu.ostw] Set up color grid")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 411, Action Count: 7
    // Largest Action Index: 2 using 186 Elements
    actions
    {
        Event Player.ButtonColorGrid = Empty Array;
        Event Player.ButtonColorGrid[1] = Array(Null, Null, Null, Null, Null, Null, Custom Color(200, 50, 50, 255), Null, Color(Green), Null, Null, Null, Null, Null, Null, Null, Color(Sky Blue), Null, Color(Yellow), Null, Null, Null, Null, Null, Null);
        Event Player.ButtonColorGrid[5] = Array(Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(80, 187, 217, 255), Color(Blue), Color(Green), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Color(Yellow), Color(Turquoise), Color(Orange), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(50, 220, 27, 255), Color(Aqua), Custom Color(200, 50, 50, 255), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0), Custom Color(97, 97, 97, 255), Custom Color(0, 0, 0, 0), Custom Color(0, 0, 0, 0));
        Event Player.ButtonColorGrid[3] = Array(Null, Custom Color(200, 50, 50, 255), Color(Aqua), Color(Turquoise), Null, Null, Color(Green), Color(Rose), Color(Orange), Null, Null, Color(Sky Blue), Color(Purple), Color(Violet), Null, Null, Color(Yellow), Color(Lime Green), Color(Red), Null, Null, Custom Color(245, 200, 0, 255), Color(Blue), Custom Color(218, 76, 10, 255), Null);
        Event Player.ButtonColorGrid[4] = Array(Null, Null, Null, Null, Null, Null, Color(Gray), Null, Color(Gray), Null, Null, Color(Gray), Color(Gray), Color(Gray), Null, Null, Color(Gray), Color(Yellow), Color(Gray), Null, Null, Null, Null, Null, Null);
        Event Player.ButtonColorGrid[6] = Array(Null, Null, Color(Green), Null, Null, Null, Null, Color(Sky Blue), Null, Null, Null, Color(Lime Green), Color(Yellow), Custom Color(229, 100, 100, 255), Null, Null, Null, Color(Purple), Null, Null, Null, Null, Color(Red), Null, Null);
        Event Player.ButtonColorGrid[7] = Array(Null, Null, Color(Gray), Null, Null, Null, Null, Color(Yellow), Null, Null, Color(Red), Custom Color(186, 70, 213, 255), Null, Color(Green), Color(Blue), Null, Null, Color(Orange), Null, Null, Null, Null, Color(Red), Null, Null);
    }
}

// Rule Element Count: 102
rule("[interface/menu.ostw] When menu state changes, find new first selection")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.currentMenuState != 0;
    }

    // Element Count: 94, Action Count: 17
    // Largest Action Index: 1 using 22 Elements
    actions
    {
        Wait(0.064, Abort When False);
        If(Global.ButtonActionGrid[Event Player.currentMenuState] != 0 && !Array Contains(Array(2, 8), Event Player.currentMenuState));
            Event Player.menuXIndex = 0;
            Event Player.menuYIndex = 0;
            While(Event Player.menuYIndex < 6);
                While(Event Player.menuXIndex < 5);
                    If(Global.ButtonActionGrid[Event Player.currentMenuState][Event Player.menuYIndex * 5 + Event Player.menuXIndex] != 0);
                        Skip(6);
                    End;
                    Event Player.menuXIndex = Event Player.menuXIndex + 1;
                End;
                Event Player.menuYIndex = Event Player.menuYIndex + 1;
                Event Player.menuXIndex = 0;
            End;
        End;
        Wait Until(Event Player.currentMenuState != Evaluate Once(Event Player.currentMenuState), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 93
rule("Initial Global")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 92, Action Count: 11
    // Largest Action Index: 2 using 22 Elements
    actions
    {
        Global.UseRoleQueueHealth = Workshop Setting Toggle(Custom String("2. Hero Settings"), Custom String("Use Role Queue Tank Health"), True, 0);
        Global._extendedGlobalCollection[0] = Workshop Setting Combo(Custom String("1. Settings"), Custom String("Log Level"), 0, Array(Custom String("Debug"), Custom String("Info"), Custom String("Warning"), Custom String("Error")), 0);
        Global.AllButtons = Array(Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Crouch), Button(Jump), Button(Melee), Button(Reload), Button(Ultimate), Button(Interact));
        Global.OptimizeMetricsForOverTime = Workshop Setting Toggle(Custom String("5. Information"), Custom String("Optimize DPS/HPS Meters for Over Time Effects"), False, 0);
        Global.punchingBagTargetHealthProportio = Workshop Setting Real(Custom String("1. Settings"), Custom String("Punching Bag Target Health Proportion"), 0.8, 0, 1, 0.01);
        Global.nextSelectionEntityId = 1;
        Global.uniqueHeroSkinCombosRemaining = 12;
        Global.rainbowVector = Left - Left;
        Global.allBotsReplayDuringRecording = Workshop Setting Toggle(Custom String("6. Replay Settings"), Custom String("All Bots Replay During Recording"), True, 0);
        Global.longestRecordingLength = 0;
        Global.SHOULD_LOOP_CLIP = Workshop Setting Toggle(Custom String("6. Replay Settings"), Custom String("Loop Replay Playback"), True, 0);
    }
}

// Rule Element Count: 40
rule("Initial Player")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 39, Action Count: 19
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Event Player.currentMenuState = 0;
        Event Player.hideMenuOpenTooltip = Workshop Setting Toggle(Custom String("3. Menu Settings"), Custom String("Hide Before-First-Use Menu Open/Close Tooltip"), True, 0);
        Event Player.buttonLocks = Empty Array;
        Event Player.thirdPersonDirection = 1;
        Event Player.thirdPersonZoom = -2.5;
        Event Player.thirdPersonHeight = 0;
        Event Player.activeInfoDisplays = Empty Array;
        Event Player.infoDisplayEntities = Empty Array;
        Event Player.healingReceivedEvents = Empty Array;
        Event Player.healingDealtEvents = Empty Array;
        Event Player.damageReceivedEvents = Empty Array;
        Event Player.damageDealtEvents = Empty Array;
        Event Player._extendedPlayerCollection[8] = -1;
        Event Player._extendedPlayerCollection[9] = -1;
        Event Player._extendedPlayerCollection[13] = -1;
        Event Player._extendedPlayerCollection[14] = -1;
        Event Player.selectedBots = Empty Array;
        Event Player.buttonControlStates = Empty Array;
        Event Player.sampleCount = 0;
    }
}

// Rule Element Count: 37
rule("[main.ostw] Skip assembling heroes")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 4, Condition Count: 1
    conditions
    {
        Is Assembling Heroes == True;
    }

    // Element Count: 32, Action Count: 10
    // Largest Action Index: 0 using 11 Elements
    actions
    {
        If(Is True For All(All Players(All Teams), Current Array Element.toolsActionID != 10));
            Set Match Time(Workshop Setting Integer(Custom String("1. Settings"), Custom String("Assembling Heroes Length"), 5, 0, 30, 0));
        End;
        If(Global.isTimePaused);
            Unpause Match Time;
            Global.isTimePaused = False;
            Wait Until(!Is Assembling Heroes, 9999);
            Pause Match Time;
            Global.isTimePaused = True;
        End;
    }
}

// Rule Element Count: 19
rule("[main.ostw] pause match time on start of round")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Workshop Setting Toggle(Custom String("1. Settings"), Custom String("Automatically Pause Match Time At Round Start"), True, 0) == True;
        !Is Assembling Heroes == True;
    }

    // Element Count: 2, Action Count: 2
    // Largest Action Index: 0 using 1 Elements
    actions
    {
        Pause Match Time;
        Global.isTimePaused = True;
    }
}

// Rule Element Count: 19
rule("[main.ostw] Go back to lobby early, skipping victory poses and POTG")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Workshop Setting Toggle(Custom String("1. Settings"), Custom String("Skip Post-Match Flow"), True, 0) == True;
        Is Match Complete == True;
    }

    // Element Count: 3, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Wait(3, Ignore Condition);
        Return To Lobby;
    }
}

// Rule Element Count: 9
rule("[main.ostw] Avoid getting people stuck in menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 4, Condition Count: 1
    conditions
    {
        Is Between Rounds == True;
    }

    // Element Count: 4, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 28
rule("[main.ostw] Skip setup")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Workshop Setting Toggle(Custom String("1. Settings"), Custom String("Automatically Skip Setup"), True, 0) == True;
        Is In Setup == True;
    }

    // Element Count: 12, Action Count: 8
    // Largest Action Index: 4 using 3 Elements
    actions
    {
        Set Match Time(0);
        If(Global.isTimePaused);
            Unpause Match Time;
            Global.isTimePaused = False;
            Wait Until(!Is In Setup, 9999);
            Pause Match Time;
            Global.isTimePaused = True;
        End;
    }
}

// Rule Element Count: 19
rule("[main.ostw] self-damage on melee")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Workshop Setting Toggle(Custom String("1. Settings"), Custom String("Self-Damage On Melee"), False, 0) == True;
        Is Meleeing(Event Player) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Damage(Event Player, Null, 75);
    }
}

// Rule Element Count: 48
rule("Create tank health pool")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 24, Condition Count: 3
    conditions
    {
        Global.UseRoleQueueHealth == True;
        Array Contains(All Tank Heroes, Hero Of(Event Player)) == True;
        (Hero Of(Event Player) == Hero(D.Va) && Is In Alternate Form(Event Player)) == False;
    }

    // Element Count: 23, Action Count: 3
    // Largest Action Index: 1 using 20 Elements
    actions
    {
        Add Health Pool To Player(Event Player, Health, 150, True, True);
        Wait Until(!Global.UseRoleQueueHealth || !Array Contains(All Tank Heroes, Hero Of(Event Player)) || Hero Of(Event Player) == Hero(D.Va) && Is In Alternate Form(Event Player), 1000000);
        Remove Health Pool From Player(Last Created Health Pool);
    }
}

// Rule Element Count: 800
rule("[interface/menu.ostw] Global menu setup")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 799, Action Count: 21
    // Largest Action Index: 7 using 179 Elements
    actions
    {
        "Create prompt to open mneu"
        Create HUD Text(Array Contains(All Players(All Teams), Local Player) && (!Local Player.hideMenuOpenTooltip || Local Player.currentMenuState != 0) ? Local Player : Null, Null, Null, Custom String("Hold [{0}] to {1} menu", Input Binding String(Button(Interact)), Local Player.currentMenuState == 0 ? Custom String("open") : Custom String("close")), Top, 1, Color(White), Color(White), Local Player.currentMenuState == 0 ? Color(Green) : Color(Red), Visible To String and Color, Visible Never);
        "Create controls hints"
        Create In-World Text(Local Player.currentMenuState != 0 ? Local Player : Null, Custom String("{0} SELECT  |  {2} {1}", Input Binding String(Button(Primary Fire)), Local Player.currentMenuState == 1 ? Custom String("CLOSE") : Custom String("BACK"), Input Binding String(Button(Secondary Fire))), Update Every Frame(True * Eye Position(Local Player) + Empty Array * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + -168 * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 2, Do Not Clip, Visible To Position and String, Color(White), Visible Never);
        "Additional helper text"
        Create In-World Text(Array Contains(Array(1, 8), Local Player.currentMenuState) ? Local Player : Null, Array(Custom String("Use WASD to Navigate"), Custom String("{0}{1}{2}", Custom String("Press/Hold "), Input Binding String(Button(Reload)), Custom String(" for Manual Control")))[Index Of Array Value(Array(1, 8), Local Player.currentMenuState)], Update Every Frame(True * Eye Position(Local Player) + Empty Array * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + -145 * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 2, Do Not Clip, Visible To Position and String, Color(White), Visible Never);
        "Create grid menu items"
        Global.colIndex = 0;
        While(Global.colIndex < 5);
            Global.rowIndex = 0;
            While(Global.rowIndex < 6);
                Create In-World Text(Array Contains(Array(0, 2, 8), Local Player.currentMenuState) ? Null : Local Player, Local Player.ButtonLabelGrid[Local Player.currentMenuState][Evaluate Once(Global.rowIndex) * 5 + Evaluate Once(Global.colIndex)], Update Every Frame(True * Eye Position(Local Player) + 100 * (-3 + 1.5 * Evaluate Once(Global.colIndex)) * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + 100 * (1.2 - 0.45 * Evaluate Once(Global.rowIndex) - 0.2) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 2, Do Not Clip, Visible To Position String and Color, Local Player.menuXIndex == Evaluate Once(Global.colIndex) && Local Player.menuYIndex == Evaluate Once(Global.rowIndex) && Global.ButtonActionGrid[Local Player.currentMenuState][Local Player.menuYIndex * 5 + Local Player.menuXIndex] ? Custom Color(255, 255, 255, 155 + 100 * Sine From Degrees(Total Time Elapsed * 720 % 360)) : Local Player.ButtonColorGrid[Local Player.currentMenuState][Evaluate Once(Global.rowIndex) * 5 + Evaluate Once(Global.colIndex)], Visible Never);
                Global.rowIndex += 1;
            End;
            Global.colIndex += 1;
        End;
        "Create confirm and abort buttons"
        Create In-World Text(Local Player.currentMenuState == 2 ? Local Player : Null, Custom String("Are you sure you want to end the game?"), Update Every Frame(True * Eye Position(Local Player) + Empty Array * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + 80 * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 3, Do Not Clip, Visible To And Position, Color(Rose), Visible Never);
        "Create bespoke end match confirm screen"
        Create In-World Text(Local Player.currentMenuState == 2 ? Local Player : Null, Custom String("[YES]"), Update Every Frame(True * Eye Position(Local Player) + -70 * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + -90 * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 3, Do Not Clip, Visible To Position String and Color, Local Player.menuXIndex == 0 && Local Player.menuYIndex == 0 ? Custom Color(255, 255, 255, 155 + 100 * Sine From Degrees(Total Time Elapsed * 720 % 360)) : Color(Red), Visible Never);
        Create In-World Text(Local Player.currentMenuState == 2 ? Local Player : Null, Custom String("[NO]"), Update Every Frame(True * Eye Position(Local Player) + 70 * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + -90 * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 3, Do Not Clip, Visible To Position String and Color, Local Player.menuXIndex == 1 && Local Player.menuYIndex == 0 ? Custom Color(255, 255, 255, 155 + 100 * Sine From Degrees(Total Time Elapsed * 720 % 360)) : Color(Lime Green), Visible Never);
        "Create dummy bot editing screen"
        Global.i = 0;
        While(Global.i < Count Of(Global.AllButtons));
            Create In-World Text(Local Player.currentMenuState == 8 ? Local Player : Null, Custom String("{0}: {1}", Global.AllButtons[Evaluate Once(Global.i)], Local Player.selectedBot.buttonControlStates[Evaluate Once(Global.i)]), Update Every Frame(True * Eye Position(Local Player) + 75 * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + 100 * (1 + Evaluate Once(Global.i) * -0.17 - 0.2) * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 1.25, Do Not Clip, Visible To Position String and Color, Local Player.menuXIndex == 0 && Local Player.menuYIndex == Evaluate Once(Global.i) ? Custom Color(255, 255, 255, 155 + 100 * Sine From Degrees(Total Time Elapsed * 720 % 360)) : Color(Gray), Visible Never);
            Global.i += 1;
        End;
        "Create background orbie"
        Create Effect(Local Player.currentMenuState != 0 ? Local Player : Null, Orb, Color(Black), Local Player.menuActivationPoint[1] - 0.325 * Local Player.menuActivationPoint[2], 0.25, Visible To Position and Radius);
    }
}

// Rule Element Count: 15
rule("[interface/menu.ostw] Initialize player (one-time activation)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Action Count: 5
    // Largest Action Index: 3 using 5 Elements
    actions
    {
        If(Event Player.hideMenuOpenTooltip);
            Wait Until(Has Spawned(Event Player), 1000000);
            Wait(1, Ignore Condition);
            Small Message(Event Player, Custom String("   Hold {0} to open menu", Input Binding String(Button(Interact))));
        End;
    }
}

// Rule Element Count: 16
rule("[interface/menu.ostw] When player first opens menu, hide tooltip when menu is closed")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        !Event Player.hideMenuOpenTooltip == True;
        Event Player.currentMenuState != 0;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Event Player.hideMenuOpenTooltip = True;
    }
}

// Rule Element Count: 37
rule("[lib/player/buttonControl.del] update player button status")
{
    event
    {
        Subroutine;
        UpdatePlayerButtonStatus;
    }

    // Element Count: 36, Action Count: 7
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        For Global Variable(button, 0, Count Of(Global.AllButtons), 1);
            If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Global.AllButtons[Global.button])] == 0);
                Allow Button(Global.player, Global.AllButtons[Global.button]);
            Else;
                Disallow Button(Global.player, Global.AllButtons[Global.button]);
            End;
        End;
    }
}

// Rule Element Count: 112
rule("[interface/menu.ostw] Initialize player and perform cleanup")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.currentMenuState != 0;
    }

    // Element Count: 104, Action Count: 35
    // Largest Action Index: 14 using 19 Elements
    actions
    {
        "Note that we store it for reevaluation, because changing heroes causes a respawn which overwrites non-reeval force pos and facing"
        Event Player.menuActivationPoint = Array(Position Of(Event Player), Eye Position(Event Player), Facing Direction Of(Event Player));
        Set Aim Speed(Event Player, 0);
        Start Facing(Event Player, Event Player.menuActivationPoint[2], 1000, To World, None);
        Start Forcing Player Position(Event Player, First Of(Event Player.menuActivationPoint), False);
        Set Gravity(Event Player, 0);
        Event Player.buttonLocks = Mapped Array(Event Player.buttonLocks, Current Array Element + 1);
        Global.player = Event Player;
        Call Subroutine(UpdatePlayerButtonStatus);
        Set Invisible(Event Player, All);
        Set Status(Event Player, Null, Phased Out, 1000000);
        Disable Kill Feed(Event Player);
        Disable Game Mode In-World UI(Event Player);
        Disable Game Mode HUD(Event Player);
        Disable Hero HUD(Event Player);
        Start Camera(Event Player, Event Player.menuActivationPoint[1], Event Player.menuActivationPoint[1] + Event Player.menuActivationPoint[2], 100);
        Event Player.menuXIndex = 0;
        Event Player.menuYIndex = 0;
        Wait Until(Event Player.currentMenuState == 0, 9999);
        Stop Camera(Event Player);
        Enable Kill Feed(Event Player);
        Enable Game Mode In-World UI(Event Player);
        Enable Game Mode HUD(Event Player);
        Enable Hero HUD(Event Player);
        Stop Facing(Event Player);
        Stop Forcing Player Position(Event Player);
        If(!Event Player.isNoClipActive);
            Set Gravity(Event Player, 100);
        End;
        Set Aim Speed(Event Player, 100);
        "Give a leniency period for buttons to be let go of"
        Wait(0.25, Restart When True);
        Event Player.buttonLocks = Mapped Array(Event Player.buttonLocks, Max(0, Current Array Element - 1));
        Global.player = Event Player;
        Call Subroutine(UpdatePlayerButtonStatus);
        Set Invisible(Event Player, None);
        Clear Status(Event Player, Phased Out);
    }
}

// Rule Element Count: 35
rule("[interface/menu.ostw] When player holds Interact long enough, toggle menu")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 17, Condition Count: 3
    conditions
    {
        Is Dummy Bot(Event Player) == False;
        Is Alive(Event Player) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
    }

    // Element Count: 17, Action Count: 7
    // Largest Action Index: 1 using 7 Elements
    actions
    {
        Wait(0.5, Abort When False);
        If(Event Player.currentMenuState == 0);
            Event Player.currentMenuState = 1;
        Else;
            "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
            Wait(0.016, Ignore Condition);
            Event Player.currentMenuState = 0;
        End;
    }
}

// Rule Element Count: 46
rule("Handle confirm/cancel for ending game")
{
    event
    {
        Subroutine;
        HandleConfirmEndGameClick;
    }

    // Element Count: 45, Action Count: 12
    // Largest Action Index: 0 using 15 Elements
    actions
    {
        If(Event Player.menuXIndex == 1 && Event Player.menuYIndex == 0);
            Event Player.currentMenuState = 5;
        Else If(Event Player.menuXIndex == 0 && Event Player.menuYIndex == 0);
            Declare Match Draw;
            Wait(0.25, Ignore Condition);
            If(Is Match Complete);
                "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
                Wait(0.016, Ignore Condition);
                Event Player.currentMenuState = 0;
                Skip(3);
            End;
            Small Message(Event Player, Custom String("Can't seem to end the game right now. Try again in a bit!"));
        End;
    }
}

// Rule Element Count: 447
rule("[interface/menu.ostw] Primary fire to select current item")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Element Count: 439, Action Count: 49
    // Largest Action Index: 2 using 37 Elements
    actions
    {
        Abort If(Event Player.currentMenuState == 0);
        Abort If(Global.ButtonActionGrid[Event Player.currentMenuState] != 42 && Global.ButtonActionGrid[Event Player.currentMenuState][Event Player.menuYIndex * 5 + Event Player.menuXIndex] == 0);
        Skip(Array(46, 0, 2, 4, 9, 23, 26, 31, 36)[Index Of Array Value(Array(1, 2, 5, 3, 4, 6, 7, 8), Event Player.currentMenuState) + 1]);
        Event Player.currentMenuState = Global.ButtonActionGrid[1][Event Player.menuYIndex * 5 + Event Player.menuXIndex];
        Skip(44);
        Call Subroutine(HandleConfirmEndGameClick);
        Skip(42);
        Abort If(Global.ButtonActionGrid[5][Event Player.menuYIndex * 5 + Event Player.menuXIndex] == 0);
        Event Player.toolsActionID = Global.ButtonActionGrid[5][Event Player.menuYIndex * 5 + Event Player.menuXIndex];
        Wait(0.016, Ignore Condition);
        Event Player.toolsActionID = Null;
        Skip(37);
        Abort If(Global.ButtonActionGrid[3][Event Player.menuYIndex * 5 + Event Player.menuXIndex] == 0);
        If(Count Of(Event Player.activeInfoDisplays) >= 5);
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 200);
            Small Message(Event Player, Custom String("{0} Too many active readouts (max {1}).", Icon String(Warning), 5));
            Wait(0.15, Ignore Condition);
            Small Message(Event Player, Custom String("{0} Remove some readouts and try again", Icon String(Warning)));
            Skip(6);
        End;
        If(Array Contains(Event Player.activeInfoDisplays, Global.ButtonActionGrid[3][Event Player.menuYIndex * 5 + Event Player.menuXIndex]));
            Modify Player Variable(Event Player, activeInfoDisplays, Remove From Array By Value, Global.ButtonActionGrid[3][Event Player.menuYIndex * 5 + Event Player.menuXIndex]);
        Else;
            Modify Player Variable(Event Player, activeInfoDisplays, Append To Array, Global.ButtonActionGrid[3][Event Player.menuYIndex * 5 + Event Player.menuXIndex]);
        End;
        Skip(23);
        Abort If(Global.ButtonActionGrid[4][Event Player.menuYIndex * 5 + Event Player.menuXIndex] == 0);
        Global.activeModifications[Global.ButtonActionGrid[4][Event Player.menuYIndex * 5 + Event Player.menuXIndex]] = !Global.activeModifications[Global.ButtonActionGrid[4][Event Player.menuYIndex * 5 + Event Player.menuXIndex]];
        Skip(20);
        Abort If(Global.ButtonActionGrid[6][Event Player.menuYIndex * 5 + Event Player.menuXIndex] == 0);
        Event Player.selectedBotsReplayAction = Global.ButtonActionGrid[6][Event Player.menuYIndex * 5 + Event Player.menuXIndex];
        Wait(0.016, Ignore Condition);
        Event Player.selectedBotsReplayAction = 0;
        Skip(15);
        Abort If(Global.ButtonActionGrid[7][Event Player.menuYIndex * 5 + Event Player.menuXIndex] == 0);
        Event Player.selectedBotEditAction = Global.ButtonActionGrid[7][Event Player.menuYIndex * 5 + Event Player.menuXIndex];
        Wait(0.016, Ignore Condition);
        Event Player.selectedBotEditAction = 0;
        Skip(10);
        If(Count Of(Event Player.selectedBot.buttonControlStates) < Event Player.menuYIndex + 1);
            Event Player.selectedBot.buttonControlStates[Event Player.menuYIndex] = Custom String("None");
        End;
        If(Event Player.selectedBot.buttonControlStates[Event Player.menuYIndex] == Custom String("None"));
            Event Player.selectedBot.buttonControlStates[Event Player.menuYIndex] = Custom String("Holding");
        Else If(Event Player.selectedBot.buttonControlStates[Event Player.menuYIndex] == Custom String("Holding"));
            Event Player.selectedBot.buttonControlStates[Event Player.menuYIndex] = Custom String("Spamming");
        Else;
            Event Player.selectedBot.buttonControlStates[Event Player.menuYIndex] = Custom String("None");
        End;
    }
}

// Rule Element Count: 82
rule("[interface/menu.ostw] Secondary fire to go back")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }

    // Element Count: 74, Action Count: 24
    // Largest Action Index: 6 using 14 Elements
    actions
    {
        Abort If(Event Player.currentMenuState == 0);
        If(Event Player.currentMenuState == 1);
            "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
            Wait(0.016, Ignore Condition);
            Event Player.currentMenuState = 0;
            Abort;
        End;
        If(Array Contains(Array(3, 4, 5, 6), Event Player.currentMenuState));
            Event Player.currentMenuState = 1;
            Abort;
        End;
        If(Event Player.currentMenuState == 2);
            Event Player.currentMenuState = 5;
            Abort;
        End;
        If(Event Player.currentMenuState == 8);
            Event Player.currentMenuState = 7;
            Abort;
        End;
        If(Event Player.currentMenuState == 7);
            "We need to clear the selected control so that the instructions are shown again"
            Event Player.selectedControl = Null;
            "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
            Wait(0.016, Ignore Condition);
            Event Player.currentMenuState = 0;
            Abort;
        End;
    }
}

// Rule Element Count: 7
rule("[interface/menuDefinitions.ostw | SUB] Zero row and column offsets")
{
    event
    {
        Subroutine;
        zeroOffsets;
    }

    // Element Count: 6, Action Count: 2
    // Largest Action Index: 0 using 3 Elements
    actions
    {
        Event Player._extendedPlayerCollection[0] = 0;
        Event Player._extendedPlayerCollection[1] = 0;
    }
}

// Rule Element Count: 37
rule("[interface/menuDefinitions.ostw | SUB] Apply current offsets")
{
    event
    {
        Subroutine;
        applyOffsets;
    }

    // Element Count: 36, Action Count: 2
    // Largest Action Index: 0 using 19 Elements
    actions
    {
        Event Player.menuXIndex = ((Event Player.menuXIndex + Event Player._extendedPlayerCollection[1]) % 5 + 5) % 5;
        Event Player.menuYIndex = ((Event Player.menuYIndex + First Of(Event Player._extendedPlayerCollection)) % 6 + 6) % 6;
    }
}

// Rule Element Count: 95
rule("[interface/menuDefinitions.ostw | SUB] Find first item to the left")
{
    event
    {
        Subroutine;
        findLeft;
    }

    // Element Count: 94, Action Count: 15
    // Largest Action Index: 4 using 42 Elements
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Absolute Value(First Of(Event Player._extendedPlayerCollection)) < 3);
            Event Player._extendedPlayerCollection[1] = -1;
            While(Absolute Value(Event Player._extendedPlayerCollection[1]) < 5);
                "If item here, shift menu selection to the new item"
                If(Global.ButtonActionGrid[Event Player.currentMenuState][(Event Player.menuYIndex + First Of(Event Player._extendedPlayerCollection)) * 5 + ((Event Player.menuXIndex + Event Player._extendedPlayerCollection[1]) % 5 + 5) % 5] != 0);
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Event Player._extendedPlayerCollection[1] -= 1;
            End;
            If(First Of(Event Player._extendedPlayerCollection) >= 0);
                Event Player._extendedPlayerCollection[0] += 1;
            End;
            Event Player._extendedPlayerCollection[0] = First Of(Event Player._extendedPlayerCollection) * -1;
        End;
    }
}

// Rule Element Count: 94
rule("[interface/menuDefinitions.ostw | SUB] Find first item to the right")
{
    event
    {
        Subroutine;
        findRight;
    }

    // Element Count: 93, Action Count: 15
    // Largest Action Index: 4 using 42 Elements
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Absolute Value(First Of(Event Player._extendedPlayerCollection)) < 3);
            Event Player._extendedPlayerCollection[1] = 1;
            While(Event Player._extendedPlayerCollection[1] < 5);
                "If item here, shift menu selection to the new item"
                If(Global.ButtonActionGrid[Event Player.currentMenuState][(Event Player.menuYIndex + First Of(Event Player._extendedPlayerCollection)) * 5 + ((Event Player.menuXIndex + Event Player._extendedPlayerCollection[1]) % 5 + 5) % 5] != 0);
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Event Player._extendedPlayerCollection[1] += 1;
            End;
            If(First Of(Event Player._extendedPlayerCollection) >= 0);
                Event Player._extendedPlayerCollection[0] += 1;
            End;
            Event Player._extendedPlayerCollection[0] = First Of(Event Player._extendedPlayerCollection) * -1;
        End;
    }
}

// Rule Element Count: 36
rule("[interface/menu.ostw] Menu left-right")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Event Player.currentMenuState != 0;
        Absolute Value(X Component Of(Throttle Of(Event Player))) > 0.5;
    }

    // Element Count: 20, Action Count: 8
    // Largest Action Index: 0 using 7 Elements
    actions
    {
        If(Event Player.currentMenuState == 8);
            "The left-right function does nothing in this menu page"
            Abort;
        End;
        If(X Component Of(Throttle Of(Event Player)) > 0);
            Call Subroutine(findLeft);
        Else;
            Call Subroutine(findRight);
        End;
    }
}

// Rule Element Count: 99
rule("[interface/menuDefinitions.ostw | SUB] Find first item upwards")
{
    event
    {
        Subroutine;
        findUp;
    }

    // Element Count: 98, Action Count: 15
    // Largest Action Index: 4 using 42 Elements
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Absolute Value(Event Player._extendedPlayerCollection[1]) < 2.5);
            Event Player._extendedPlayerCollection[0] = -1;
            While(Absolute Value(First Of(Event Player._extendedPlayerCollection)) < 6);
                "If item here, shift menu selection to the new item"
                If(Global.ButtonActionGrid[Event Player.currentMenuState][((Event Player.menuYIndex + First Of(Event Player._extendedPlayerCollection)) % 6 + 6) % 6 * 5 + Event Player.menuXIndex + Event Player._extendedPlayerCollection[1]] != 0);
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Event Player._extendedPlayerCollection[0] -= 1;
            End;
            If(Event Player._extendedPlayerCollection[1] >= 0);
                Event Player._extendedPlayerCollection[1] += 1;
            End;
            Event Player._extendedPlayerCollection[1] = Event Player._extendedPlayerCollection[1] * -1;
        End;
    }
}

// Rule Element Count: 98
rule("interface/menuDefinitions.ostw | [SUB] Find first item downwards")
{
    event
    {
        Subroutine;
        findDown;
    }

    // Element Count: 97, Action Count: 15
    // Largest Action Index: 4 using 42 Elements
    actions
    {
        Call Subroutine(zeroOffsets);
        While(Absolute Value(Event Player._extendedPlayerCollection[1]) < 2.5);
            Event Player._extendedPlayerCollection[0] = 1;
            While(First Of(Event Player._extendedPlayerCollection) < 6);
                "If item here, shift menu selection to the new item"
                If(Global.ButtonActionGrid[Event Player.currentMenuState][((Event Player.menuYIndex + First Of(Event Player._extendedPlayerCollection)) % 6 + 6) % 6 * 5 + Event Player.menuXIndex + Event Player._extendedPlayerCollection[1]] != 0);
                    Call Subroutine(applyOffsets);
                    Skip(8);
                End;
                Event Player._extendedPlayerCollection[0] += 1;
            End;
            If(Event Player._extendedPlayerCollection[1] >= 0);
                Event Player._extendedPlayerCollection[1] += 1;
            End;
            Event Player._extendedPlayerCollection[1] = Event Player._extendedPlayerCollection[1] * -1;
        End;
    }
}

// Rule Element Count: 74
rule("[interface/menu.ostw] Menu up-down")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 15, Condition Count: 2
    conditions
    {
        Event Player.currentMenuState != 0;
        Absolute Value(Z Component Of(Throttle Of(Event Player))) > 0.5;
    }

    // Element Count: 58, Action Count: 19
    // Largest Action Index: 8 using 8 Elements
    actions
    {
        If(Event Player.currentMenuState == 8);
            If(Z Component Of(Throttle Of(Event Player)) > 0.5);
                Event Player.menuYIndex -= 1;
                If(Event Player.menuYIndex < 0);
                    Event Player.menuYIndex = Count Of(Global.AllButtons) - 1;
                End;
            Else;
                Event Player.menuYIndex += 1;
                If(Event Player.menuYIndex >= Count Of(Global.AllButtons));
                    Event Player.menuYIndex = 0;
                End;
            End;
            Abort;
        End;
        If(Z Component Of(Throttle Of(Event Player)) > 0);
            Call Subroutine(findUp);
        Else;
            Call Subroutine(findDown);
        End;
    }
}

// Rule Element Count: 5
rule("[lib/player/buttonControl.del] Initialize buttonLocks array")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 4, Action Count: 1
    actions
    {
        Event Player.buttonLocks[Count Of(Global.AllButtons)] = 0;
    }
}

// Rule Element Count: 43
rule("[lib/player/buttonControl.del] MONKEY PATCH - For Winston, disable secondary fire instead of just disallowing button (because disallow doesn't work on Winston)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 2
    conditions
    {
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] > 0;
        Hero Of(Event Player) == Hero(Winston);
    }

    // Element Count: 23, Action Count: 3
    // Largest Action Index: 1 using 21 Elements
    actions
    {
        Set Secondary Fire Enabled(Event Player, False);
        Wait Until(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] == 0 || Hero Of(Event Player) != Hero(Winston), 99999);
        Set Secondary Fire Enabled(Event Player, True);
    }
}

// Rule Element Count: 43
rule("[lib/player/buttonControl.del] MONKEY PATCH - For Mauga, disable primary fire instead of just disallowing button (because disallow doesn't work on Winston)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 2
    conditions
    {
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] > 0;
        Hero Of(Event Player) == Hero(Mauga);
    }

    // Element Count: 23, Action Count: 3
    // Largest Action Index: 1 using 21 Elements
    actions
    {
        Set Primary Fire Enabled(Event Player, False);
        Wait Until(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] == 0 || Hero Of(Event Player) != Hero(Mauga), 99999);
        Set Primary Fire Enabled(Event Player, True);
    }
}

// Rule Element Count: 43
rule("[lib/player/buttonControl.del] MONKEY PATCH - For Mauga, disable secondary fire instead of just disallowing button (because disallow doesn't work on Mauga)")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 2
    conditions
    {
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] > 0;
        Hero Of(Event Player) == Hero(Mauga);
    }

    // Element Count: 23, Action Count: 3
    // Largest Action Index: 1 using 21 Elements
    actions
    {
        Set Secondary Fire Enabled(Event Player, False);
        Wait Until(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] == 0 || Hero Of(Event Player) != Hero(Mauga), 99999);
        Set Secondary Fire Enabled(Event Player, True);
    }
}

// Rule Element Count: 105
rule("[interface/toolsMenu.ostw] Respawn point")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 1;
    }

    // Element Count: 97, Action Count: 24
    // Largest Action Index: 0 using 10 Elements
    actions
    {
        If(First Of(Event Player._extendedPlayerCollection[2]) == Null);
            Event Player._extendedPlayerCollection[2] = Array(Position Of(Event Player), Eye Position(Event Player), Facing Direction Of(Event Player));
            Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
            Small Message(Event Player, Custom String("Respawn point set!"));
            "Set new button look"
            Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
            Global._arrayConstructor[6] = Custom String("Clear Respawn Point");
            Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[5];
            Global._arrayConstructor[6] = Color(Gray);
            Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Else;
            Global._arrayConstructor = Event Player._extendedPlayerCollection[2];
            Global._arrayConstructor[0] = Null;
            Event Player._extendedPlayerCollection[2] = Global._arrayConstructor;
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Small Message(Event Player, Custom String("Respawn point cleared"));
            "Set new button look"
            Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
            Global._arrayConstructor[6] = Custom String("Set Respawn Point");
            Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[5];
            Global._arrayConstructor[6] = Custom Color(80, 187, 217, 255);
            Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        End;
        Wait(0.5, Ignore Condition);
    }
}

// Rule Element Count: 112
rule("[interface/toolsMenu.ostw] If respawn point is set, and player dies, respawn them at the respawn point")
{
    event
    {
        Player Died;
        All;
        All;
    }

    // Element Count: 111, Action Count: 22
    // Largest Action Index: 9 using 17 Elements
    actions
    {
        Wait Until(Is Alive(Event Player), 9999);
        If(First Of(Event Player._extendedPlayerCollection[2]) != Null);
            Teleport(Event Player, First Of(Event Player._extendedPlayerCollection[2]));
            Stop Facing(Event Player);
            Wait(0.016, Ignore Condition);
            Set Facing(Event Player, Event Player._extendedPlayerCollection[2][2], To World);
            "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
            Wait(0.032, Ignore Condition);
            Start Facing(Event Player, Event Player._extendedPlayerCollection[2][2], 1000, To World, Direction And Turn Rate);
            Wait(0.016, Ignore Condition);
            Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player._extendedPlayerCollection[2][2]) < 0.1, 0.25);
            Stop Facing(Event Player);
        Else If(First Of(Event Player.replayResetPoint) != Null);
            Teleport(Event Player, First Of(Event Player.replayResetPoint));
            Stop Facing(Event Player);
            Wait(0.016, Ignore Condition);
            Set Facing(Event Player, Event Player.replayResetPoint[2], To World);
            "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
            Wait(0.032, Ignore Condition);
            Start Facing(Event Player, Event Player.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
            Wait(0.016, Ignore Condition);
            Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player.replayResetPoint[2]) < 0.1, 0.25);
            Stop Facing(Event Player);
        End;
    }
}

// Rule Element Count: 57
rule("[interface/toolsMenu.ostw] Change hero")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 2;
    }

    // Element Count: 49, Action Count: 10
    // Largest Action Index: 7 using 25 Elements
    actions
    {
        Set Player Allowed Heroes(Event Player, Remove From Array(Allowed Heroes(Event Player), Hero Of(Event Player)));
        Wait Until(!Has Spawned(Event Player), 3);
        Reset Player Hero Availability(Event Player);
        Wait Until(Has Spawned(Event Player), 9999);
        Stop Forcing Player Position(Event Player);
        Start Forcing Player Position(Event Player, First Of(Event Player.menuActivationPoint), True);
        Wait(0.064, Ignore Condition);
        Wait Until(Distance Between(Event Player, First Of(Event Player.menuActivationPoint)) < 0.05 && Angle Between Vectors(Facing Direction Of(Event Player), Event Player.menuActivationPoint[2]) < 0.1, 1);
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 67
rule("[interface/toolsMenu.ostw] Toggle noclip")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 3;
    }

    // Element Count: 59, Action Count: 19
    // Largest Action Index: 2 using 6 Elements
    actions
    {
        If(Event Player.isNoClipActive);
            Event Player.isNoClipActive = False;
            "Set new button look"
            Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
            Global._arrayConstructor[8] = Custom String("Enable NoClip");
            Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[5];
            Global._arrayConstructor[8] = Color(Green);
            Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Else;
            Event Player.isNoClipActive = True;
            "Set new button look"
            Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
            Global._arrayConstructor[8] = Custom String("Disable NoClip");
            Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[5];
            Global._arrayConstructor[8] = Color(Red);
            Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        End;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 17
rule("[interface/toolsMenu.ostw] Toggle pause button")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 6;
    }

    // Element Count: 9, Action Count: 6
    // Largest Action Index: 5 using 3 Elements
    actions
    {
        If(Global.isTimePaused);
            Unpause Match Time;
        Else;
            Pause Match Time;
        End;
        Global.isTimePaused = !Global.isTimePaused;
    }
}

// Rule Element Count: 37
rule("[interface/toolsMenu.ostw] Keep pause button appearance updated for everyone - Unpause")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Global.isTimePaused == True;
    }

    // Element Count: 31, Action Count: 6
    // Largest Action Index: 4 using 10 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[16] = Custom String("Unpause Match Time");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[16] = Custom Color(50, 220, 27, 255);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
    }
}

// Rule Element Count: 31
rule("[interface/toolsMenu.ostw] Keep pause button appearance update for everyone - Pause")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        !Global.isTimePaused == True;
    }

    // Element Count: 24, Action Count: 6
    // Largest Action Index: 0 using 6 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[16] = Custom String("Pause Match Time");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[16] = Color(Purple);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
    }
}

// Rule Element Count: 13
rule("[interface/toolsMenu.ostw] Handle request for returning to assembling heroes")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 10;
    }

    // Element Count: 5, Action Count: 3
    // Largest Action Index: 1 using 2 Elements
    actions
    {
        Go To Assemble Heroes;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 43
rule("[interface/toolsMenu.ostw] When fast-forward is requested, make it happen")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 4;
    }

    // Element Count: 35, Action Count: 22
    // Largest Action Index: 3 using 5 Elements
    actions
    {
        "Setup skip"
        If(Is In Setup);
            Set Match Time(0);
        Else If(Is Game In Progress);
            If(Current Game Mode == Game Mode(Control));
                Declare Round Victory(Team Of(Event Player));
            Else;
                Set Match Time(0);
            End;
        Else;
            Small Message(Event Player, Custom String(" Current phase can't be skipped?"));
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Abort;
        "Otherwise, logic to end round"
        End;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
        If(Global.isTimePaused);
            Unpause Match Time;
            Global.isTimePaused = False;
            Wait(0.032, Ignore Condition);
            Pause Match Time;
            Global.isTimePaused = True;
        End;
    }
}

// Rule Element Count: 29
rule("[interface/toolsMenu.ostw] When in setup, change fast-forward button to skip setup")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 4, Condition Count: 1
    conditions
    {
        Is In Setup == True;
    }

    // Element Count: 24, Action Count: 6
    // Largest Action Index: 0 using 6 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[17] = Custom String("Skip Setup");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[17] = Color(Aqua);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
    }
}

// Rule Element Count: 36
rule("[interface/toolsMenu.ostw] When game is in progress, change fast-forward button to end round")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 4, Condition Count: 1
    conditions
    {
        Is Game In Progress == True;
    }

    // Element Count: 31, Action Count: 6
    // Largest Action Index: 4 using 10 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[17] = Custom String("End Round");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[17] = Custom Color(212, 62, 62, 255);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
    }
}

// Rule Element Count: 16
rule("[interface/toolsMenu.ostw] Handle request to end match")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 5;
    }

    // Element Count: 8, Action Count: 4
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 2;
        Event Player.menuXIndex = 1;
        Event Player.menuYIndex = 0;
    }
}

// Rule Element Count: 121
rule("[interface/toolsMenu.ostw] Handle request to toggle ruler")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 7;
    }

    // Element Count: 113, Action Count: 26
    // Largest Action Index: 0 using 22 Elements
    actions
    {
        Skip(Array(25, 0, 10, 18)[Index Of Array Value(Array(0, 1, 2), Event Player.playerRulerState) + 1]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[11] = Custom String("Freeze Ruler");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[11] = Color(Orange);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Event Player.playerRulerState = 1;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
        Skip(15);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[11] = Custom String("Hide Ruler");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[11] = Custom Color(200, 50, 50, 255);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Event Player.playerRulerState = 2;
        Skip(7);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[11] = Custom String("Place Ruler");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[11] = Color(Yellow);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Event Player.playerRulerState = 0;
    }
}

// Rule Element Count: 118
rule("[interface/toolsMenu.ostw] Handle request to change third person state")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 8;
    }

    // Element Count: 110, Action Count: 28
    // Largest Action Index: 0 using 22 Elements
    actions
    {
        Skip(Array(27, 0, 10, 20)[Index Of Array Value(Array(0, 1, 2), Event Player.thirdPersonState) + 1]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[13] = Custom String("Set 3P Camera Pos");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[13] = Color(Green);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Event Player.thirdPersonState = 1;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
        Skip(17);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[13] = Custom String("Stop 3rd Person");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[13] = Color(Red);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Event Player.thirdPersonState = 2;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
        Skip(7);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[5];
        Global._arrayConstructor[13] = Custom String("Enable 3rd Person");
        Event Player.ButtonLabelGrid[5] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[5];
        Global._arrayConstructor[13] = Color(Orange);
        Event Player.ButtonColorGrid[5] = Global._arrayConstructor;
        Event Player.thirdPersonState = 0;
    }
}

// Rule Element Count: 20
rule("[interface/toolsMenu.ostw] Handle request to unlock all buttons")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.toolsActionID == 9;
    }

    // Element Count: 12, Action Count: 5
    // Largest Action Index: 0 using 6 Elements
    actions
    {
        Event Player.buttonLocks = Mapped Array(Event Player.buttonLocks, 0);
        Global.player = Event Player;
        Call Subroutine(UpdatePlayerButtonStatus);
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 19
rule("Initiate confirmation dialog")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.currentMenuState == 2;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Element Count: 4, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Event Player.menuXIndex = 1;
        Event Player.menuYIndex = 0;
    }
}

// Rule Element Count: 37
rule("[interface/tools/ruler.ostw] Create help text for ruler")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 36, Action Count: 1
    actions
    {
        Create HUD Text(Array Contains(All Players(All Teams), Local Player) && Local Player.currentMenuState == 0 && Local Player.playerRulerState == 1 ? Local Player : Null, Null, Custom String("Placing Ruler Endpoints"), Custom String("[{0}] Move Blue Point\n[{1}] Move Orange Point", Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire))), Right, 0, Color(White), Color(Yellow), Color(White), Visible To And String, Visible Never);
    }
}

// Rule Element Count: 102
rule("[interface/tools/ruler.ostw] When ruler is active, disable primary + secondary until ruler placement is not active")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.playerRulerState == 1;
    }

    // Element Count: 94, Action Count: 13
    // Largest Action Index: 5 using 19 Elements
    actions
    {
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] += 1;
        Disallow Button(Event Player, Button(Primary Fire));
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] += 1;
        Disallow Button(Event Player, Button(Secondary Fire));
        Wait Until(Event Player.playerRulerState != 1, 99999);
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] == 0);
            Allow Button(Event Player, Button(Primary Fire));
        End;
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] == 0);
            Allow Button(Event Player, Button(Secondary Fire));
        End;
    }
}

// Rule Element Count: 477
rule("[interface/tools/ruler.ostw] Manage ruler visual effects lifecycle")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.playerRulerState != 0;
    }

    // Element Count: 469, Action Count: 20
    // Largest Action Index: 14 using 163 Elements
    actions
    {
        "Need to initialize ruler if it hasn't been placed before"
        If(Event Player.position1 == Null);
            Event Player.position1 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player) + World Vector Of(Left, Event Player, Rotation), Null, Null, False);
        End;
        If(Event Player.position2 == Null);
            Event Player.position2 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player) + World Vector Of(Right, Event Player, Rotation), Null, Null, False);
        End;
        Create Effect(All Players(All Teams), Sphere, Color(Blue), Update Every Frame(Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1), 0.2, Visible To Position and Radius);
        Event Player.rulerEffects[0] = Last Created Entity;
        Create Effect(All Players(All Teams), Sphere, Color(Orange), Update Every Frame(Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2), 0.2, Visible To Position and Radius);
        Event Player.rulerEffects[1] = Last Created Entity;
        Create Beam Effect(All Players(All Teams), Grapple Beam, Update Every Frame(Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1), Update Every Frame(Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2), Null, Visible To Position and Radius);
        Event Player.rulerEffects[2] = Last Created Entity;
        Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.currentMenuState == 0), Custom String("{0}m\n", Distance Between(Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1, Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2)), Update Every Frame(((Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1) + (Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2)) / 2), 1.5, Do Not Clip, Visible To Position and String, Color(White), Visible Always);
        Event Player.rulerEffects[3] = Last Text ID;
        Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.currentMenuState == 0), Custom String(" \nLOS: {0}", Is In Line Of Sight(Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1, Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2, Barriers Do Not Block LOS)), Update Every Frame(((Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1) + (Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2)) / 2), 1.5, Do Not Clip, Visible To Position String and Color, Is In Line Of Sight(Event Player.isMovingPosition1 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position1, Event Player.isMovingPosition2 ? Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True) : Event Player.position2, Barriers Do Not Block LOS) ? Color(Green) : Color(Red), Visible Always);
        Event Player.rulerEffects[4] = Last Text ID;
        Wait Until(Event Player.playerRulerState == 0, 99999);
        Destroy Effect(Array Slice(Event Player.rulerEffects, 0, 3));
        Destroy In-World Text(Event Player.rulerEffects[3]);
        Destroy In-World Text(Event Player.rulerEffects[4]);
    }
}

// Rule Element Count: 51
rule("[interface/tools/ruler.ostw] Handle player setting first point")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 3
    conditions
    {
        Is Alive(Event Player) == True;
        Event Player.playerRulerState == 1;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Element Count: 31, Action Count: 5
    // Largest Action Index: 4 using 16 Elements
    actions
    {
        Abort If(Event Player.currentMenuState != 0);
        Event Player.isMovingPosition1 = True;
        Wait Until(!Is Button Held(Event Player, Button(Primary Fire)), 99999);
        Event Player.isMovingPosition1 = False;
        Event Player.position1 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True);
    }
}

// Rule Element Count: 51
rule("[interface/tools/ruler.ostw] Handle player setting second point")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 3
    conditions
    {
        Is Alive(Event Player) == True;
        Event Player.playerRulerState == 1;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }

    // Element Count: 31, Action Count: 5
    // Largest Action Index: 4 using 16 Elements
    actions
    {
        Abort If(Event Player.currentMenuState != 0);
        Event Player.isMovingPosition2 = True;
        Wait Until(!Is Button Held(Event Player, Button(Secondary Fire)), 99999);
        Event Player.isMovingPosition2 = False;
        Event Player.position2 = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 5 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True);
    }
}

// Rule Element Count: 104
rule("[interface/tools/thirdPerson.ostw] When person is in third person and their menu state becomes closed, start third person camera")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 36, Condition Count: 4
    conditions
    {
        Is Alive(Event Player) == True;
        (Array Contains(Array(Hero(Widowmaker), Hero(Ashe), Hero(Ana)), Hero Of(Event Player)) && Is Firing Secondary(Event Player)) == False;
        Event Player.thirdPersonState != 0;
        Event Player.currentMenuState == 0;
    }

    // Element Count: 67, Action Count: 2
    // Largest Action Index: 1 using 65 Elements
    actions
    {
        Wait(0.016, Ignore Condition);
        "Code borrowed from workshop.codes/third-person"
        Start Camera(Event Player, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + World Vector Of(Vector(Event Player.thirdPersonDirection * Min(Event Player.thirdPersonZoom / 2.5, -0.75), Empty Array, Empty Array), Event Player, Rotation) + Facing Direction Of(Event Player) * Event Player.thirdPersonZoom + Cross Product(Facing Direction Of(Event Player), World Vector Of(Left, Event Player, Rotation)) * Event Player.thirdPersonHeight, All Players(All Teams), Event Player, False), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 200, All Players(All Teams), Event Player, False), 60);
    }
}

// Rule Element Count: 106
rule("[interface/tools/thirdPerson.ostw] During adjustment, reduce move speed")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.thirdPersonState == 1;
    }

    // Element Count: 98, Action Count: 15
    // Largest Action Index: 7 using 19 Elements
    actions
    {
        Set Move Speed(Event Player, 0.01);
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] += 1;
        Disallow Button(Event Player, Button(Jump));
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] += 1;
        Disallow Button(Event Player, Button(Crouch));
        Wait Until(Event Player.thirdPersonState != 1, 1000000);
        Set Move Speed(Event Player, 100);
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] == 0);
            Allow Button(Event Player, Button(Jump));
        End;
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] == 0);
            Allow Button(Event Player, Button(Crouch));
        End;
    }
}

// Rule Element Count: 58
rule("[interface/tools/thirdPerson.ostw] While adjusting, use Z Component of Throttle to adjust zoom")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 4
    conditions
    {
        Event Player.thirdPersonState == 1;
        Is Alive(Event Player) == True;
        Event Player.currentMenuState == 0;
        Absolute Value(Z Component Of(Throttle Of(Event Player))) >= 0.5;
    }

    // Element Count: 30, Action Count: 7
    // Largest Action Index: 1 using 9 Elements
    actions
    {
        If(Z Component Of(Throttle Of(Event Player)) > 0);
            Event Player.thirdPersonZoom = Min(Event Player.thirdPersonZoom + 0.1, -0.5);
        Else;
            Event Player.thirdPersonZoom = Max(Event Player.thirdPersonZoom - 0.1, -5);
        End;
        Wait(0.064, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 58
rule("[interface/tools/thirdPerson.ostw] While adjusting, use X Component of Throttle to adjust direction")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 4
    conditions
    {
        Event Player.thirdPersonState == 1;
        Is Alive(Event Player) == True;
        Event Player.currentMenuState == 0;
        Absolute Value(X Component Of(Throttle Of(Event Player))) >= 0.5;
    }

    // Element Count: 30, Action Count: 7
    // Largest Action Index: 1 using 9 Elements
    actions
    {
        If(X Component Of(Throttle Of(Event Player)) > 0);
            Event Player.thirdPersonDirection = Max(Event Player.thirdPersonDirection - 0.1, -2);
        Else;
            Event Player.thirdPersonDirection = Min(Event Player.thirdPersonDirection + 0.1, 2);
        End;
        Wait(0.064, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 39
rule("[interface/tools/thirdPerson.ostw] While adjusting, use jump to increase height")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 26, Condition Count: 4
    conditions
    {
        Event Player.thirdPersonState == 1;
        Is Alive(Event Player) == True;
        Event Player.currentMenuState == 0;
        Is Button Held(Event Player, Button(Jump)) == True;
    }

    // Element Count: 12, Action Count: 3
    // Largest Action Index: 0 using 9 Elements
    actions
    {
        Event Player.thirdPersonHeight = Min(Event Player.thirdPersonHeight + 0.1, 5);
        Wait(0.064, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 39
rule("[interface/tools/thirdPerson.ostw] While adjusting, use crouch to decrease height")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 26, Condition Count: 4
    conditions
    {
        Event Player.thirdPersonState == 1;
        Is Alive(Event Player) == True;
        Event Player.currentMenuState == 0;
        Is Button Held(Event Player, Button(Crouch)) == True;
    }

    // Element Count: 12, Action Count: 3
    // Largest Action Index: 0 using 9 Elements
    actions
    {
        Event Player.thirdPersonHeight = Max(Event Player.thirdPersonHeight - 0.1, -2);
        Wait(0.064, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 35
rule("[interface/tools/thirdPerson.ostw] Stop third person during certain conditions")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 33, Condition Count: 4
    conditions
    {
        Array Contains(Array(Hero(Widowmaker), Hero(Ashe), Hero(Ana)), Hero Of(Event Player)) == True;
        Is Firing Secondary(Event Player) == True;
        Event Player.thirdPersonState != 0;
        Event Player.currentMenuState == 0;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Stop Camera(Event Player);
    }
}

// Rule Element Count: 31
rule("[lib/player/noClip.del] Global noclip setup")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 30, Action Count: 1
    actions
    {
        Create HUD Text(Local Player.isNoClipActive && Local Player.currentMenuState == 0 ? Local Player : Null, Null, Custom String("NoClip Active"), Custom String("Hold [{0}] - Move Faster", Input Binding String(Button(Reload))), Right, 1, Color(White), Color(Orange), Is Button Held(Local Player, Button(Reload)) ? Color(Orange) : Color(Blue), Visible To String and Color, Visible Never);
    }
}

// Rule Element Count: 29
rule("[lib/player/noClip.del] Engage noclip")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Event Player.isNoClipActive == True;
    }

    // Element Count: 22, Action Count: 8
    // Largest Action Index: 4 using 6 Elements
    actions
    {
        Set Gravity(Event Player, 0);
        Disable Movement Collision With Environment(Event Player, True);
        Disable Movement Collision With Players(Event Player);
        Set Move Speed(Event Player, 0);
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] += 1;
        Disallow Button(Event Player, Button(Jump));
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] += 1;
        Disallow Button(Event Player, Button(Crouch));
    }
}

// Rule Element Count: 84
rule("[lib/player/noClip.del] Disengage noclip")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        !Event Player.isNoClipActive == True;
    }

    // Element Count: 76, Action Count: 12
    // Largest Action Index: 4 using 19 Elements
    actions
    {
        Set Gravity(Event Player, 100);
        Enable Movement Collision With Environment(Event Player);
        Enable Movement Collision With Players(Event Player);
        Set Move Speed(Event Player, 100);
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Jump))] == 0);
            Allow Button(Event Player, Button(Jump));
        End;
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Crouch))] == 0);
            Allow Button(Event Player, Button(Crouch));
        End;
    }
}

// Rule Element Count: 101
rule("Noclip propulsion")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 26, Condition Count: 2
    conditions
    {
        Event Player.isNoClipActive == True;
        (Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Jump)) || Throttle Of(Event Player) != Left - Left) == True;
    }

    // Element Count: 74, Action Count: 6
    // Largest Action Index: 2 using 43 Elements
    actions
    {
        Apply Impulse(Event Player, Velocity Of(Event Player) * -1, Speed Of(Event Player) * 0.03, To World, Incorporate Contrary Motion);
        If(!(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Jump)) && Magnitude Of(Throttle Of(Event Player)) == 0));
            Apply Impulse(Event Player, Normalize(Facing Direction Of(Event Player) * Z Component Of(Throttle Of(Event Player)) + World Vector Of(Left, Event Player, Rotation) * X Component Of(Throttle Of(Event Player)) + Up * (Is Button Held(Event Player, Button(Jump)) - Is Button Held(Event Player, Button(Crouch)))), (100 + 300 * Is Button Held(Event Player, Button(Reload)) - Speed Of(Event Player)) / 62.5, To World, Incorporate Contrary Motion);
        End;
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 46
rule("Noclip air resistance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 33, Condition Count: 3
    conditions
    {
        Event Player.isNoClipActive == True;
        !(Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Jump)) || Throttle Of(Event Player) != Left - Left) == True;
        Speed Of(Event Player) > 0.01;
    }

    // Element Count: 12, Action Count: 3
    // Largest Action Index: 0 using 9 Elements
    actions
    {
        Apply Impulse(Event Player, Velocity Of(Event Player) * -1, Speed Of(Event Player) * 0.12, To World, Incorporate Contrary Motion);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 103
rule("[interface/information/simpleInfoReadouts.ostw] If player has Position HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 7) == True;
    }

    // Element Count: 93, Action Count: 16
    // Largest Action Index: 0 using 29 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" POS: {0} ", Update Every Frame(Position Of(Event Player))), Custom String("{0}", Custom String("                                                                                          ")), Custom String("LOOK: {0}", Update Every Frame(Facing Direction Of(Event Player))), Left, Index Of Array Value(Event Player.activeInfoDisplays, 7), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Event Player.infoDisplayEntities[7] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[6] = Custom String("Hide Position/Facing");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[6] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 7), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[7]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[6] = Custom String("Show Position/Facing");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[6] = Color(Green);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 100
rule("[interface/information/simpleInfoReadouts.ostw] If player has Throttle HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 17) == True;
    }

    // Element Count: 90, Action Count: 16
    // Largest Action Index: 0 using 26 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" THROTTLE: {0} ", Update Every Frame(Throttle Of(Event Player))), Custom String(" "), Custom String("{0}", Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 17), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Event Player.infoDisplayEntities[17] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[7] = Custom String("Hide Throttle");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[7] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 17), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[17]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[7] = Custom String("Show Throttle");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[7] = Color(Rose);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 104
rule("[interface/information/simpleInfoReadouts.ostw] If player has Move Speed HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 1) == True;
    }

    // Element Count: 94, Action Count: 16
    // Largest Action Index: 0 using 30 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" SPEED: {0} ", Update Every Frame(Speed Of(Event Player))), Custom String("Vert: {0}", Vertical Speed Of(Event Player)), Custom String("Horiz: {0}{1}", Horizontal Speed Of(Event Player), Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 1), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Event Player.infoDisplayEntities[1] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[8] = Custom String("Hide Move Speed");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[8] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 1), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[1]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[8] = Custom String("Show Move Speed");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[8] = Color(Orange);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 100
rule("[interface/information/simpleInfoReadouts.ostw] If player has Altitude HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 9) == True;
    }

    // Element Count: 90, Action Count: 16
    // Largest Action Index: 0 using 26 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" ALT: {0} ", Update Every Frame(Altitude Of(Event Player))), Custom String(" "), Custom String("{0}", Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 9), Color(White), Color(White), Color(White), Visible To Sort Order and String, Default Visibility);
        Event Player.infoDisplayEntities[9] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[11] = Custom String("Hide Altitude");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[11] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 9), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[9]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[11] = Custom String("Show Altitude");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[11] = Color(Sky Blue);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 105
rule("[interface/information/simpleInfoReadouts.ostw] If player has On Ground HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 10) == True;
    }

    // Element Count: 95, Action Count: 16
    // Largest Action Index: 0 using 31 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" ON GROUND: {0} ", Update Every Frame(Is On Ground(Event Player))), Custom String(" "), Custom String("{0}", Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 10), Is On Ground(Event Player) ? Color(Green) : Color(Red), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Event Player.infoDisplayEntities[10] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[12] = Custom String("Hide If On Ground");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[12] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 10), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[10]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[12] = Custom String("Show If On Ground");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[12] = Color(Purple);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 110
rule("[interface/information/simpleInfoReadouts.ostw] If player has On Wall HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 11) == True;
    }

    // Element Count: 100, Action Count: 16
    // Largest Action Index: 0 using 36 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" ON WALL: {0} ", Update Every Frame(Is On Wall(Event Player)) ? Custom String("True") : Custom String("False")), Custom String(" "), Custom String("{0}", Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 11), Is On Wall(Event Player) ? Color(Green) : Color(Red), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Event Player.infoDisplayEntities[11] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[13] = Custom String("Hide If On Wall");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[13] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 11), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[11]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[13] = Custom String("Show If On Wall");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[13] = Color(Violet);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 110
rule("[interface/information/simpleInfoReadouts.ostw] If player has On Objective HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 14) == True;
    }

    // Element Count: 100, Action Count: 16
    // Largest Action Index: 0 using 36 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" ON OBJECTIVE: {0} ", Update Every Frame(Is On Objective(Event Player)) ? Custom String("True") : Custom String("False")), Custom String(" "), Custom String("{0}", Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 14), Is On Wall(Event Player) ? Color(Green) : Color(Red), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Event Player.infoDisplayEntities[14] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[3] = Custom String("Hide Is On Objective");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[3] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 14), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[14]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[3] = Custom String("Show Is On Objective");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[3] = Color(Turquoise);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 189
rule("[interface/information/simpleInfoReadouts.ostw] If player has Exact Health HUD, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 15) == True;
    }

    // Element Count: 179, Action Count: 16
    // Largest Action Index: 0 using 108 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String(" Exact Health: {0} ", Update Every Frame(Health(Event Player))), Custom String(" "), Custom String("{0}", Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 15), Update Every Frame(Custom Color(((100 * Normalized Health(Event Player) < 60 ? 0.64 : 0.64 * (1 - Absolute Value(100 * Normalized Health(Event Player) / 60 % 2 - 1))) + 0.16) * 255, ((100 * Normalized Health(Event Player) < 60 ? 0.64 * (1 - Absolute Value(100 * Normalized Health(Event Player) / 60 % 2 - 1)) : 0.64) + 0.16) * 255, 40.8, 255)), Color(White), Color(White), Visible To Sort Order String and Color, Default Visibility);
        Event Player.infoDisplayEntities[15] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[1] = Custom String("Hide Exact Health");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[1] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 15), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[15]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[1] = Custom String("Show Exact Health");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[1] = Custom Color(200, 50, 50, 255);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 146
rule("[interface/information/simpleInfoReadouts.ostw] If player has Distance Crosshair, enable it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 2) == True;
    }

    // Element Count: 136, Action Count: 16
    // Largest Action Index: 0 using 72 Elements
    actions
    {
        Create In-World Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String("DIST: {0}", Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 200 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True))), Update Every Frame(True * Eye Position(Local Player) + Empty Array * Cross Product(Facing Direction Of(Local Player), Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90)) + -10 * Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Local Player)), Vertical Angle From Direction(Facing Direction Of(Local Player)) - 90) + 300 * Facing Direction Of(Local Player)), 1, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Event Player.infoDisplayEntities[2] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[2] = Custom String("Hide Distance To Crosshair");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[2] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 2), 99999);
        Destroy In-World Text(Event Player.infoDisplayEntities[2]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[2] = Custom String("Show Distance To Crosshair");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[2] = Color(Aqua);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 140
rule("[interface/information/metricsReadout.ostw] Player enables/disables heals dealt display")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 3) == True;
    }

    // Element Count: 130, Action Count: 16
    // Largest Action Index: 0 using 66 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String("HPS Dealt: {0}", Update Every Frame(Event Player.healDealtInPeriod / (Global.OptimizeMetricsForOverTime ? 0.384 : 1))), Custom String("Self: {0}", Max(0, Update Every Frame((Event Player.healDealtInPeriod - Event Player.healDealtInPeriodNonSelf) / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)))), Custom String("Other: {0}{1}", Update Every Frame(Event Player.healDealtInPeriodNonSelf / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)), Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 3), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Event Player.infoDisplayEntities[3] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[16] = Custom String("Hide HPS Dealt");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[16] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 3), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[3]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[16] = Custom String("Show HPS Dealt");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[16] = Color(Yellow);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 147
rule("[interface/information/metricsReadout.ostw] Player enables/disables heals received display")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 4) == True;
    }

    // Element Count: 137, Action Count: 16
    // Largest Action Index: 0 using 66 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String("HPS Received: {0}", Update Every Frame(Event Player.healReceivedInPeriod / (Global.OptimizeMetricsForOverTime ? 0.384 : 1))), Custom String("Self: {0}", Max(0, Update Every Frame((Event Player.healReceivedInPeriod - Event Player.healReceivedInPeriodNonSelf) / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)))), Custom String("Other: {0}{1}", Update Every Frame(Event Player.healReceivedInPeriodNonSelf / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)), Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 4), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Event Player.infoDisplayEntities[4] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[21] = Custom String("Hide HPS Received");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[21] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 4), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[4]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[21] = Custom String("Show HPS Received");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[21] = Custom Color(245, 200, 0, 255);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 140
rule("[interface/information/metricsReadout.ostw] Player enables/disables damage dealt display")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 5) == True;
    }

    // Element Count: 130, Action Count: 16
    // Largest Action Index: 0 using 66 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String("DPS Dealt: {0}", Update Every Frame(Event Player.damageDealtInPeriod / (Global.OptimizeMetricsForOverTime ? 0.384 : 1))), Custom String("Self: {0}", Max(0, Update Every Frame((Event Player.damageDealtInPeriod - Event Player.damageDealtInPeriodNonSelf) / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)))), Custom String("Other: {0}{1}", Update Every Frame(Event Player.damageDealtInPeriodNonSelf / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)), Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 5), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Event Player.infoDisplayEntities[5] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[18] = Custom String("Hide DPS Dealt");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[18] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 5), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[5]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[18] = Custom String("Show DPS Dealt");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[18] = Color(Red);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 147
rule("[interface/information/metricsReadout.ostw] Player enables/disables damage received display")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 6) == True;
    }

    // Element Count: 137, Action Count: 16
    // Largest Action Index: 0 using 66 Elements
    actions
    {
        Create HUD Text(Event Player.currentMenuState == 0 ? Event Player : Null, Custom String("DPS Received: {0}", Update Every Frame(Event Player.damageReceivedInPeriod / (Global.OptimizeMetricsForOverTime ? 0.384 : 1))), Custom String("Self: {0}", Max(0, Update Every Frame((Event Player.damageReceivedInPeriod - Event Player.damageReceivedInPeriodNonSelf) / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)))), Custom String("Other: {0}{1}", Update Every Frame(Event Player.damageReceivedInPeriodNonSelf / (Global.OptimizeMetricsForOverTime ? 0.384 : 1)), Custom String("                                                                                          ")), Left, Index Of Array Value(Event Player.activeInfoDisplays, 6), Color(White), Color(White), Color(White), Visible To And String, Default Visibility);
        Event Player.infoDisplayEntities[6] = Last Text ID;
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[23] = Custom String("Hide DPS Received");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[23] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 6), 99999);
        Destroy HUD Text(Event Player.infoDisplayEntities[6]);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[23] = Custom String("Show DPS Received");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[23] = Custom Color(218, 76, 10, 255);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 80
rule("[lib/healingPerSecond.ostw] Track when a player receives healing")
{
    event
    {
        Player Received Healing;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Event Healing > 0;
    }

    // Element Count: 74, Action Count: 15
    // Largest Action Index: 3 using 21 Elements
    actions
    {
        Event Player._extendedPlayerCollection[7] = Total Time Elapsed;
        Healee.healingReceivedEvents = Append To Array(Healee.healingReceivedEvents, Array(Array(Event Player._extendedPlayerCollection[7], Event Healing, Healer, Healee)));
        Healer.healingDealtEvents = Append To Array(Healer.healingDealtEvents, Array(Array(Event Player._extendedPlayerCollection[7], Event Healing, Healer, Healee)));
        If(Event Player._extendedPlayerCollection[7] < First Of(First Of(Healee.healingReceivedEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1));
            Healee.healReceivedInPeriod += Event Healing;
            If(Healer != Healee);
                Healee.healReceivedInPeriodNonSelf += Event Healing;
            End;
        End;
        If(Event Player._extendedPlayerCollection[7] < First Of(First Of(Healer.healingDealtEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1));
            Healer.healDealtInPeriod += Event Healing;
            If(Healer != Healee);
                Healer.healDealtInPeriodNonSelf += Event Healing;
            End;
        End;
    }
}

// Rule Element Count: 332
rule("[lib/healingPerSecond.ostw] When the head of the healing received array has expired, remove all expired events")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 28, Condition Count: 2
    conditions
    {
        Count Of(Event Player.healingReceivedEvents) > 0;
        Update Every Frame(Total Time Elapsed) >= First Of(First Of(Event Player.healingReceivedEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25;
    }

    // Element Count: 303, Action Count: 31
    // Largest Action Index: 19 using 45 Elements
    actions
    {
        Event Player._extendedPlayerCollection[6] = First Of(First Of(Event Player.healingReceivedEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1);
        Event Player._extendedPlayerCollection[3] = 0;
        Event Player._extendedPlayerCollection[4] = Count Of(Event Player.healingReceivedEvents);
        "Remove expired events"
        While(First Of(Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25 < Total Time Elapsed && Event Player._extendedPlayerCollection[3] < Count Of(Event Player.healingReceivedEvents));
            Event Player.healReceivedInPeriod = Max(0, Event Player.healReceivedInPeriod - Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[3]][1]);
            If(Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[3]][3] != Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[3]][2]);
                Event Player.healReceivedInPeriodNonSelf = Max(0, Event Player.healReceivedInPeriodNonSelf - Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[3]][1]);
            End;
            Event Player._extendedPlayerCollection[3] += 1;
            Event Player._extendedPlayerCollection[4] -= 1;
        End;
        "Early termination optimization/safety clause"
        If(Count Of(Event Player.healingReceivedEvents) == 0);
            Event Player.healReceivedInPeriod = 0;
            Event Player.healReceivedInPeriodNonSelf = 0;
            Wait(0.016, Ignore Condition);
            Loop If Condition Is True;
            Abort;
        End;
        Event Player._extendedPlayerCollection[5] = Event Player._extendedPlayerCollection[3];
        "Add newly valid events"
        While(First Of(Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[5]]) < First Of(Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) && Event Player._extendedPlayerCollection[5] < Count Of(Event Player.healingReceivedEvents));
            "Make sure to only include NEWLY valid events"
            If(First Of(Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[5]]) >= Event Player._extendedPlayerCollection[6]);
                Event Player.healReceivedInPeriod += Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[5]][1];
                If(Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[5]][2] != Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[5]][3]);
                    Event Player.healReceivedInPeriodNonSelf += Event Player.healingReceivedEvents[Event Player._extendedPlayerCollection[5]][1];
                End;
            End;
            Event Player._extendedPlayerCollection[5] += 1;
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Event Player.healingReceivedEvents = Array Slice(Event Player.healingReceivedEvents, Event Player._extendedPlayerCollection[3], Event Player._extendedPlayerCollection[4]);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 332
rule("[lib/healingPerSecond.ostw] When the head of the healing dealt array has expired, remove all expired events")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 28, Condition Count: 2
    conditions
    {
        Count Of(Event Player.healingDealtEvents) > 0;
        Update Every Frame(Total Time Elapsed) >= First Of(First Of(Event Player.healingDealtEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25;
    }

    // Element Count: 303, Action Count: 31
    // Largest Action Index: 19 using 45 Elements
    actions
    {
        Event Player._extendedPlayerCollection[6] = First Of(First Of(Event Player.healingDealtEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1);
        Event Player._extendedPlayerCollection[3] = 0;
        Event Player._extendedPlayerCollection[4] = Count Of(Event Player.healingDealtEvents);
        "Remove expired events"
        While(First Of(Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25 < Total Time Elapsed && Event Player._extendedPlayerCollection[3] < Count Of(Event Player.healingDealtEvents));
            Event Player.healDealtInPeriod = Max(0, Event Player.healDealtInPeriod - Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[3]][1]);
            If(Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[3]][3] != Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[3]][2]);
                Event Player.healDealtInPeriodNonSelf = Max(0, Event Player.healDealtInPeriodNonSelf - Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[3]][1]);
            End;
            Event Player._extendedPlayerCollection[3] += 1;
            Event Player._extendedPlayerCollection[4] -= 1;
        End;
        "Early termination optimization/safety clause"
        If(Count Of(Event Player.healingDealtEvents) == 0);
            Event Player.healDealtInPeriod = 0;
            Event Player.healDealtInPeriodNonSelf = 0;
            Wait(0.016, Ignore Condition);
            Loop If Condition Is True;
            Abort;
        End;
        Event Player._extendedPlayerCollection[5] = Event Player._extendedPlayerCollection[3];
        "Add newly valid events"
        While(First Of(Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[5]]) < First Of(Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) && Event Player._extendedPlayerCollection[5] < Count Of(Event Player.healingDealtEvents));
            "Make sure to only include NEWLY valid events"
            If(First Of(Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[5]]) >= Event Player._extendedPlayerCollection[6]);
                Event Player.healDealtInPeriod += Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[5]][1];
                If(Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[5]][2] != Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[5]][3]);
                    Event Player.healDealtInPeriodNonSelf += Event Player.healingDealtEvents[Event Player._extendedPlayerCollection[5]][1];
                End;
            End;
            Event Player._extendedPlayerCollection[5] += 1;
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Event Player.healingDealtEvents = Array Slice(Event Player.healingDealtEvents, Event Player._extendedPlayerCollection[3], Event Player._extendedPlayerCollection[4]);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 80
rule("[lib/damagePerSecond.ostw] Track when a player receives damage")
{
    event
    {
        Player Took Damage;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Event Damage > 0;
    }

    // Element Count: 74, Action Count: 15
    // Largest Action Index: 3 using 21 Elements
    actions
    {
        Event Player._extendedPlayerCollection[7] = Total Time Elapsed;
        Victim.damageReceivedEvents = Append To Array(Victim.damageReceivedEvents, Array(Array(Event Player._extendedPlayerCollection[7], Event Damage, Attacker, Victim)));
        Attacker.damageDealtEvents = Append To Array(Attacker.damageDealtEvents, Array(Array(Event Player._extendedPlayerCollection[7], Event Damage, Attacker, Victim)));
        If(Event Player._extendedPlayerCollection[7] < First Of(First Of(Victim.damageReceivedEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1));
            Victim.damageReceivedInPeriod += Event Damage;
            If(Attacker != Victim);
                Victim.damageReceivedInPeriodNonSelf += Event Damage;
            End;
        End;
        If(Event Player._extendedPlayerCollection[7] < First Of(First Of(Attacker.damageDealtEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1));
            Attacker.damageDealtInPeriod += Event Damage;
            If(Attacker != Victim);
                Attacker.damageDealtInPeriodNonSelf += Event Damage;
            End;
        End;
    }
}

// Rule Element Count: 315
rule("[lib/damagePerSecond.ostw] When the head of the damage received array has expired, remove all expired events")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 28, Condition Count: 2
    conditions
    {
        Count Of(Event Player.damageReceivedEvents) > 0;
        Update Every Frame(Total Time Elapsed) >= First Of(First Of(Event Player.damageReceivedEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25;
    }

    // Element Count: 286, Action Count: 24
    // Largest Action Index: 12 using 45 Elements
    actions
    {
        Event Player._extendedPlayerCollection[6] = First Of(First Of(Event Player.damageReceivedEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1);
        Event Player._extendedPlayerCollection[3] = 0;
        Event Player._extendedPlayerCollection[4] = Count Of(Event Player.damageReceivedEvents);
        "Remove expired events"
        While(First Of(Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25 < Total Time Elapsed && Event Player._extendedPlayerCollection[3] < Count Of(Event Player.damageReceivedEvents));
            Event Player.damageReceivedInPeriod = Max(0, Event Player.damageReceivedInPeriod - Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[3]][1]);
            If(Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[3]][3] != Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[3]][2]);
                Event Player.damageReceivedInPeriodNonSelf = Max(0, Event Player.damageReceivedInPeriodNonSelf - Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[3]][1]);
            End;
            Event Player._extendedPlayerCollection[3] += 1;
            Event Player._extendedPlayerCollection[4] -= 1;
        End;
        Event Player._extendedPlayerCollection[5] = Event Player._extendedPlayerCollection[3];
        "Add newly valid events"
        While(First Of(Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[5]]) < First Of(Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) && Event Player._extendedPlayerCollection[5] < Count Of(Event Player.damageReceivedEvents));
            "Make sure to only include NEWLY valid events"
            If(First Of(Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[5]]) >= Event Player._extendedPlayerCollection[6]);
                Event Player.damageReceivedInPeriod += Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[5]][1];
                If(Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[5]][2] != Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[5]][3]);
                    Event Player.damageReceivedInPeriodNonSelf += Event Player.damageReceivedEvents[Event Player._extendedPlayerCollection[5]][1];
                End;
            End;
            Event Player._extendedPlayerCollection[5] += 1;
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Event Player.damageReceivedEvents = Array Slice(Event Player.damageReceivedEvents, Event Player._extendedPlayerCollection[3], Event Player._extendedPlayerCollection[4]);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 315
rule("[lib/damagePerSecond.ostw] When the head of the damage dealt array has expired, remove all expired events")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 28, Condition Count: 2
    conditions
    {
        Count Of(Event Player.damageDealtEvents) > 0;
        Update Every Frame(Total Time Elapsed) >= First Of(First Of(Event Player.damageDealtEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25;
    }

    // Element Count: 286, Action Count: 24
    // Largest Action Index: 12 using 45 Elements
    actions
    {
        Event Player._extendedPlayerCollection[6] = First Of(First Of(Event Player.damageDealtEvents)) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1);
        Event Player._extendedPlayerCollection[3] = 0;
        Event Player._extendedPlayerCollection[4] = Count Of(Event Player.damageDealtEvents);
        "Remove expired events"
        While(First Of(Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) + 0.25 < Total Time Elapsed && Event Player._extendedPlayerCollection[3] < Count Of(Event Player.damageDealtEvents));
            Event Player.damageDealtInPeriod = Max(0, Event Player.damageDealtInPeriod - Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[3]][1]);
            If(Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[3]][3] != Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[3]][2]);
                Event Player.damageDealtInPeriodNonSelf = Max(0, Event Player.damageDealtInPeriodNonSelf - Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[3]][1]);
            End;
            Event Player._extendedPlayerCollection[3] += 1;
            Event Player._extendedPlayerCollection[4] -= 1;
        End;
        Event Player._extendedPlayerCollection[5] = Event Player._extendedPlayerCollection[3];
        "Add newly valid events"
        While(First Of(Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[5]]) < First Of(Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[3]]) + (Global.OptimizeMetricsForOverTime ? 0.384 : 1) && Event Player._extendedPlayerCollection[5] < Count Of(Event Player.damageDealtEvents));
            "Make sure to only include NEWLY valid events"
            If(First Of(Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[5]]) >= Event Player._extendedPlayerCollection[6]);
                Event Player.damageDealtInPeriod += Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[5]][1];
                If(Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[5]][2] != Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[5]][3]);
                    Event Player.damageDealtInPeriodNonSelf += Event Player.damageDealtEvents[Event Player._extendedPlayerCollection[5]][1];
                End;
            End;
            Event Player._extendedPlayerCollection[5] += 1;
        End;
        "Slice arrays instead of doing incremental updates for perf"
        Event Player.damageDealtEvents = Array Slice(Event Player.damageDealtEvents, Event Player._extendedPlayerCollection[3], Event Player._extendedPlayerCollection[4]);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 66
rule("[interface/information/statusEffects.ostw] Keep Status Effect button appearance up to date")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 13) == True;
    }

    // Element Count: 56, Action Count: 13
    // Largest Action Index: 6 using 8 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[17] = Custom String("Hide Status Effects");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[17] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 13), 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[17] = Custom String("Show Status Effects");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[17] = Color(Lime Green);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 58
rule("[interface/information/statusEffects.ostw] Sleep")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Asleep) == True;
    }

    // Element Count: 51, Action Count: 4
    // Largest Action Index: 3 using 37 Elements
    actions
    {
        Event Player.effectStartTimestamp[0] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Asleep), 99999);
        Event Player.effectDuration[0] = Total Time Elapsed - First Of(Event Player.effectStartTimestamp);
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Ana), Button(Ability 1)), Event Player, Custom String("ASLEEP")), Custom String(" for {0} secs ({1} ticks)", First Of(Event Player.effectDuration), Round To Integer(First Of(Event Player.effectDuration) / 0.016, To Nearest))));
    }
}

// Rule Element Count: 61
rule("[interface/information/statusEffects.ostw] Burning")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Burning) == True;
    }

    // Element Count: 54, Action Count: 4
    // Largest Action Index: 3 using 38 Elements
    actions
    {
        Event Player.effectStartTimestamp[1] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Burning), 99999);
        Event Player.effectDuration[1] = Total Time Elapsed - Event Player.effectStartTimestamp[1];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Icon String(Fire), Event Player, Custom String("BURNING")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[1], Round To Integer(Event Player.effectDuration[1] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 64
rule("[interface/information/statusEffects.ostw] Frozen")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Frozen) == True;
    }

    // Element Count: 57, Action Count: 4
    // Largest Action Index: 3 using 41 Elements
    actions
    {
        Event Player.effectStartTimestamp[2] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Frozen), 99999);
        Event Player.effectDuration[2] = Total Time Elapsed - Event Player.effectStartTimestamp[2];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Mei), Button(Ultimate)), Event Player, Custom String("FROZEN")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[2], Round To Integer(Event Player.effectDuration[2] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 64
rule("[interface/information/statusEffects.ostw] Hacked")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Hacked) == True;
    }

    // Element Count: 57, Action Count: 4
    // Largest Action Index: 3 using 41 Elements
    actions
    {
        Event Player.effectStartTimestamp[3] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Hacked), 99999);
        Event Player.effectDuration[3] = Total Time Elapsed - Event Player.effectStartTimestamp[3];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Sombra), Button(Ultimate)), Event Player, Custom String("HACKED")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[3], Round To Integer(Event Player.effectDuration[3] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 64
rule("[interface/information/statusEffects.ostw] Invincible")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Invincible) == True;
    }

    // Element Count: 57, Action Count: 4
    // Largest Action Index: 3 using 41 Elements
    actions
    {
        Event Player.effectStartTimestamp[4] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Invincible), 99999);
        Event Player.effectDuration[4] = Total Time Elapsed - Event Player.effectStartTimestamp[4];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Brigitte), Button(Secondary Fire)), Event Player, Custom String("INVINCIBLE")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[4], Round To Integer(Event Player.effectDuration[4] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 61
rule("[interface/information/statusEffects.ostw] Knocked Down")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Knocked Down) == True;
    }

    // Element Count: 54, Action Count: 4
    // Largest Action Index: 3 using 38 Elements
    actions
    {
        Event Player.effectStartTimestamp[5] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Knocked Down), 99999);
        Event Player.effectDuration[5] = Total Time Elapsed - Event Player.effectStartTimestamp[5];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Icon String(Arrow: Down), Event Player, Custom String("KNOCKED DOWN")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[5], Round To Integer(Event Player.effectDuration[5] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 101
rule("[interface/information/statusEffects.ostw] Phased Out")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Phased Out) == True;
    }

    // Element Count: 94, Action Count: 6
    // Largest Action Index: 5 using 47 Elements
    actions
    {
        "This needs to be handled differently because spawn room gives phased out, as does opening menu"
        Abort If(Event Player.currentMenuState != 0 || Is In Spawn Room(Event Player));
        Event Player.effectStartTimestamp[6] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Phased Out) || Event Player.currentMenuState != 0 || Is In Spawn Room(Event Player), 99999);
        "If the player entered the spawn room or entered the menu, don't print a message"
        Abort If(Event Player.currentMenuState != 0 || Is In Spawn Room(Event Player));
        Event Player.effectDuration[6] = Total Time Elapsed - Event Player.effectStartTimestamp[6];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Reaper), Button(Ability 1)), Event Player, Custom String("PHASED OUT")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[6] + 0.016, Round To Integer(Event Player.effectDuration[6] * 62.5 + 1, To Nearest))));
    }
}

// Rule Element Count: 64
rule("[interface/information/statusEffects.ostw] Rooted")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Rooted) == True;
    }

    // Element Count: 57, Action Count: 4
    // Largest Action Index: 3 using 41 Elements
    actions
    {
        Event Player.effectStartTimestamp[7] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Rooted), 99999);
        Event Player.effectDuration[7] = Total Time Elapsed - Event Player.effectStartTimestamp[7];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Junkrat), Button(Ability 2)), Event Player, Custom String("ROOTED")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[7], Round To Integer(Event Player.effectDuration[7] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 61
rule("[interface/information/statusEffects.ostw] Stunned")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Stunned) == True;
    }

    // Element Count: 54, Action Count: 4
    // Largest Action Index: 3 using 38 Elements
    actions
    {
        Event Player.effectStartTimestamp[8] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Stunned), 99999);
        Event Player.effectDuration[8] = Total Time Elapsed - Event Player.effectStartTimestamp[8];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Icon String(Dizzy), Event Player, Custom String("STUNNED")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[8], Round To Integer(Event Player.effectDuration[8] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 64
rule("[interface/information/statusEffects.ostw] Unkillable")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Has Status(Event Player, Unkillable) == True;
    }

    // Element Count: 57, Action Count: 4
    // Largest Action Index: 3 using 41 Elements
    actions
    {
        Event Player.effectStartTimestamp[9] = Total Time Elapsed;
        Wait Until(!Has Status(Event Player, Unkillable), 99999);
        Event Player.effectDuration[9] = Total Time Elapsed - Event Player.effectStartTimestamp[9];
        Small Message(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 13)), Custom String("{0}{1}", Custom String(" {0} {1} had status {2}", Ability Icon String(Hero(Baptiste), Button(Ability 2)), Event Player, Custom String("UNKILLABLE")), Custom String(" for {0} secs ({1} ticks)", Event Player.effectDuration[9], Round To Integer(Event Player.effectDuration[9] / 0.016, To Nearest))));
    }
}

// Rule Element Count: 66
rule("[interface/information/damageNumbers.ostw] Update Information Menu button appearance for damage/heal numbers")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 9, Condition Count: 1
    conditions
    {
        Array Contains(Event Player.activeInfoDisplays, 16) == True;
    }

    // Element Count: 56, Action Count: 13
    // Largest Action Index: 6 using 8 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[22] = Custom String("Hide Damage/Heal Numbers");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[22] = Color(Gray);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
        Wait Until(!Array Contains(Event Player.activeInfoDisplays, 16), 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[3];
        Global._arrayConstructor[22] = Custom String("Show Damage/Heal Numbers");
        Event Player.ButtonLabelGrid[3] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[3];
        Global._arrayConstructor[22] = Color(Blue);
        Event Player.ButtonColorGrid[3] = Global._arrayConstructor;
    }
}

// Rule Element Count: 156
rule("[interface/information/damageNumbers.ostw] When player takes damage, create the text if necessary and update values")
{
    event
    {
        Player Took Damage;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Event Damage > 0;
    }

    // Element Count: 150, Action Count: 16
    // Largest Action Index: 6 using 54 Elements
    actions
    {
        Event Player._extendedPlayerCollection[11] = Event Damage;
        Event Player._extendedPlayerCollection[12] = Position Of(Event Player);
        "If we don't have any active cumulative damage number, reset and create it"
        If(Event Player._extendedPlayerCollection[8] == -1);
            Event Player._extendedPlayerCollection[10] = Event Damage;
            Create In-World Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 16)), Custom String("-{0}{1}", Event Player._extendedPlayerCollection[10], Event Player._extendedPlayerCollection[13] != -1 ? Custom String("    ") : Custom String("")), Update Every Frame(Position Of(Event Player)) + Vector(0, 4, 0), 4, Do Not Clip, Visible To Position and String, Custom Color(200, 50, 50, 255), Default Visibility);
            Event Player._extendedPlayerCollection[8] = Last Text ID;
            Create In-World Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 16)), Custom String("-{0}{1}", Event Player._extendedPlayerCollection[11], Event Player._extendedPlayerCollection[13] != -1 ? Custom String("    ") : Custom String("")), Event Player._extendedPlayerCollection[12] + Vector(0, 3, 0), 2, Do Not Clip, Visible To Position and String, Custom Color(200, 50, 50, 255), Default Visibility);
            Event Player._extendedPlayerCollection[9] = Last Text ID;
        Else;
            Event Player._extendedPlayerCollection[10] += Event Damage;
        End;
        Wait(3, Restart When True);
        Destroy In-World Text(Event Player._extendedPlayerCollection[8]);
        Destroy In-World Text(Event Player._extendedPlayerCollection[9]);
        Event Player._extendedPlayerCollection[8] = -1;
        Event Player._extendedPlayerCollection[9] = -1;
    }
}

// Rule Element Count: 142
rule("[interface/information/damageNumbers.ostw] When player received healing, create the text if necessary and update values")
{
    event
    {
        Player Received Healing;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Event Healing > 0;
    }

    // Element Count: 136, Action Count: 16
    // Largest Action Index: 6 using 47 Elements
    actions
    {
        Event Player._extendedPlayerCollection[16] = Event Healing;
        Event Player._extendedPlayerCollection[17] = Position Of(Event Player);
        "If we don't have any active damage number, reset and create it"
        If(Event Player._extendedPlayerCollection[13] == -1);
            Event Player._extendedPlayerCollection[15] = Event Healing;
            Create In-World Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 16)), Custom String("{0}+{1}", Event Player._extendedPlayerCollection[8] != -1 ? Custom String("    ") : Custom String(""), Event Player._extendedPlayerCollection[15]), Update Every Frame(Position Of(Event Player)) + Vector(0, 4, 0), 4, Do Not Clip, Visible To Position and String, Color(Yellow), Default Visibility);
            Event Player._extendedPlayerCollection[13] = Last Text ID;
            Create In-World Text(Filtered Array(All Players(All Teams), Array Contains(Current Array Element.activeInfoDisplays, 16)), Custom String("{0}+{1}", Event Player._extendedPlayerCollection[8] != -1 ? Custom String("    ") : Custom String(""), Event Player._extendedPlayerCollection[16]), Event Player._extendedPlayerCollection[17] + Vector(0, 3, 0), 1.5, Do Not Clip, Visible To Position and String, Color(Yellow), Default Visibility);
            Event Player._extendedPlayerCollection[14] = Last Text ID;
        Else;
            Event Player._extendedPlayerCollection[15] += Event Healing;
        End;
        Wait(3, Restart When True);
        Destroy In-World Text(Event Player._extendedPlayerCollection[13]);
        Destroy In-World Text(Event Player._extendedPlayerCollection[14]);
        Event Player._extendedPlayerCollection[13] = -1;
        Event Player._extendedPlayerCollection[14] = -1;
    }
}

// Rule Element Count: 64
rule("[interface/modifications/modsMenu.ostw] Update faster abilities button appearance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[1] == True;
    }

    // Element Count: 55, Action Count: 13
    // Largest Action Index: 6 using 7 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[6] = Custom String("Faster Abilities [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[6] = Color(Blue);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[1], 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[6] = Custom String("Faster Abilities [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[6] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 68
rule("[interface/modifications/modsMenu.ostw] Handle reduced damage taken")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[2] == True;
    }

    // Element Count: 59, Action Count: 15
    // Largest Action Index: 7 using 7 Elements
    actions
    {
        Set Damage Received(Event Player, 10);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[11] = Custom String("Reduced Damage Taken [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[11] = Color(Orange);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[2], 99999);
        Set Damage Received(Event Player, 100);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[11] = Custom String("Reduced Damage Taken [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[11] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 68
rule("[interface/modifications/modsMenu.ostw] Handle increased damage dealt")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[3] == True;
    }

    // Element Count: 59, Action Count: 15
    // Largest Action Index: 7 using 7 Elements
    actions
    {
        Set Damage Dealt(Event Player, 300);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[8] = Custom String("Increased Damage Dealt [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[8] = Color(Rose);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[3], 99999);
        Set Damage Dealt(Event Player, 100);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[8] = Custom String("Increased Damage Dealt [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[8] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 64
rule("[interface/modifications/modsMenu.ostw] Handle auto-regen health")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[4] == True;
    }

    // Element Count: 55, Action Count: 13
    // Largest Action Index: 6 using 7 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[16] = Custom String("Auto-Regen Health [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[16] = Color(Red);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[4], 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[16] = Custom String("Auto-Regen Health [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[16] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 21
rule("[interface/modifications/modsMenu.ostw] When player takes damage, and they avoid damage for 5 seconds, fill health")
{
    event
    {
        Player Took Damage;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[4] == True;
    }

    // Element Count: 12, Action Count: 2
    // Largest Action Index: 0 using 10 Elements
    actions
    {
        Wait(Workshop Setting Integer(Custom String("4. Mod Settings"), Custom String("Auto-Regen Delay"), 5, 1, 20, 0), Restart When True);
        Set Player Health(Event Player, Max Health(Event Player));
    }
}

// Rule Element Count: 64
rule("[interface/modifications/modsMenu.ostw] Handle faster respawn button appearance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[5] == True;
    }

    // Element Count: 55, Action Count: 13
    // Largest Action Index: 6 using 7 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[13] = Custom String("Faster Respawn [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[13] = Color(Aqua);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[5], 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[13] = Custom String("Faster Respawn [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[13] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 15
rule("[interface/modifications/modsMenu.ostw] Make respawn happen faster if enabled")
{
    event
    {
        Player Died;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[5] == True;
    }

    // Element Count: 6, Action Count: 3
    // Largest Action Index: 0 using 3 Elements
    actions
    {
        Wait Until(Is Alive(Event Player), 3);
        Abort If(Is Alive(Event Player));
        Respawn(Event Player);
    }
}

// Rule Element Count: 80
rule("[interface/modifications/modsMenu.ostw] Handle disable mode completion button appearance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[6] == True;
    }

    // Element Count: 71, Action Count: 13
    // Largest Action Index: 0 using 8 Elements
    actions
    {
        Global._arrayConstructor = All Players(All Teams).ButtonLabelGrid[4];
        Global._arrayConstructor[18] = Custom String("Disable Mode Completion [ON]");
        All Players(All Teams).ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = All Players(All Teams).ButtonColorGrid[4];
        Global._arrayConstructor[18] = Color(Sky Blue);
        All Players(All Teams).ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[6], 99999);
        Global._arrayConstructor = All Players(All Teams).ButtonLabelGrid[4];
        Global._arrayConstructor[18] = Custom String("Disable Mode Completion [OFF]");
        All Players(All Teams).ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = All Players(All Teams).ButtonColorGrid[4];
        Global._arrayConstructor[18] = Color(Gray);
        All Players(All Teams).ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 18
rule("[interface/modifications/modsMenu.ostw] Handle disable mode completion")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[6] == True;
    }

    // Element Count: 9, Action Count: 3
    // Largest Action Index: 1 using 7 Elements
    actions
    {
        Disable Built-In Game Mode Completion;
        Wait Until(!Global.activeModifications[6], 99999);
        Enable Built-In Game Mode Completion;
    }
}

// Rule Element Count: 64
rule("[interface/modifications/modsMenu.ostw] Handle slow motion button appearanace")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[7] == True;
    }

    // Element Count: 55, Action Count: 13
    // Largest Action Index: 6 using 7 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[12] = Custom String("Slow Motion [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[12] = Color(Violet);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[7], 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[12] = Custom String("Slow Motion [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[12] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 20
rule("[interface/modifications/modsMenu.ostw] Handle slow motion")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[7] == True;
    }

    // Element Count: 11, Action Count: 3
    // Largest Action Index: 1 using 7 Elements
    actions
    {
        Set Slow Motion(30);
        Wait Until(!Global.activeModifications[7], 99999);
        Set Slow Motion(100);
    }
}

// Rule Element Count: 64
rule("[interface/modifications/modsMenu.ostw] Handle disable self-heal passive button appearance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 8, Condition Count: 1
    conditions
    {
        Global.activeModifications[8] == True;
    }

    // Element Count: 55, Action Count: 13
    // Largest Action Index: 6 using 7 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[17] = Custom String("Self-Heal Passive [OFF]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[17] = Color(Gray);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
        Wait Until(!Global.activeModifications[8], 99999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[4];
        Global._arrayConstructor[17] = Custom String("Self-Heal Passive [ON]");
        Event Player.ButtonLabelGrid[4] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[4];
        Global._arrayConstructor[17] = Color(Yellow);
        Event Player.ButtonColorGrid[4] = Global._arrayConstructor;
    }
}

// Rule Element Count: 56
rule("[interface/modifications/modsMenu.ostw] Handle preventing heal passive")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Normalized Health(Event Player) < 1;
    }

    // Element Count: 49, Action Count: 8
    // Largest Action Index: 0 using 24 Elements
    actions
    {
        Wait(Array Contains(All Support Heroes, Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) ? 2.45 : (Max Health Of Type(Event Player, Shields) > 0 ? 2.95 : 4.95), Abort When False);
        Loop If(!Global.activeModifications[8] && !Event Player.isPunchingBag);
        If(Health(Event Player) <= 0.001);
            Set Player Health(Event Player, 0.002);
        End;
        Damage(Event Player, Null, 0.001);
        Heal(Event Player, Null, 0.001);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 20
rule("[interface/modifications/fasterAbilities.ostw] Ultimate")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ultimate Charge Percent(Event Player) < 100;
    }

    // Element Count: 5, Action Count: 3
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Set Ultimate Charge(Event Player, 100);
        Wait(0.5, Abort When False);
        Loop;
    }
}

// Rule Element Count: 20
rule("[interface/modifications/fasterAbilities.ostw] Primary fire cooldown")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ability Cooldown(Event Player, Button(Primary Fire)) > 0;
    }

    // Element Count: 3, Action Count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Primary Fire), 1);
    }
}

// Rule Element Count: 34
rule("[interface/modifications/fasterAbilities.ostw] Primary fire: Refill Moira Biotic Energy")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 3
    conditions
    {
        Global.activeModifications[1] == True;
        (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(Moira);
        Ability Resource(Event Player, Button(Primary Fire)) < 95;
    }

    // Element Count: 6, Action Count: 3
    // Largest Action Index: 0 using 3 Elements
    actions
    {
        "Don't fill all the way because that makes the meter disappear"
        Set Ability Resource(Event Player, Button(Primary Fire), 95);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 20
rule("[interface/modifications/fasterAbilities.ostw] Secondary fire cooldown")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ability Cooldown(Event Player, Button(Secondary Fire)) > 0;
    }

    // Element Count: 3, Action Count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 1);
    }
}

// Rule Element Count: 34
rule("[interface/modifications/fasterCooldown.ostw] Secondary fire: Refill D.Va defense matrix")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 3
    conditions
    {
        Global.activeModifications[1] == True;
        (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(D.Va);
        Ability Resource(Event Player, Button(Secondary Fire)) < 100;
    }

    // Element Count: 6, Action Count: 3
    // Largest Action Index: 0 using 3 Elements
    actions
    {
        Set Ability Resource(Event Player, Button(Secondary Fire), 100);
        Wait(0.25, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 45
rule("[interface/modifications/fasterAbilities.ostw] Ability 1 cooldown")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ability Cooldown(Event Player, Button(Ability 1)) > 0;
    }

    // Element Count: 28, Action Count: 5
    // Largest Action Index: 0 using 16 Elements
    actions
    {
        If(Array Contains(Array(Hero(Roadhog), Hero(Ashe), Hero(Genji)), Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)));
            Wait Until(!Is Using Ability 1(Event Player), Ability Cooldown(Event Player, Button(Ability 1)));
        End;
        Wait(0.016, Ignore Condition);
        Set Ability Cooldown(Event Player, Button(Ability 1), 1);
    }
}

// Rule Element Count: 45
rule("[interface/modifications/fasterAbilities.ostw] Zarya/Junkrat - 2 Ability 1 charges")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 33, Condition Count: 3
    conditions
    {
        Global.activeModifications[1] == True;
        Array Contains(Array(Hero(Zarya), Hero(Junkrat)), Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == True;
        Ability Charge(Event Player, Button(Ability 1)) < 2;
    }

    // Element Count: 11, Action Count: 3
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 1), Ability Charge(Event Player, Button(Ability 1)) + 1);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 45
rule("[interface/modifications/fasterAbilities.ostw] Symmetra/Tracer - 3 Ability 1 charges")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 33, Condition Count: 3
    conditions
    {
        Global.activeModifications[1] == True;
        Array Contains(Array(Hero(Tracer), Hero(Symmetra)), Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == True;
        Ability Charge(Event Player, Button(Ability 1)) < 3;
    }

    // Element Count: 11, Action Count: 3
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 1), Ability Charge(Event Player, Button(Ability 1)) + 1);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 43
rule("[interface/modifications/fasterAbilities.ostw] Ability 2 cooldown")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ability Cooldown(Event Player, Button(Ability 2)) > 0;
    }

    // Element Count: 26, Action Count: 5
    // Largest Action Index: 0 using 14 Elements
    actions
    {
        If(Array Contains(Array(Hero(D.Va), Hero(Reaper)), Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)));
            Wait Until(!Is Using Ability 2(Event Player), Ability Cooldown(Event Player, Button(Ability 2)));
        End;
        Wait(0.016, Ignore Condition);
        Set Ability Cooldown(Event Player, Button(Ability 2), 1);
    }
}

// Rule Element Count: 39
rule("[interface/modifications/fasterAbilities.ostw] Reinhardt - 2 Ability 2 charges")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 3
    conditions
    {
        Global.activeModifications[1] == True;
        (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(Reinhardt);
        Ability Charge(Event Player, Button(Ability 2)) < 2;
    }

    // Element Count: 11, Action Count: 3
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 2), Ability Charge(Event Player, Button(Ability 2)) + 1);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 39
rule("[interface/modifications/fasterAbilities.ostw] Brigitte - 3 Ability 2 charges")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 3
    conditions
    {
        Global.activeModifications[1] == True;
        (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(Brigitte);
        Ability Charge(Event Player, Button(Ability 2)) < 3;
    }

    // Element Count: 11, Action Count: 3
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Wait(1, Abort When False);
        Set Ability Charge(Event Player, Button(Ability 2), Ability Charge(Event Player, Button(Ability 2)) + 1);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 36
rule("[interface/modifications/fasterAbilities.ostw] Doomfist - charge block instantly")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 32, Condition Count: 4
    conditions
    {
        Global.activeModifications[1] == True;
        (Is Duplicating(Event Player) ? Hero Being Duplicated(Event Player) : Hero Of(Event Player)) == Hero(Doomfist);
        Is Using Ability 2(Event Player) == True;
        Ability Resource(Event Player, Button(Ability 2)) < 100;
    }

    // Element Count: 3, Action Count: 1
    actions
    {
        Set Ability Resource(Event Player, Button(Ability 2), 100);
    }
}

// Rule Element Count: 20
rule("[interface/modifications/fasterAbilities.ostw] Crouch cooldown")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ability Cooldown(Event Player, Button(Crouch)) > 0;
    }

    // Element Count: 3, Action Count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Crouch), 1);
    }
}

// Rule Element Count: 20
rule("[interface/modifications/fasterAbilities.ostw] Jump cooldown")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Global.activeModifications[1] == True;
        Ability Cooldown(Event Player, Button(Jump)) > 0;
    }

    // Element Count: 3, Action Count: 1
    actions
    {
        Set Ability Cooldown(Event Player, Button(Jump), 1);
    }
}

// Rule Element Count: 70
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Start/stop editing bots")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 3;
    }

    // Element Count: 62, Action Count: 23
    // Largest Action Index: 0 using 7 Elements
    actions
    {
        If(Event Player.botControlMode == 0);
            Global._arrayConstructor = Event Player.ButtonLabelGrid[6];
            Global._arrayConstructor[12] = Custom String("Stop Editing Bots");
            Event Player.ButtonLabelGrid[6] = Global._arrayConstructor;
            Event Player.botControlMode = 1;
            If(!Event Player.isNoClipActive);
                Event Player.toolsActionID = 3;
                Wait(0.016, Ignore Condition);
                Event Player.toolsActionID = 0;
            End;
        Else;
            Global._arrayConstructor = Event Player.ButtonLabelGrid[6];
            Global._arrayConstructor[12] = Custom String("Edit Dummy Bots");
            Event Player.ButtonLabelGrid[6] = Global._arrayConstructor;
            Event Player.botControlMode = 0;
            If(Event Player.isNoClipActive);
                Event Player.toolsActionID = 3;
                Wait(0.016, Ignore Condition);
                Event Player.toolsActionID = 0;
            End;
        End;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 30
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Create dummy bot")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 1;
    }

    // Element Count: 22, Action Count: 1
    actions
    {
        Create Dummy Bot(Hero Of(Event Player), Opposite Team Of(Team Of(Event Player)), -1, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 10, Null, Null, False), -1 * Facing Direction Of(Event Player));
    }
}

// Rule Element Count: 35
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Create punching bag")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 2;
    }

    // Element Count: 27, Action Count: 4
    // Largest Action Index: 0 using 22 Elements
    actions
    {
        Create Dummy Bot(Hero Of(Event Player), Opposite Team Of(Team Of(Event Player)), -1, Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 10, Null, Null, False), -1 * Facing Direction Of(Event Player));
        Last Created Entity.isPunchingBag = True;
        Add Health Pool To Player(Last Created Entity, Health, 1250, True, False);
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Punching Bag"));
    }
}

// Rule Element Count: 47
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Initiator perspective for resetting all bots to reset points")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 4;
    }

    // Element Count: 39, Action Count: 8
    // Largest Action Index: 1 using 25 Elements
    actions
    {
        Big Message(All Players(All Teams), Custom String("Reset all bots to their reset points"));
        If(Is True For Any(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), First Of(Current Array Element.replayResetPoint) == Null && First Of(Current Array Element._extendedPlayerCollection[2]) == Null));
            Small Message(Event Player, Custom String("  Some bots do not have reset points set!"));
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Wait(0.25, Ignore Condition);
            Small Message(Event Player, Custom String("  Teleporting those bots to you..."));
            Abort;
        End;
    }
}

// Rule Element Count: 184
rule("[interface/dummyBotsAndReplay/botEditPage.del] Handle resetting all bots to their reset points")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 23, Condition Count: 2
    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Is True For Any(Filtered Array(All Players(All Teams), !Is Dummy Bot(Current Array Element)), Current Array Element.selectedBotsReplayAction == 4) == True;
    }

    // Element Count: 160, Action Count: 36
    // Largest Action Index: 22 using 17 Elements
    actions
    {
        Stop Forcing Player To Be Hero(Event Player);
        Respawn(Event Player);
        Start Forcing Player To Be Hero(Event Player, Event Player.recordingHero);
        Wait Until(Is Alive(Event Player), 1);
        If(First Of(Event Player.replayResetPoint) != Null);
            Teleport(Event Player, First Of(Event Player.replayResetPoint));
            Stop Facing(Event Player);
            Wait(0.016, Ignore Condition);
            Set Facing(Event Player, Event Player.replayResetPoint[2], To World);
            "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
            Wait(0.032, Ignore Condition);
            Start Facing(Event Player, Event Player.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
            Wait(0.016, Ignore Condition);
            Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player.replayResetPoint[2]) < 0.1, 0.25);
            Stop Facing(Event Player);
        Else If(First Of(Event Player._extendedPlayerCollection[2]) != Null);
            Teleport(Event Player, First Of(Event Player._extendedPlayerCollection[2]));
            Stop Facing(Event Player);
            Wait(0.016, Ignore Condition);
            Set Facing(Event Player, Event Player._extendedPlayerCollection[2][2], To World);
            "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
            Wait(0.032, Ignore Condition);
            Start Facing(Event Player, Event Player._extendedPlayerCollection[2][2], 1000, To World, Direction And Turn Rate);
            Wait(0.016, Ignore Condition);
            Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player._extendedPlayerCollection[2][2]) < 0.1, 0.25);
            Stop Facing(Event Player);
        Else;
            Teleport(Event Player, First Of(Filtered Array(All Players(All Teams), !Is Dummy Bot(Current Array Element) && Current Array Element.selectedBotsReplayAction == 4)));
        End;
        If(Altitude Of(Event Player) > 1);
            Set Gravity(Event Player, 0);
            Wait(0.016, Ignore Condition);
            If(Speed Of(Event Player) > 0.05);
                Apply Impulse(Event Player, Velocity Of(Event Player) * -1, Speed Of(Event Player), To World, Incorporate Contrary Motion);
            End;
        Else;
            Set Gravity(Event Player, 100);
        End;
    }
}

// Rule Element Count: 84
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Update Play/Stop All Replays button appearance")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 17, Condition Count: 1
    conditions
    {
        Is True For Any(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), Current Array Element.replayState == 2) == True;
    }

    // Element Count: 66, Action Count: 13
    // Largest Action Index: 6 using 18 Elements
    actions
    {
        Global._arrayConstructor = Event Player.ButtonLabelGrid[6];
        Global._arrayConstructor[11] = Custom String("Stop All Replays");
        Event Player.ButtonLabelGrid[6] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[6];
        Global._arrayConstructor[11] = Color(Red);
        Event Player.ButtonColorGrid[6] = Global._arrayConstructor;
        Wait Until(Is True For Any(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), Current Array Element.replayState == 2) == False, 9999);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[6];
        Global._arrayConstructor[11] = Custom String("Play All Replays");
        Event Player.ButtonLabelGrid[6] = Global._arrayConstructor;
        Global._arrayConstructor = Event Player.ButtonColorGrid[6];
        Global._arrayConstructor[11] = Color(Lime Green);
        Event Player.ButtonColorGrid[6] = Global._arrayConstructor;
    }
}

// Rule Element Count: 67
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Play all replays")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 6;
    }

    // Element Count: 59, Action Count: 12
    // Largest Action Index: 0 using 19 Elements
    actions
    {
        If(Count Of(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0)) == 0);
            Small Message(Event Player, Custom String("  No replays recorded yet!"));
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Abort;
        End;
        If(Is True For Any(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)), Current Array Element.replayState == 2));
            Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)).recordingPlayStopFlag = 2;
            Abort;
        End;
        Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)).recordingPlayStopFlag = 1;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 40
rule("[interface/dummyBotsAndReplay/botsMenu.ostw] Delete all replays")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 7;
    }

    // Element Count: 32, Action Count: 6
    // Largest Action Index: 0 using 19 Elements
    actions
    {
        If(Count Of(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0)) == 0);
            Big Message(Event Player, Custom String("  No replays recorded yet!"));
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Abort;
        End;
        Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element)).recordingPlayStopFlag = 3;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBots/botsMenu.ostw] Destroy all bots")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotsReplayAction == 5;
    }

    // Element Count: 9, Action Count: 4
    // Largest Action Index: 3 using 4 Elements
    actions
    {
        Destroy All Dummy Bots;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
        Big Message(All Players(All Teams), Custom String("All Dummy Bots Destroyed"));
    }
}

// Rule Element Count: 25
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Maintain punching bag health")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 16, Condition Count: 2
    conditions
    {
        Event Player.isPunchingBag == True;
        Absolute Value(Normalized Health(Event Player) - Global.punchingBagTargetHealthProportio) > 0.075;
    }

    // Element Count: 8, Action Count: 3
    // Largest Action Index: 0 using 5 Elements
    actions
    {
        Set Player Health(Event Player, Global.punchingBagTargetHealthProportio * Max Health(Event Player));
        Wait(1, Abort When False);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 145
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] When entering edit mode, add locks to used buttons")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.botControlMode == 1;
    }

    // Element Count: 137, Action Count: 19
    // Largest Action Index: 7 using 19 Elements
    actions
    {
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] += 1;
        Disallow Button(Event Player, Button(Primary Fire));
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] += 1;
        Disallow Button(Event Player, Button(Secondary Fire));
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Reload))] += 1;
        Disallow Button(Event Player, Button(Reload));
        Wait Until(Event Player.botControlMode != 1, 1000000);
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] == 0);
            Allow Button(Event Player, Button(Primary Fire));
        End;
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] == 0);
            Allow Button(Event Player, Button(Secondary Fire));
        End;
        Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Reload))] = Max(0, Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Reload))] - 1);
        If(Event Player.buttonLocks[Index Of Array Value(Global.AllButtons, Button(Reload))] == 0);
            Allow Button(Event Player, Button(Reload));
        End;
    }
}

// Rule Element Count: 359
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Handle left-click")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 3
    conditions
    {
        Is Dummy Bot(Event Player) == False;
        Event Player.botControlMode == 1;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Element Count: 339, Action Count: 29
    // Largest Action Index: 1 using 75 Elements
    actions
    {
        Abort If(!(Has Spawned(Event Player) && Is Alive(Event Player) && Event Player.currentMenuState == 0));
        Event Player.selectedControl = First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * Distance Between(Eye Position(Event Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), Current Array Element[2]))));
        Abort If(Event Player.selectedControl[1] == 0);
        If(Array Contains(Mapped Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Current Array Element[1]), Event Player.selectedControl[1]));
            "Check if the bot is currently pinned to a position"
            If(First Of(First Of(Event Player.selectedControl).pinnedPosition) != Null);
                Small Message(Event Player, Custom String("  This bot is pinned to its current location, unpin it first."));
                Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
                Abort;
            End;
            "If a bot got selected, move it"
            Event Player.selectionSetDistance = Distance Between(Eye Position(Event Player), First Of(Event Player.selectedControl));
            Start Forcing Player Position(First Of(Event Player.selectedControl), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * Event Player.selectionSetDistance, Null, Null, False)), True);
            Wait Until(!(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.botControlMode == 1), 1000000);
            If(Altitude Of(First Of(Event Player.selectedControl)) > 1);
                Set Gravity(First Of(Event Player.selectedControl), 0);
                Wait(0.016, Ignore Condition);
                If(Speed Of(First Of(Event Player.selectedControl)) > 0.05);
                    Apply Impulse(First Of(Event Player.selectedControl), Velocity Of(Event Player) * -1, 0.01, To World, Cancel Contrary Motion XYZ);
                End;
            Else;
                Set Gravity(First Of(Event Player.selectedControl), 100);
            End;
            Stop Forcing Player Position(First Of(Event Player.selectedControl));
        Else If(Array Contains(Mapped Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl), Current Array Element[1]), Event Player.selectedControl[1]));
            "If a bot's facing got selected, rotate it"
            Start Facing(First Of(Event Player.selectedControl), Update Every Frame(Direction Towards(Eye Position(First Of(Event Player.selectedControl)), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * Evaluate Once(Distance Between(Eye Position(Event Player), Event Player.selectedControl[2])), Null, Null, False))), 999999, To World, Direction And Turn Rate);
            Wait Until(!(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.botControlMode == 1), 1000000);
            Event Player.selectedControl[2] = Ray Cast Hit Position(Eye Position(First Of(Event Player.selectedControl)), Eye Position(First Of(Event Player.selectedControl)) + Facing Direction Of(First Of(Event Player.selectedControl)) * 5, Null, Null, False);
            Stop Facing(First Of(Event Player.selectedControl));
        End;
        Event Player.selectedControl = Null;
    }
}

// Rule Element Count: 141
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Handle right-click")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 19, Condition Count: 3
    conditions
    {
        Is Dummy Bot(Event Player) == False;
        Event Player.botControlMode == 1;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }

    // Element Count: 121, Action Count: 9
    // Largest Action Index: 1 using 75 Elements
    actions
    {
        Abort If(!(Has Spawned(Event Player) && Is Alive(Event Player) && Event Player.currentMenuState == 0));
        Event Player.selectedControl = First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Event Player) + Facing Direction Of(Event Player) * Distance Between(Eye Position(Event Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), Current Array Element[2]))));
        If(Event Player.selectedControl[1] == 0 || Event Player.selectedControl[3] != 1);
            Event Player.selectedControl = Null;
            Abort;
        End;
        Event Player.selectedBot = First Of(Event Player.selectedControl);
        "Prevent menu logic running later in the tick from assuming we meant to close the menu
due to the menu state being open and a secondary fire input being detected"
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 7;
    }
}

// Rule Element Count: 8
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] When a player joins, update the number of hero-skin combos remaining")
{
    event
    {
        Player Joined Match;
        All;
        All;
    }

    // Element Count: 7, Action Count: 1
    actions
    {
        Global.uniqueHeroSkinCombosRemaining = 12 - Count Of(All Players(All Teams));
    }
}

// Rule Element Count: 8
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] When a player leaves, update the number of hero-skin combos remaining")
{
    event
    {
        Player Left Match;
        All;
        All;
    }

    // Element Count: 7, Action Count: 1
    actions
    {
        Global.uniqueHeroSkinCombosRemaining = 12 - Count Of(All Players(All Teams));
    }
}

// Rule Element Count: 247
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Initialize selection entities for dummy bots")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 10, Condition Count: 2
    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Has Spawned(Event Player) == True;
    }

    // Element Count: 236, Action Count: 5
    // Largest Action Index: 2 using 157 Elements
    actions
    {
        Event Player.positionControl = Array(Event Player, Global.nextSelectionEntityId, Position Of(Event Player) + Up, 1);
        Event Player.facingControl = Array(Event Player, Global.nextSelectionEntityId + 1, Eye Position(Event Player) + Facing Direction Of(Event Player) * 5, 2);
        "Create the facing location control orb"
        Create Effect(Array Contains(All Players(All Teams), Local Player) && Is Dummy Bot(First Of(Event Player.positionControl)) && First Of(Event Player.positionControl).replayState == 0 && Local Player.botControlMode == 1 ? Local Player : Null, Sphere, First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Local Player) + Facing Direction Of(Local Player) * Distance Between(Eye Position(Local Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Current Array Element[2]))))[1] == Evaluate Once(Global.nextSelectionEntityId + 1) ? Color(Orange) : Color(Yellow), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 5, Null, Null, False)), Local Player.selectedControl[1] == Evaluate Once(Global.nextSelectionEntityId + 1) ? 0.1 : 0.25, Visible To Position and Radius);
        Create Beam Effect(Array Contains(All Players(All Teams), Local Player) && Is Dummy Bot(First Of(Event Player.facingControl)) && First Of(Event Player.facingControl).replayState == 0 && Local Player.botControlMode == 1 ? Local Player : Null, Grapple Beam, Eye Position(Event Player), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 5, Null, Null, False)), Null, Visible To Position and Radius);
        Global.nextSelectionEntityId += 2;
    }
}

// Rule Element Count: 509
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Create effects on closest selection entity")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 508, Action Count: 3
    // Largest Action Index: 2 using 293 Elements
    actions
    {
        Create Effect(Array Contains(All Players(All Teams), Local Player) && Local Player.botControlMode == 1 && !(Is Button Held(Local Player, Button(Primary Fire)) && First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Local Player) + Facing Direction Of(Local Player) * Distance Between(Eye Position(Local Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Current Array Element[2]))))[1] != 0) ? Local Player : Null, Sphere, Color(Blue), First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Local Player) + Facing Direction Of(Local Player) * Distance Between(Eye Position(Local Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Current Array Element[2]))))[2], 0.25, Visible To Position and Radius);
        Create HUD Text(Array Contains(All Players(All Teams), Local Player) && Local Player.botControlMode == 1 ? Local Player : Null, Null, Null, Custom String("Editing Bots"), Top, 10, Color(White), Color(White), Custom Color(X Component Of(Global.rainbowVector), Y Component Of(Global.rainbowVector), Z Component Of(Global.rainbowVector), 255), Visible To String and Color, Default Visibility);
        Create In-World Text(Array Contains(All Players(All Teams), Local Player) && Local Player.botControlMode == 1 && Local Player.currentMenuState == 0 && Local Player.selectedControl[1] == 0 && First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Local Player) + Facing Direction Of(Local Player) * Distance Between(Eye Position(Local Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Current Array Element[2]))))[1] != 0 ? Local Player : Null, Custom String("{0} | Drag{1}", Input Binding String(Button(Primary Fire)), First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Local Player) + Facing Direction Of(Local Player) * Distance Between(Eye Position(Local Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Current Array Element[2]))))[3] == 1 ? Custom String("\n{0} | Edit Bot", Input Binding String(Button(Secondary Fire))) : Custom String("")), First Of(Sorted Array(Filtered Array(Append To Array(Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.positionControl), Mapped Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.replayState == 0), Current Array Element.facingControl)), Distance Between(Eye Position(Local Player) + Facing Direction Of(Local Player) * Distance Between(Eye Position(Local Player), Current Array Element[2]), Current Array Element[2]) <= 1.25), -1 * Dot Product(Facing Direction Of(Local Player), Direction Towards(Eye Position(Local Player), Current Array Element[2]))))[2] + Up, 1.5, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
    }
}

// Rule Element Count: 36
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Update position control orb")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 27, Condition Count: 3
    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Event Player.replayState == 0;
        Distance Between(Position Of(Event Player) + Up, Event Player.positionControl[2]) > 0.01;
    }

    // Element Count: 8, Action Count: 3
    // Largest Action Index: 0 using 5 Elements
    actions
    {
        Event Player.positionControl[2] = Position Of(Event Player) + Up;
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 56
rule("[interface/dummyBotsAndReplay/botPlacementModule.ostw] Update facing control orb")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 37, Condition Count: 3
    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Event Player.replayState == 0;
        Distance Between(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 5, Null, Null, False), Event Player.facingControl[2]) > 0.01;
    }

    // Element Count: 18, Action Count: 3
    // Largest Action Index: 0 using 15 Elements
    actions
    {
        Event Player.facingControl[2] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 5, Null, Null, False);
        Wait(0.016, Ignore Condition);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 60
rule("Initialize the gay (Patriq made me name it this, it actually just initialize the rainbow color changing)")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 59, Action Count: 1
    actions
    {
        Chase Global Variable At Rate(rainbowVector, Vector(Min(Max(Absolute Value(Total Time Elapsed * 500 % 765 - 382.5), 127.5), 255), Min(Max(Absolute Value((Total Time Elapsed * 500 + 255) % 765 - 382.5), 127.5), 255), Min(Max(Absolute Value((Total Time Elapsed * 500 + 510) % 765 - 382.5), 127.5), 255)), 99999, Destination And Rate);
    }
}

// Rule Element Count: 221
rule("[interface/dummyBotsAndReplay/botEditPage.del] When a bot becomes selected, initialize display options")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 6, Condition Count: 1
    conditions
    {
        Event Player.selectedBot != Null;
    }

    // Element Count: 214, Action Count: 47
    // Largest Action Index: 45 using 26 Elements
    actions
    {
        If(First Of(Event Player.selectedBot._extendedPlayerCollection[2]) != Null);
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[7] = Custom String("Clear Respawn Point");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[7] = Color(Orange);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        Else;
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[7] = Custom String("Set Respawn Point");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[7] = Color(Yellow);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        End;
        If(First Of(Event Player.selectedBot.pinnedPosition) != Null);
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[17] = Custom String("Unpin Bot");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[17] = Color(Orange);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        Else;
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[17] = Custom String("Pin Bot");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[17] = Color(Orange);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        End;
        If(Event Player.selectedBot.sampleCount > 0);
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[11] = Custom String("Play Replay");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[11] = Color(Lime Green);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        Else;
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[11] = Custom String("Record Replay");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[11] = Custom Color(186, 70, 213, 255);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        End;
        Wait Until(Event Player.selectedBot != Evaluate Once(Event Player.selectedBot) || Event Player.selectedBot.sampleCount != Evaluate Once(Event Player.selectedBot.sampleCount), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("[interface/dummyBotsAndReplay/botEditPage.del] Change hero")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 2;
    }

    // Element Count: 71, Action Count: 19
    // Largest Action Index: 15 using 25 Elements
    actions
    {
        Event Player.tempHeroStorage = Hero Of(Event Player);
        Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Event Player.tempHeroStorage));
        Wait Until(!Has Spawned(Event Player), 1);
        Reset Player Hero Availability(Event Player);
        Wait Until(Has Spawned(Event Player), 1000000);
        Start Forcing Player To Be Hero(Event Player.selectedBot, Hero Of(Event Player));
        Event Player.selectedBot.tempHeroStorage = Hero Of(Event Player);
        Wait(0.016, Ignore Condition);
        Stop Forcing Player To Be Hero(Event Player.selectedBot);
        Start Forcing Player To Be Hero(Event Player, Event Player.tempHeroStorage);
        Wait(0.016, Ignore Condition);
        Stop Forcing Player To Be Hero(Event Player);
        Stop Forcing Player Position(Event Player);
        Start Forcing Player Position(Event Player, First Of(Event Player.menuActivationPoint), True);
        Wait(0.064, Ignore Condition);
        Wait Until(Distance Between(Event Player, First Of(Event Player.menuActivationPoint)) < 0.05 && Angle Between Vectors(Facing Direction Of(Event Player), Event Player.menuActivationPoint[2]) < 0.1, 1);
        Event Player.selectedControl = Null;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 23
rule("[interface/dummyBotsAndReplay/botEditPage.del] BUGFIX: When dummy bot respawns, force it back onto the right hero")
{
    event
    {
        Player Died;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Is Dummy Bot(Event Player) == True;
    }

    // Element Count: 17, Action Count: 5
    // Largest Action Index: 3 using 8 Elements
    actions
    {
        Event Player.tempHeroStorage = Hero Of(Event Player);
        Stop Forcing Player To Be Hero(Event Player);
        Wait Until(Is Alive(Event Player), 10000000);
        Wait Until(Hero Of(Event Player) != Event Player.tempHeroStorage, 1);
        Start Forcing Player To Be Hero(Event Player, Event Player.tempHeroStorage);
    }
}

// Rule Element Count: 201
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Transfer Recording")
{
    event
    {
        Subroutine;
        TransferRecording;
    }

    // Element Count: 200, Action Count: 26
    // Largest Action Index: 14 using 11 Elements
    actions
    {
        Global.TargetPlayer.primaryFireEvents = Global.SourcePlayer.primaryFireEvents;
        Global.TargetPlayer.secondaryFireEvents = Global.SourcePlayer.secondaryFireEvents;
        Global.TargetPlayer.ability1Events = Global.SourcePlayer.ability1Events;
        Global.TargetPlayer.ability2Events = Global.SourcePlayer.ability2Events;
        Global.TargetPlayer.ultimateEvents = Global.SourcePlayer.ultimateEvents;
        Global.TargetPlayer.jumpEvents = Global.SourcePlayer.jumpEvents;
        Global.TargetPlayer.crouchEvents = Global.SourcePlayer.crouchEvents;
        Global.TargetPlayer.meleeEvents = Global.SourcePlayer.meleeEvents;
        Global.TargetPlayer.reloadEvents = Global.SourcePlayer.reloadEvents;
        Global.TargetPlayer.throttleEvents = Global.SourcePlayer.throttleEvents;
        Global.TargetPlayer.facingEvents = Global.SourcePlayer.facingEvents;
        Global.TargetPlayer.weaponEvents = Global.SourcePlayer.weaponEvents;
        Global.TargetPlayer.recordingLength = Global.SourcePlayer.recordingLength;
        Global.TargetPlayer.sampleCount = 0;
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.primaryFireEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.secondaryFireEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.ability1Events));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.ability2Events));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.ultimateEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.jumpEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.crouchEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.meleeEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.reloadEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.throttleEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.facingEvents));
        Global.TargetPlayer.sampleCount = Max(Global.TargetPlayer.sampleCount, Count Of(Global.TargetPlayer.weaponEvents));
    }
}

// Rule Element Count: 327
rule("[interface/dummyBotsAndReplay/botEditPage.del] Change team")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 1;
    }

    // Element Count: 319, Action Count: 39
    // Largest Action Index: 29 using 84 Elements
    actions
    {
        Event Player.tempHeroStorage = Hero Of(Event Player.selectedBot);
        Event Player._extendedPlayerCollection[20] = Event Player.selectedBot.isPunchingBag;
        Event Player._extendedPlayerCollection[21] = Event Player.selectedBot.pinnedPosition;
        Event Player._extendedPlayerCollection[22] = Event Player.selectedBot._extendedPlayerCollection[2];
        Event Player._extendedPlayerCollection[23] = Event Player.selectedBot.replayResetPoint;
        Event Player._extendedPlayerCollection[24] = Team Of(Event Player.selectedBot);
        Event Player._extendedPlayerCollection[25] = Position Of(Event Player.selectedBot);
        Event Player._extendedPlayerCollection[26] = Facing Direction Of(Event Player.selectedBot);
        "Temporarily store recording on player who is performing the action"
        Global.SourcePlayer = Event Player.selectedBot;
        Global.TargetPlayer = Event Player;
        Call Subroutine(TransferRecording);
        Destroy Dummy Bot(Team Of(Event Player.selectedBot), Slot Of(Event Player.selectedBot));
        Create Dummy Bot(Event Player.tempHeroStorage, Opposite Team Of(Event Player._extendedPlayerCollection[24]), -1, Event Player._extendedPlayerCollection[25], Event Player._extendedPlayerCollection[26]);
        Event Player.selectedBot = Last Created Entity;
        If(Event Player._extendedPlayerCollection[20]);
            Last Created Entity.isPunchingBag = True;
            Add Health Pool To Player(Last Created Entity, Health, 1250, True, False);
            Start Forcing Dummy Bot Name(Last Created Entity, Custom String("Punching Bag"));
        End;
        If(First Of(Event Player._extendedPlayerCollection[21]) != Null);
            Event Player.selectedBot.pinnedPosition = Event Player._extendedPlayerCollection[21];
        End;
        If(First Of(Event Player._extendedPlayerCollection[23]) != Null);
            Event Player.selectedBot.replayResetPoint = Event Player._extendedPlayerCollection[23];
        End;
        If(First Of(Event Player._extendedPlayerCollection[22]) != Null);
            Event Player.selectedBot._extendedPlayerCollection[2] = Event Player._extendedPlayerCollection[22];
            Create Effect(Array Contains(All Players(All Teams), Local Player) && Is Dummy Bot(First Of(Event Player.selectedBot.positionControl)) && First Of(Event Player.selectedBot.positionControl).replayState == 0 && Local Player.botControlMode == 1 ? Local Player : Null, Sphere, Color(Green), First Of(Event Player.selectedBot._extendedPlayerCollection[2]), 0.5, Visible To Position and Radius);
            Event Player._extendedPlayerCollection[18] = Last Created Entity;
            Create Beam Effect(Array Contains(All Players(All Teams), Local Player) && Is Dummy Bot(First Of(Event Player.selectedBot.positionControl)) && First Of(Event Player.selectedBot.positionControl).replayState == 0 && Local Player.botControlMode == 1 ? Local Player : Null, Good Beam, First Of(Event Player.selectedBot._extendedPlayerCollection[2]) + Vector(0, 0.25, 0), First Of(Event Player.selectedBot._extendedPlayerCollection[2]) + Event Player.selectedBot._extendedPlayerCollection[2][2] + Vector(0, 0.25, 0), Team Of(Event Player.selectedBot), Visible To Position and Radius);
            Event Player._extendedPlayerCollection[19] = Last Created Entity;
        End;
        Wait(0.064, Ignore Condition);
        "We wait to transfer the recording to the new bot to avoid overloading the server"
        Global.SourcePlayer = Event Player;
        Global.TargetPlayer = Event Player.selectedBot;
        Call Subroutine(TransferRecording);
        Start Facing(Event Player.selectedBot, Event Player._extendedPlayerCollection[26], 1000, To World, None);
        Wait Until(Angle Between Vectors(Facing Direction Of(Event Player.selectedBot), Event Player._extendedPlayerCollection[26]) < 0.1, 1);
        Stop Facing(Event Player.selectedBot);
    }
}

// Rule Element Count: 257
rule("[interface/dummyBotsAndReplay/botEditPage.del] Set respawn point")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 5;
    }

    // Element Count: 249, Action Count: 29
    // Largest Action Index: 6 using 84 Elements
    actions
    {
        If(First Of(Event Player.selectedBot._extendedPlayerCollection[2]) == Null);
            Event Player.selectedBot._extendedPlayerCollection[2] = Array(Position Of(Event Player.selectedBot), Eye Position(Event Player.selectedBot), Facing Direction Of(Event Player.selectedBot));
            Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
            Small Message(Event Player, Custom String("Respawn point set!"));
            Create Effect(Array Contains(All Players(All Teams), Local Player) && Is Dummy Bot(First Of(Event Player.selectedBot.positionControl)) && First Of(Event Player.selectedBot.positionControl).replayState == 0 && Local Player.botControlMode == 1 ? Local Player : Null, Sphere, Color(Green), First Of(Event Player.selectedBot._extendedPlayerCollection[2]), 0.5, Visible To Position and Radius);
            Event Player._extendedPlayerCollection[18] = Last Created Entity;
            Create Beam Effect(Array Contains(All Players(All Teams), Local Player) && Is Dummy Bot(First Of(Event Player.selectedBot.positionControl)) && First Of(Event Player.selectedBot.positionControl).replayState == 0 && Local Player.botControlMode == 1 ? Local Player : Null, Good Beam, First Of(Event Player.selectedBot._extendedPlayerCollection[2]) + Vector(0, 0.25, 0), First Of(Event Player.selectedBot._extendedPlayerCollection[2]) + Event Player.selectedBot._extendedPlayerCollection[2][2] + Vector(0, 0.25, 0), Team Of(Event Player.selectedBot), Visible To Position and Radius);
            Event Player._extendedPlayerCollection[19] = Last Created Entity;
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[7] = Custom String("Clear Respawn Point");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[7] = Color(Orange);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        Else;
            Global._arrayConstructor = Event Player.selectedBot._extendedPlayerCollection[2];
            Global._arrayConstructor[0] = Null;
            Event Player.selectedBot._extendedPlayerCollection[2] = Global._arrayConstructor;
            Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
            Small Message(Event Player, Custom String("Respawn point cleared"));
            Destroy Effect(Event Player._extendedPlayerCollection[18]);
            Destroy Effect(Event Player._extendedPlayerCollection[19]);
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[7] = Custom String("Set Respawn Point");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[7] = Color(Yellow);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        End;
    }
}

// Rule Element Count: 10
rule("[interface/dummyBotsAndReplay/botEditPage.del] Switch to button control page")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 4;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentMenuState = 8;
    }
}

// Rule Element Count: 90
rule("[interface/dummyBotsAndReplay/botEditPage.del] Toggle bot pin")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 6;
    }

    // Element Count: 82, Action Count: 19
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        If(First Of(Event Player.selectedBot.pinnedPosition) == Null);
            Event Player.selectedBot.pinnedPosition = Array(Position Of(Event Player.selectedBot), Eye Position(Event Player.selectedBot), Facing Direction Of(Event Player.selectedBot));
            Small Message(Event Player, Custom String("  Pinned bot to current position"));
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[17] = Custom String("Unpin Bot");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[17] = Color(Orange);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        Else;
            Event Player.selectedBot.pinnedPosition = Null;
            Small Message(Event Player, Custom String("  Unpinned bot"));
            Global._arrayConstructor = Event Player.ButtonLabelGrid[7];
            Global._arrayConstructor[17] = Custom String("Pin Bot");
            Event Player.ButtonLabelGrid[7] = Global._arrayConstructor;
            Global._arrayConstructor = Event Player.ButtonColorGrid[7];
            Global._arrayConstructor[17] = Color(Orange);
            Event Player.ButtonColorGrid[7] = Global._arrayConstructor;
        End;
    }
}

// Rule Element Count: 46
rule("[interface/dummyBotsAndReplay/botEditPage.del] Handle pinning bot to current position")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        First Of(Event Player.pinnedPosition) != Null;
    }

    // Element Count: 38, Action Count: 10
    // Largest Action Index: 2 using 8 Elements
    actions
    {
        While(First Of(Event Player.pinnedPosition) != Null);
            Start Forcing Player Position(Event Player, First Of(Event Player.pinnedPosition), True);
            Wait Until(First Of(Event Player.pinnedPosition) == Null, 0.2);
            Stop Forcing Player Position(Event Player);
            Wait(0.016, Ignore Condition);
        End;
        Wait(0.016, Ignore Condition);
        If(Speed Of(Event Player) > 0.05);
            Apply Impulse(Event Player, Velocity Of(Event Player) * -1, 0.01, To World, Cancel Contrary Motion XYZ);
        End;
    }
}

// Rule Element Count: 109
rule("[SUB | interface/dummyBotsAndReplay/replay/replay.del] Restore selected bot to original state")
{
    event
    {
        Subroutine;
        ReturnToPreRecordState;
    }

    // Element Count: 108, Action Count: 27
    // Largest Action Index: 11 using 18 Elements
    actions
    {
        "Restore bot to reset point and recording player to original hero"
        Start Forcing Player To Be Hero(Event Player, Event Player.originalHero);
        Stop Forcing Player To Be Hero(Event Player);
        Stop Forcing Player Position(Event Player.selectedBot);
        Set Invisible(Event Player.selectedBot, None);
        Teleport(Event Player.selectedBot, First Of(Event Player.selectedBot.replayResetPoint));
        Stop Facing(Event Player.selectedBot);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player.selectedBot, Event Player.selectedBot.replayResetPoint[2], To World);
        "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
        Wait(0.032, Ignore Condition);
        Start Facing(Event Player.selectedBot, Event Player.selectedBot.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
        Wait(0.016, Ignore Condition);
        Wait Until(Angle Between Vectors(Facing Direction Of(Event Player.selectedBot), Event Player.selectedBot.replayResetPoint[2]) < 0.1, 0.25);
        Stop Facing(Event Player.selectedBot);
        If(Event Player.currentMenuState != 0);
            "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
            Wait(0.016, Ignore Condition);
            Event Player.currentMenuState = 0;
        End;
        Wait(0.032, Ignore Condition);
        Global._arrayConstructor = Event Player.ButtonLabelGrid[6];
        Global._arrayConstructor[12] = Custom String("Stop Editing Bots");
        Event Player.ButtonLabelGrid[6] = Global._arrayConstructor;
        Event Player.botControlMode = 1;
        If(!Event Player.isNoClipActive);
            Event Player.toolsActionID = 3;
            Wait(0.016, Ignore Condition);
            Event Player.toolsActionID = 0;
        End;
    }
}

// Rule Element Count: 22
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Update Longest Recording Length")
{
    event
    {
        Subroutine;
        UpdateLongestRecordingLength;
    }

    // Element Count: 21, Action Count: 1
    actions
    {
        Global.longestRecordingLength = Last Of(Sorted Array(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0), Current Array Element.recordingLength)).recordingLength;
    }
}

// Rule Element Count: 22
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Delete Recording")
{
    event
    {
        Subroutine;
        DeleteRecording;
    }

    // Element Count: 21, Action Count: 18
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Event Player.frame = 0;
        Event Player.recordingLength = 0;
        Event Player.sampleCount = 0;
        Event Player.currentInputValues = Empty Array;
        Event Player.currentEventIndices = Empty Array;
        Event Player.currentEventFrames = Empty Array;
        Event Player.primaryFireEvents = Empty Array;
        Event Player.secondaryFireEvents = Empty Array;
        Event Player.ability1Events = Empty Array;
        Event Player.ability2Events = Empty Array;
        Event Player.ultimateEvents = Empty Array;
        Event Player.jumpEvents = Empty Array;
        Event Player.crouchEvents = Empty Array;
        Event Player.meleeEvents = Empty Array;
        Event Player.reloadEvents = Empty Array;
        Event Player.throttleEvents = Empty Array;
        Event Player.facingEvents = Empty Array;
        Call Subroutine(UpdateLongestRecordingLength);
    }
}

// Rule Element Count: 8
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Start Recording")
{
    event
    {
        Subroutine;
        StartRecording;
    }

    // Element Count: 7, Action Count: 4
    // Largest Action Index: 1 using 2 Elements
    actions
    {
        Call Subroutine(DeleteRecording);
        Event Player.frame = 0;
        Event Player.recordingLength = 0;
        Event Player.replayState = 1;
    }
}

// Rule Element Count: 277
rule("[SUB | interface/dummyBotsAndReplay/replay/replay.del] Prep player to record for selectedBot")
{
    event
    {
        Subroutine;
        PreparePlayerForRecording;
    }

    // Element Count: 276, Action Count: 63
    // Largest Action Index: 0 using 16 Elements
    actions
    {
        Event Player.selectedBot.replayResetPoint = Array(Position Of(Event Player.selectedBot), Eye Position(Event Player.selectedBot), Facing Direction Of(Event Player.selectedBot));
        Event Player.recordingHero = Hero Of(Event Player.selectedBot);
        Event Player.originalHero = Hero Of(Event Player);
        "Move bot away from recording area"
        Stop Forcing Player Position(Event Player.selectedBot);
        Start Forcing Player Position(Event Player.selectedBot, Vector(0, 1000, 0), True);
        Set Invisible(Event Player.selectedBot, All);
        "Prepare player to record"
        Global._arrayConstructor = Event Player.ButtonLabelGrid[6];
        Global._arrayConstructor[12] = Custom String("Edit Dummy Bots");
        Event Player.ButtonLabelGrid[6] = Global._arrayConstructor;
        Event Player.botControlMode = 0;
        If(Event Player.isNoClipActive);
            Event Player.toolsActionID = 3;
            Wait(0.016, Ignore Condition);
            Event Player.toolsActionID = 0;
        End;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
        If(Event Player.botControlMode == 1);
            Event Player.botControlMode = 0;
        End;
        Wait(0.016, Ignore Condition);
        Start Forcing Player To Be Hero(Event Player, Event Player.recordingHero);
        Start Forcing Player Position(Event Player, First Of(Event Player.selectedBot.replayResetPoint), True);
        Start Facing(Event Player, Event Player.selectedBot.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
        Wait Until(Is Dead(Event Player) || Event Player.currentMenuState != 0, 0.8);
        If(Is Dead(Event Player) || Event Player.currentMenuState != 0);
            Call Subroutine(ReturnToPreRecordState);
            Small Message(Event Player, Custom String("  Recording aborted"));
            Abort;
        End;
        Small Message(Event Player, Custom String("{0}  Recording starts in 3...", Icon String(Exclamation Mark)));
        Wait Until(Is Dead(Event Player) || Event Player.currentMenuState != 0, 0.8);
        If(Is Dead(Event Player) || Event Player.currentMenuState != 0);
            Call Subroutine(ReturnToPreRecordState);
            Small Message(Event Player, Custom String("  Recording aborted"));
            Abort;
        End;
        Small Message(Event Player, Custom String("  2..."));
        Wait Until(Is Dead(Event Player) || Event Player.currentMenuState != 0, 0.8);
        If(Is Dead(Event Player) || Event Player.currentMenuState != 0);
            Call Subroutine(ReturnToPreRecordState);
            Small Message(Event Player, Custom String("  Recording aborted"));
            Abort;
        End;
        Small Message(Event Player, Custom String("  1..."));
        "If we should prompt all other bots to play their recordings,
prompt them now."
        If(Global.allBotsReplayDuringRecording);
            Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0).waitingOnPlayer = Event Player;
            Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0).recordingPlayStopFlag = 1;
        End;
        Wait Until(Is Dead(Event Player) || Event Player.currentMenuState != 0, 0.8);
        If(Is Dead(Event Player) || Event Player.currentMenuState != 0);
            Call Subroutine(ReturnToPreRecordState);
            If(Global.allBotsReplayDuringRecording);
                Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0).waitingOnPlayer = Null;
                Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && Current Array Element.sampleCount > 0).recordingPlayStopFlag = 2;
            End;
            Small Message(Event Player, Custom String("  Recording aborted"));
            Abort;
        End;
        "Release player to record"
        Stop Forcing Player Position(Event Player);
        Stop Facing(Event Player);
        "Start recording"
        Call Subroutine(StartRecording);
        Small Message(Event Player, Custom String("  Recording started"));
    }
}

// Rule Element Count: 93
rule("[interface/dummyBotsAndReplay/botEditPage.del] Record actions")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 7;
    }

    // Element Count: 85, Action Count: 32
    // Largest Action Index: 23 using 9 Elements
    actions
    {
        If(Event Player.replayState == 2);
            If(Event Player.selectedBot == Null);
                Small Message(Event Player, Custom String("  No bot selected, this is a bug!"));
                Wait(0.25, Ignore Condition);
                Small Message(Event Player, Custom String("  Please report this to CactusPuppy."));
                Abort;
            End;
            Event Player.selectedBot.recordingPlayStopFlag = 2;
            Abort;
        End;
        If(Event Player.replayState == 1);
            Small Message(Event Player, Custom String("  Menu opening should end recording. This is a bug!"));
            Wait(0.25, Ignore Condition);
            Small Message(Event Player, Custom String("  Please report this to CactusPuppy."));
            Abort;
        End;
        If(Event Player.replayState == 0);
            If(Event Player.selectedBot == Null);
                Small Message(Event Player, Custom String("  No bot selected, this is a bug!"));
                Wait(0.25, Ignore Condition);
                Small Message(Event Player, Custom String("  Please report this to CactusPuppy."));
                Abort;
            End;
            If(Event Player.selectedBot.sampleCount > 0);
                Event Player.selectedBot.recordingPlayStopFlag = 1;
                "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
                Wait(0.016, Ignore Condition);
                Event Player.currentMenuState = 0;
            Else;
                Call Subroutine(PreparePlayerForRecording);
            End;
            Abort;
        End;
    }
}

// Rule Element Count: 43
rule("[interface/dummyBotsAndReplay/botEditPage.del] Delete replay")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 8;
    }

    // Element Count: 35, Action Count: 13
    // Largest Action Index: 6 using 9 Elements
    actions
    {
        If(Event Player.selectedBot == Null);
            Small Message(Event Player, Custom String("  No bot selected, this is a bug!"));
            Wait(0.25, Ignore Condition);
            Small Message(Event Player, Custom String("  Please report this to CactusPuppy."));
            Abort;
        End;
        If(Event Player.selectedBot.sampleCount > 0);
            Event Player.selectedBot.recordingPlayStopFlag = 3;
            Wait(0.5, Ignore Condition);
            Small Message(Event Player, Custom String("  Replay deleted"));
        Else;
            Small Message(Event Player, Custom String("  No replay to delete"));
        End;
    }
}

// Rule Element Count: 69
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Stop Clip")
{
    event
    {
        Subroutine;
        StopClip;
    }

    // Element Count: 68, Action Count: 26
    // Largest Action Index: 22 using 14 Elements
    actions
    {
        Event Player.botReadyToReplay = False;
        Event Player.frame = 0;
        Event Player.currentEventFrames = Empty Array;
        Event Player.currentEventIndices = Empty Array;
        Stop Throttle In Direction(Event Player);
        Stop Holding Button(Event Player, Button(Primary Fire));
        Stop Holding Button(Event Player, Button(Secondary Fire));
        Stop Holding Button(Event Player, Button(Ability 1));
        Stop Holding Button(Event Player, Button(Ability 2));
        Stop Holding Button(Event Player, Button(Ultimate));
        Stop Holding Button(Event Player, Button(Jump));
        Stop Holding Button(Event Player, Button(Crouch));
        Stop Holding Button(Event Player, Button(Melee));
        Stop Holding Button(Event Player, Button(Reload));
        If(Is Alive(Event Player));
            Teleport(Event Player, First Of(Event Player.replayResetPoint));
            Stop Facing(Event Player);
            Wait(0.016, Ignore Condition);
            Set Facing(Event Player, Event Player.replayResetPoint[2], To World);
            "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
            Wait(0.032, Ignore Condition);
            Start Facing(Event Player, Event Player.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
            Wait(0.016, Ignore Condition);
            Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player.replayResetPoint[2]) < 0.1, 0.25);
            Stop Facing(Event Player);
        End;
        Event Player.replayState = 0;
    }
}

// Rule Element Count: 80
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Clip")
{
    event
    {
        Subroutine;
        PlayClip;
    }

    // Element Count: 79, Action Count: 23
    // Largest Action Index: 13 using 14 Elements
    actions
    {
        Call Subroutine(StopClip);
        Stop Forcing Player To Be Hero(Event Player);
        Respawn(Event Player);
        Wait Until(Hero Of(Event Player) != Event Player.recordingHero, 0.25);
        Start Forcing Player To Be Hero(Event Player, Event Player.recordingHero);
        Wait(0.064, Ignore Condition);
        Teleport(Event Player, First Of(Event Player.replayResetPoint));
        Stop Facing(Event Player);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Event Player.replayResetPoint[2], To World);
        "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
        Wait(0.032, Ignore Condition);
        Start Facing(Event Player, Event Player.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
        Wait(0.016, Ignore Condition);
        Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player.replayResetPoint[2]) < 0.1, 0.25);
        Stop Facing(Event Player);
        If(Event Player.waitingOnPlayer != Null);
            Wait Until(Event Player.waitingOnPlayer.replayState == 1, 3);
        Else;
            Wait(1, Ignore Condition);
        End;
        Event Player.waitingOnPlayer = Null;
        Event Player.botReadyToReplay = True;
        Event Player.replayState = 2;
    }
}

// Rule Element Count: 73
rule("[interface/dummyBotsAndReplay/botEditPage.del] Handle when replay flag is set to true")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 12, Condition Count: 2
    conditions
    {
        Is Dummy Bot(Event Player) == True;
        Event Player.recordingPlayStopFlag != 0;
    }

    // Element Count: 60, Action Count: 11
    // Largest Action Index: 2 using 23 Elements
    actions
    {
        If(Event Player.replayState == 2 && Event Player.recordingPlayStopFlag == 2);
            Call Subroutine(StopClip);
        Else If(Event Player.replayState == 0 && Event Player.recordingPlayStopFlag == 1 && Event Player.sampleCount > 0);
            Call Subroutine(PlayClip);
        Else If(Event Player.recordingPlayStopFlag == 3);
            If(Event Player.replayState == 2);
                Call Subroutine(StopClip);
            End;
            Call Subroutine(DeleteRecording);
        End;
        Event Player.recordingPlayStopFlag = 0;
    }
}

// Rule Element Count: 20
rule("[interface/dummyBotsAndReplay/botEditPage.del] Delete")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.selectedBotEditAction == 3;
    }

    // Element Count: 12, Action Count: 4
    // Largest Action Index: 0 using 7 Elements
    actions
    {
        Destroy Dummy Bot(Team Of(Event Player.selectedBot), Slot Of(Event Player.selectedBot));
        Event Player.selectedBot = Null;
        "Avoid having input count for something else by allowing other modules to read that an input was processed in the menu."
        Wait(0.016, Ignore Condition);
        Event Player.currentMenuState = 0;
    }
}

// Rule Element Count: 19
rule("Initialize button control states array")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 5, Condition Count: 1
    conditions
    {
        Is Dummy Bot(Event Player) == True;
    }

    // Element Count: 13, Action Count: 2
    // Largest Action Index: 0 using 7 Elements
    actions
    {
        Event Player.buttonControlStates[Count Of(Global.AllButtons) - 1] = 0;
        Event Player.buttonControlStates = Mapped Array(Event Player.buttonControlStates, Custom String("None"));
    }
}

// Rule Element Count: 79
rule("[interface/dummyBotsAndReplay/botEditPage_ButtonsControl] Primary fire control")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Primary Fire));
        Else;
            Stop Holding Button(Event Player, Button(Primary Fire));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Primary Fire));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Primary Fire));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Primary Fire))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Primary Fire))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If secondary fire button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Secondary Fire));
        Else;
            Stop Holding Button(Event Player, Button(Secondary Fire));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Secondary Fire));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Secondary Fire));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Secondary Fire))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Ability 1 button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 1))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 1))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Ability 1));
        Else;
            Stop Holding Button(Event Player, Button(Ability 1));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 1))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Ability 1));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Ability 1));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 1))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 1))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Ability 2 button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 2))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 2))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Ability 2));
        Else;
            Stop Holding Button(Event Player, Button(Ability 2));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 2))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Ability 2));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Ability 2));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 2))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ability 2))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Ultimate button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ultimate))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ultimate))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Ultimate));
        Else;
            Stop Holding Button(Event Player, Button(Ultimate));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ultimate))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Ultimate));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Ultimate));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ultimate))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Ultimate))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Interact button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Interact))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Interact))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Interact));
        Else;
            Stop Holding Button(Event Player, Button(Interact));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Interact))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Interact));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Interact));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Interact))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Interact))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Reload button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Reload))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Reload))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Reload));
        Else;
            Stop Holding Button(Event Player, Button(Reload));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Reload))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Reload));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Reload));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Reload))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Reload))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Jump button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Jump))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Jump))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Jump));
        Else;
            Stop Holding Button(Event Player, Button(Jump));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Jump))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Jump));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Jump));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Jump))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Jump))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Crouch button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Crouch))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Crouch))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Crouch));
        Else;
            Stop Holding Button(Event Player, Button(Crouch));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Crouch))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Crouch));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Crouch));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Crouch))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Crouch))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 79
rule("If Melee button is marked as being spammed, start spamming it")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 1
    conditions
    {
        Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Melee))] != Custom String("None");
    }

    // Element Count: 65, Action Count: 13
    // Largest Action Index: 11 using 23 Elements
    actions
    {
        If(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Melee))] == Custom String("Holding"));
            Start Holding Button(Event Player, Button(Melee));
        Else;
            Stop Holding Button(Event Player, Button(Melee));
        End;
        While(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Melee))] == Custom String("Spamming"));
            Start Holding Button(Event Player, Button(Melee));
            Wait(0.064, Ignore Condition);
            Stop Holding Button(Event Player, Button(Melee));
            Wait(1, Abort When False);
        End;
        Wait Until(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Melee))] != Evaluate Once(Event Player.buttonControlStates[Index Of Array Value(Global.AllButtons, Button(Melee))]), 1000000);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 12
rule("When player enters this menu, set menuXIndex and menuYIndex to 0")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.currentMenuState == 8;
    }

    // Element Count: 4, Action Count: 2
    // Largest Action Index: 0 using 2 Elements
    actions
    {
        Event Player.menuXIndex = 0;
        Event Player.menuYIndex = 0;
    }
}

// Rule Element Count: 50
rule("When player is holding Reload in the button control menu, start holding the current button until reload is released")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.currentMenuState == 8;
        Is Button Held(Event Player, Button(Reload)) == True;
    }

    // Element Count: 35, Action Count: 5
    // Largest Action Index: 2 using 15 Elements
    actions
    {
        Event Player.cacheMenuYIndex = Event Player.menuYIndex;
        Start Holding Button(Event Player.selectedBot, Global.AllButtons[Event Player.cacheMenuYIndex]);
        Wait Until(!Is Button Held(Event Player, Button(Reload)) || Event Player.menuYIndex != Event Player.cacheMenuYIndex, 1000000);
        Stop Holding Button(Event Player.selectedBot, Global.AllButtons[Event Player.cacheMenuYIndex]);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 75
rule("[UI] - HUD")
{
    event
    {
        Ongoing - Global;
    }

    // Element Count: 74, Action Count: 4
    // Largest Action Index: 2 using 25 Elements
    actions
    {
        Create HUD Text(Filtered Array(Local Player, Current Array Element.replayState == 1), Icon String(Radioactive), Null, Custom String("Recording..."), Right, -9, Color(Red), Color(Red), Color(Red), Visible To And String, Default Visibility);
        Create HUD Text(Filtered Array(Local Player, Current Array Element.replayState == 1), Null, Custom String("Clip: {0} Seconds", Local Player.frame / 62.5), Null, Right, -8, Color(Red), Color(Red), Color(Red), Visible To And String, Default Visibility);
        Create HUD Text(Filtered Array(Local Player, Current Array Element.replayState == 1), Null, Custom String("{0} Size: {1}%", Icon String(Warning), Local Player.sampleCount / 999 * 100), Null, Right, -7, Color(Red), Color(Red), Color(Red), Visible To And String, Default Visibility);
        Create HUD Text(Filtered Array(Local Player, Current Array Element.replayState == 1), Null, Custom String("Hold Interact to Save"), Null, Right, -4, Color(Orange), Color(Orange), Color(Orange), Visible To And String, Default Visibility);
    }
}

// Rule Element Count: 99
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Update Sample Count")
{
    event
    {
        Subroutine;
        UpdateSampleCount;
    }

    // Element Count: 98, Action Count: 13
    // Largest Action Index: 1 using 8 Elements
    actions
    {
        Event Player.sampleCount = 0;
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.primaryFireEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.secondaryFireEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.ability1Events));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.ability2Events));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.ultimateEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.jumpEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.crouchEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.meleeEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.reloadEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.throttleEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.facingEvents));
        Event Player.sampleCount = Max(Event Player.sampleCount, Count Of(Event Player.weaponEvents));
    }
}

// Rule Element Count: 8
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Stop Recording")
{
    event
    {
        Subroutine;
        StopRecording;
    }

    // Element Count: 7, Action Count: 4
    // Largest Action Index: 1 using 3 Elements
    actions
    {
        Event Player.replayState = 0;
        Event Player.recordingLength = Event Player.frame;
        Call Subroutine(UpdateSampleCount);
        Call Subroutine(UpdateLongestRecordingLength);
    }
}

// Rule Element Count: 18
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Recorder - Stop Recording")
{
    event
    {
        Subroutine;
        Recorder_StopRecording;
    }

    // Element Count: 17, Action Count: 9
    // Largest Action Index: 4 using 5 Elements
    actions
    {
        Call Subroutine(StopRecording);
        "Transfer recording to selected bot"
        Global.SourcePlayer = Event Player;
        Global.TargetPlayer = Event Player.selectedBot;
        Call Subroutine(TransferRecording);
        Event Player.selectedBot.recordingHero = Event Player.recordingHero;
        Call Subroutine(DeleteRecording);
        Call Subroutine(ReturnToPreRecordState);
        Wait(0.25, Ignore Condition);
        Small Message(Event Player, Custom String("  Recording stopped"));
    }
}

// Rule Element Count: 9
rule("[interface/dummyBotsAndReplay/replay/replay.del] If player dies while recording, stop recording")
{
    event
    {
        Player Died;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.replayState == 1;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Call Subroutine(Recorder_StopRecording);
    }
}

// Rule Element Count: 9
rule("[interface/dummyBotsAndReplay/replay/replay.del] If player dies while playing, stop playing")
{
    event
    {
        Player Died;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.replayState == 2;
    }

    // Element Count: 1, Action Count: 1
    actions
    {
        Call Subroutine(StopClip);
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Primary Fire")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[0] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Secondary Fire")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[1] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Ability 1")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Ability 1)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[2] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Ability 2")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Ability 2)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[3] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Ultimate")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Ultimate)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[4] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Jump")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Jump)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[5] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Crouch")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Crouch)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[6] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Melee")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Melee)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[7] = True;
    }
}

// Rule Element Count: 17
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Input Event - Reload")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 14, Condition Count: 2
    conditions
    {
        Event Player.replayState == 1;
        Is Button Held(Event Player, Button(Reload)) == True;
    }

    // Element Count: 2, Action Count: 1
    actions
    {
        Event Player.currentInputValues[8] = True;
    }
}

// Rule Element Count: 64
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Primary Fire")
{
    event
    {
        Subroutine;
        RecordFramePrimaryFire;
    }

    // Element Count: 63, Action Count: 8
    // Largest Action Index: 1 using 14 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Primary Fire)) || First Of(Event Player.currentInputValues);
        If(First Of(Event Player.primaryFireEvents[First Of(Event Player.currentEventIndices)]) != Event Player.sampleValue);
            Event Player.currentEventIndices[0] += Event Player.frame == 0 ? 0 : 1;
            Event Player.primaryFireEvents[First Of(Event Player.currentEventIndices)] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.primaryFireEvents[First Of(Event Player.currentEventIndices)];
        Global._arrayConstructor[1] += 1;
        Event Player.primaryFireEvents[First Of(Event Player.currentEventIndices)] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Secondary Fire")
{
    event
    {
        Subroutine;
        RecordFrameSecondaryFire;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Secondary Fire)) || Event Player.currentInputValues[1];
        If(First Of(Event Player.secondaryFireEvents[Event Player.currentEventIndices[1]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[1] += Event Player.frame == 0 ? 0 : 1;
            Event Player.secondaryFireEvents[Event Player.currentEventIndices[1]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.secondaryFireEvents[Event Player.currentEventIndices[1]];
        Global._arrayConstructor[1] += 1;
        Event Player.secondaryFireEvents[Event Player.currentEventIndices[1]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Ability 1")
{
    event
    {
        Subroutine;
        RecordFrameAbility1;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Ability 1)) || Event Player.currentInputValues[2];
        If(First Of(Event Player.ability1Events[Event Player.currentEventIndices[2]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[2] += Event Player.frame == 0 ? 0 : 1;
            Event Player.ability1Events[Event Player.currentEventIndices[2]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.ability1Events[Event Player.currentEventIndices[2]];
        Global._arrayConstructor[1] += 1;
        Event Player.ability1Events[Event Player.currentEventIndices[2]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Ability 2")
{
    event
    {
        Subroutine;
        RecordFrameAbility2;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Ability 2)) || Event Player.currentInputValues[3];
        If(First Of(Event Player.ability2Events[Event Player.currentEventIndices[3]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[3] += Event Player.frame == 0 ? 0 : 1;
            Event Player.ability2Events[Event Player.currentEventIndices[3]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.ability2Events[Event Player.currentEventIndices[3]];
        Global._arrayConstructor[1] += 1;
        Event Player.ability2Events[Event Player.currentEventIndices[3]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Ultimate")
{
    event
    {
        Subroutine;
        RecordFrameUltimate;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Ultimate)) || Event Player.currentInputValues[4];
        If(First Of(Event Player.ultimateEvents[Event Player.currentEventIndices[4]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[4] += Event Player.frame == 0 ? 0 : 1;
            Event Player.ultimateEvents[Event Player.currentEventIndices[4]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.ultimateEvents[Event Player.currentEventIndices[4]];
        Global._arrayConstructor[1] += 1;
        Event Player.ultimateEvents[Event Player.currentEventIndices[4]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Jump")
{
    event
    {
        Subroutine;
        RecordFrameJump;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Jump)) || Event Player.currentInputValues[5];
        If(First Of(Event Player.jumpEvents[Event Player.currentEventIndices[5]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[5] += Event Player.frame == 0 ? 0 : 1;
            Event Player.jumpEvents[Event Player.currentEventIndices[5]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.jumpEvents[Event Player.currentEventIndices[5]];
        Global._arrayConstructor[1] += 1;
        Event Player.jumpEvents[Event Player.currentEventIndices[5]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Crouch")
{
    event
    {
        Subroutine;
        RecordFrameCrouch;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Crouch)) || Event Player.currentInputValues[6];
        If(First Of(Event Player.crouchEvents[Event Player.currentEventIndices[6]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[6] += Event Player.frame == 0 ? 0 : 1;
            Event Player.crouchEvents[Event Player.currentEventIndices[6]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.crouchEvents[Event Player.currentEventIndices[6]];
        Global._arrayConstructor[1] += 1;
        Event Player.crouchEvents[Event Player.currentEventIndices[6]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Melee")
{
    event
    {
        Subroutine;
        RecordFrameMelee;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Melee)) || Event Player.currentInputValues[7];
        If(First Of(Event Player.meleeEvents[Event Player.currentEventIndices[7]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[7] += Event Player.frame == 0 ? 0 : 1;
            Event Player.meleeEvents[Event Player.currentEventIndices[7]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.meleeEvents[Event Player.currentEventIndices[7]];
        Global._arrayConstructor[1] += 1;
        Event Player.meleeEvents[Event Player.currentEventIndices[7]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 74
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Reload")
{
    event
    {
        Subroutine;
        RecordFrameReload;
    }

    // Element Count: 73, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Is Button Held(Event Player, Button(Reload)) || Event Player.currentInputValues[8];
        If(First Of(Event Player.reloadEvents[Event Player.currentEventIndices[8]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[8] += Event Player.frame == 0 ? 0 : 1;
            Event Player.reloadEvents[Event Player.currentEventIndices[8]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.reloadEvents[Event Player.currentEventIndices[8]];
        Global._arrayConstructor[1] += 1;
        Event Player.reloadEvents[Event Player.currentEventIndices[8]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 65
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Throttle")
{
    event
    {
        Subroutine;
        RecordFrameThrottle;
    }

    // Element Count: 64, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Throttle Of(Event Player);
        If(First Of(Event Player.throttleEvents[Event Player.currentEventIndices[9]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[9] += Event Player.frame == 0 ? 0 : 1;
            Event Player.throttleEvents[Event Player.currentEventIndices[9]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.throttleEvents[Event Player.currentEventIndices[9]];
        Global._arrayConstructor[1] += 1;
        Event Player.throttleEvents[Event Player.currentEventIndices[9]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 65
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Facing")
{
    event
    {
        Subroutine;
        RecordFrameFacing;
    }

    // Element Count: 64, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Facing Direction Of(Event Player);
        If(First Of(Event Player.facingEvents[Event Player.currentEventIndices[10]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[10] += Event Player.frame == 0 ? 0 : 1;
            Event Player.facingEvents[Event Player.currentEventIndices[10]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.facingEvents[Event Player.currentEventIndices[10]];
        Global._arrayConstructor[1] += 1;
        Event Player.facingEvents[Event Player.currentEventIndices[10]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 65
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame - Weapon")
{
    event
    {
        Subroutine;
        RecordFrameWeapon;
    }

    // Element Count: 64, Action Count: 8
    // Largest Action Index: 1 using 16 Elements
    actions
    {
        Event Player.sampleValue = Weapon(Event Player);
        If(First Of(Event Player.weaponEvents[Event Player.currentEventIndices[11]]) != Event Player.sampleValue);
            Event Player.currentEventIndices[11] += Event Player.frame == 0 ? 0 : 1;
            Event Player.weaponEvents[Event Player.currentEventIndices[11]] = Array(Event Player.sampleValue, 0);
        End;
        Global._arrayConstructor = Event Player.weaponEvents[Event Player.currentEventIndices[11]];
        Global._arrayConstructor[1] += 1;
        Event Player.weaponEvents[Event Player.currentEventIndices[11]] = Global._arrayConstructor;
    }
}

// Rule Element Count: 15
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Record Frame")
{
    event
    {
        Subroutine;
        RecordFrame;
    }

    // Element Count: 14, Action Count: 13
    // Largest Action Index: 12 using 2 Elements
    actions
    {
        Call Subroutine(RecordFramePrimaryFire);
        Call Subroutine(RecordFrameSecondaryFire);
        Call Subroutine(RecordFrameAbility1);
        Call Subroutine(RecordFrameAbility2);
        Call Subroutine(RecordFrameUltimate);
        Call Subroutine(RecordFrameJump);
        Call Subroutine(RecordFrameCrouch);
        Call Subroutine(RecordFrameMelee);
        Call Subroutine(RecordFrameReload);
        Call Subroutine(RecordFrameThrottle);
        Call Subroutine(RecordFrameFacing);
        Call Subroutine(RecordFrameWeapon);
        Event Player.frame += 1;
    }
}

// Rule Element Count: 40
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Recording Loop")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 7, Condition Count: 1
    conditions
    {
        Event Player.replayState == 1;
    }

    // Element Count: 32, Action Count: 9
    // Largest Action Index: 0 using 23 Elements
    actions
    {
        "End the recording if the player opens the menu, switches heroes, or exceeds the maximum sample count"
        If(Event Player.currentMenuState != 0 || Hero Of(Event Player) != Event Player.recordingHero || Event Player.sampleCount >= 999);
            Call Subroutine(Recorder_StopRecording);
            Abort;
        End;
        Call Subroutine(RecordFrame);
        Event Player.currentInputValues = Empty Array;
        Call Subroutine(UpdateSampleCount);
        Wait(0.016, Abort When False);
        Loop If Condition Is True;
    }
}

// Rule Element Count: 60
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Primary Fire")
{
    event
    {
        Subroutine;
        PlayFramePrimaryFire;
    }

    // Element Count: 59, Action Count: 15
    // Largest Action Index: 11 using 17 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.primaryFireEvents[First Of(Event Player.currentEventIndices)]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Primary Fire)));
                Start Holding Button(Event Player, Button(Primary Fire));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Primary Fire)));
                Stop Holding Button(Event Player, Button(Primary Fire));
            End;
        End;
        Event Player.currentEventFrames[0] += 1;
        If(First Of(Event Player.currentEventFrames) >= Event Player.primaryFireEvents[First Of(Event Player.currentEventIndices)][1]);
            Event Player.currentEventIndices[0] += 1;
            Event Player.currentEventFrames[0] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Secondary Fire")
{
    event
    {
        Subroutine;
        PlayFrameSecondaryFire;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.secondaryFireEvents[Event Player.currentEventIndices[1]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Secondary Fire)));
                Start Holding Button(Event Player, Button(Secondary Fire));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Secondary Fire)));
                Stop Holding Button(Event Player, Button(Secondary Fire));
            End;
        End;
        Event Player.currentEventFrames[1] += 1;
        If(Event Player.currentEventFrames[1] >= Event Player.secondaryFireEvents[Event Player.currentEventIndices[1]][1]);
            Event Player.currentEventIndices[1] += 1;
            Event Player.currentEventFrames[1] = 0;
        End;
    }
}

// Rule Element Count: 27
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Rein - Ability 1 Handling")
{
    event
    {
        Subroutine;
        Rein_Ability1Handling;
    }

    // Element Count: 26, Action Count: 5
    // Largest Action Index: 0 using 10 Elements
    actions
    {
        Wait Until(!Is Button Held(Event Player, Button(Ability 1)) || !Is Using Ability 1(Event Player), 1000000);
        Abort If(!Is Using Ability 1(Event Player));
        Wait Until(Is Button Held(Event Player, Button(Ability 1)) || !Is Using Ability 1(Event Player), 1000000);
        Abort If(!Is Using Ability 1(Event Player));
        Cancel Primary Action(Event Player);
    }
}

// Rule Element Count: 67
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Ability 1")
{
    event
    {
        Subroutine;
        PlayFrameAbility1;
    }

    // Element Count: 66, Action Count: 16
    // Largest Action Index: 12 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.ability1Events[Event Player.currentEventIndices[2]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Ability 1)));
                Start Holding Button(Event Player, Button(Ability 1));
                "Allow bot rein to cancel charge"
                Start Rule(Rein_Ability1Handling, Do Nothing);
            End;
        Else;
            If(Is Button Held(Event Player, Button(Ability 1)));
                Stop Holding Button(Event Player, Button(Ability 1));
            End;
        End;
        Event Player.currentEventFrames[2] += 1;
        If(Event Player.currentEventFrames[2] >= Event Player.ability1Events[Event Player.currentEventIndices[2]][1]);
            Event Player.currentEventIndices[2] += 1;
            Event Player.currentEventFrames[2] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Ability 2")
{
    event
    {
        Subroutine;
        PlayFrameAbility2;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.ability2Events[Event Player.currentEventIndices[3]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Ability 2)));
                Start Holding Button(Event Player, Button(Ability 2));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Ability 2)));
                Stop Holding Button(Event Player, Button(Ability 2));
            End;
        End;
        Event Player.currentEventFrames[3] += 1;
        If(Event Player.currentEventFrames[3] >= Event Player.ability2Events[Event Player.currentEventIndices[3]][1]);
            Event Player.currentEventIndices[3] += 1;
            Event Player.currentEventFrames[3] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Ultimate")
{
    event
    {
        Subroutine;
        PlayFrameUltimate;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.ultimateEvents[Event Player.currentEventIndices[4]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Ultimate)));
                Start Holding Button(Event Player, Button(Ultimate));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Ultimate)));
                Stop Holding Button(Event Player, Button(Ultimate));
            End;
        End;
        Event Player.currentEventFrames[4] += 1;
        If(Event Player.currentEventFrames[4] >= Event Player.ultimateEvents[Event Player.currentEventIndices[4]][1]);
            Event Player.currentEventIndices[4] += 1;
            Event Player.currentEventFrames[4] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Melee")
{
    event
    {
        Subroutine;
        PlayFrameMelee;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.meleeEvents[Event Player.currentEventIndices[7]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Melee)));
                Start Holding Button(Event Player, Button(Melee));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Melee)));
                Stop Holding Button(Event Player, Button(Melee));
            End;
        End;
        Event Player.currentEventFrames[7] += 1;
        If(Event Player.currentEventFrames[7] >= Event Player.meleeEvents[Event Player.currentEventIndices[7]][1]);
            Event Player.currentEventIndices[7] += 1;
            Event Player.currentEventFrames[7] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Reload")
{
    event
    {
        Subroutine;
        PlayFrameReload;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.reloadEvents[Event Player.currentEventIndices[8]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Reload)));
                Start Holding Button(Event Player, Button(Reload));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Reload)));
                Stop Holding Button(Event Player, Button(Reload));
            End;
        End;
        Event Player.currentEventFrames[8] += 1;
        If(Event Player.currentEventFrames[8] >= Event Player.reloadEvents[Event Player.currentEventIndices[8]][1]);
            Event Player.currentEventIndices[8] += 1;
            Event Player.currentEventFrames[8] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Jump")
{
    event
    {
        Subroutine;
        PlayFrameJump;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.jumpEvents[Event Player.currentEventIndices[5]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Jump)));
                Start Holding Button(Event Player, Button(Jump));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Jump)));
                Stop Holding Button(Event Player, Button(Jump));
            End;
        End;
        Event Player.currentEventFrames[5] += 1;
        If(Event Player.currentEventFrames[5] >= Event Player.jumpEvents[Event Player.currentEventIndices[5]][1]);
            Event Player.currentEventIndices[5] += 1;
            Event Player.currentEventFrames[5] = 0;
        End;
    }
}

// Rule Element Count: 66
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Crouch")
{
    event
    {
        Subroutine;
        PlayFrameCrouch;
    }

    // Element Count: 65, Action Count: 15
    // Largest Action Index: 11 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.crouchEvents[Event Player.currentEventIndices[6]]);
        If(Event Player.sampleValue == True);
            If(!Is Button Held(Event Player, Button(Crouch)));
                Start Holding Button(Event Player, Button(Crouch));
            End;
        Else;
            If(Is Button Held(Event Player, Button(Crouch)));
                Stop Holding Button(Event Player, Button(Crouch));
            End;
        End;
        Event Player.currentEventFrames[6] += 1;
        If(Event Player.currentEventFrames[6] >= Event Player.crouchEvents[Event Player.currentEventIndices[6]][1]);
            Event Player.currentEventIndices[6] += 1;
            Event Player.currentEventFrames[6] = 0;
        End;
    }
}

// Rule Element Count: 62
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Throttle")
{
    event
    {
        Subroutine;
        PlayFrameThrottle;
    }

    // Element Count: 61, Action Count: 9
    // Largest Action Index: 5 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.throttleEvents[Event Player.currentEventIndices[9]]);
        If(Throttle Of(Event Player) != Event Player.sampleValue);
            Start Throttle In Direction(Event Player, Normalize(Evaluate Once(Event Player.sampleValue)), Magnitude Of(Evaluate Once(Event Player.sampleValue)), To Player, Replace Existing Throttle, Direction And Magnitude);
        End;
        Event Player.currentEventFrames[9] += 1;
        If(Event Player.currentEventFrames[9] >= Event Player.throttleEvents[Event Player.currentEventIndices[9]][1]);
            Event Player.currentEventIndices[9] += 1;
            Event Player.currentEventFrames[9] = 0;
        End;
    }
}

// Rule Element Count: 54
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Facing")
{
    event
    {
        Subroutine;
        PlayFrameFacing;
    }

    // Element Count: 53, Action Count: 9
    // Largest Action Index: 5 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.facingEvents[Event Player.currentEventIndices[10]]);
        If(Facing Direction Of(Event Player) != Event Player.sampleValue);
            Set Facing(Event Player, Event Player.sampleValue, To World);
        End;
        Event Player.currentEventFrames[10] += 1;
        If(Event Player.currentEventFrames[10] >= Event Player.facingEvents[Event Player.currentEventIndices[10]][1]);
            Event Player.currentEventIndices[10] += 1;
            Event Player.currentEventFrames[10] = 0;
        End;
    }
}

// Rule Element Count: 54
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame - Weapon")
{
    event
    {
        Subroutine;
        PlayFrameWeapon;
    }

    // Element Count: 53, Action Count: 9
    // Largest Action Index: 5 using 21 Elements
    actions
    {
        Event Player.sampleValue = First Of(Event Player.weaponEvents[Event Player.currentEventIndices[11]]);
        If(Weapon(Event Player) != Event Player.sampleValue);
            Set Weapon(Event Player, Event Player.sampleValue);
        End;
        Event Player.currentEventFrames[11] += 1;
        If(Event Player.currentEventFrames[11] >= Event Player.weaponEvents[Event Player.currentEventIndices[11]][1]);
            Event Player.currentEventIndices[11] += 1;
            Event Player.currentEventFrames[11] = 0;
        End;
    }
}

// Rule Element Count: 61
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Loop Clip")
{
    event
    {
        Subroutine;
        LoopClip;
    }

    // Element Count: 60, Action Count: 19
    // Largest Action Index: 15 using 14 Elements
    actions
    {
        Event Player.botReadyToReplay = False;
        Event Player.frame = 0;
        Event Player.currentEventIndices = Empty Array;
        Event Player.currentEventFrames = Empty Array;
        Stop Forcing Player To Be Hero(Event Player);
        Respawn(Event Player);
        Wait Until(Hero Of(Event Player) != Event Player.recordingHero, 0.25);
        Start Forcing Player To Be Hero(Event Player, Event Player.recordingHero);
        Teleport(Event Player, First Of(Event Player.replayResetPoint));
        Stop Facing(Event Player);
        Wait(0.016, Ignore Condition);
        Set Facing(Event Player, Event Player.replayResetPoint[2], To World);
        "Because for SOME REASON setting FACING and TELEPORTING in the SAME FRAME cancels the TELEPORT"
        Wait(0.032, Ignore Condition);
        Start Facing(Event Player, Event Player.replayResetPoint[2], 1000, To World, Direction And Turn Rate);
        Wait(0.016, Ignore Condition);
        Wait Until(Angle Between Vectors(Facing Direction Of(Event Player), Event Player.replayResetPoint[2]) < 0.1, 0.25);
        Stop Facing(Event Player);
        Wait(0.5, Ignore Condition);
        Event Player.botReadyToReplay = True;
    }
}

// Rule Element Count: 44
rule("[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Play Frame (a very good YouTube channel btw)")
{
    event
    {
        Subroutine;
        PlayFrame;
    }

    // Element Count: 43, Action Count: 20
    // Largest Action Index: 17 using 10 Elements
    actions
    {
        If(Event Player.frame < Event Player.recordingLength);
            If(Event Player.frame > 0);
                Call Subroutine(PlayFramePrimaryFire);
                Call Subroutine(PlayFrameSecondaryFire);
                Call Subroutine(PlayFrameAbility1);
                Call Subroutine(PlayFrameAbility2);
                Call Subroutine(PlayFrameUltimate);
                Call Subroutine(PlayFrameMelee);
                Call Subroutine(PlayFrameReload);
            End;
            Call Subroutine(PlayFrameJump);
            Call Subroutine(PlayFrameCrouch);
            Call Subroutine(PlayFrameThrottle);
            Call Subroutine(PlayFrameFacing);
            Call Subroutine(PlayFrameWeapon);
        End;
        Event Player.frame += 1;
        If(Global.SHOULD_LOOP_CLIP && Event Player.frame >= Global.longestRecordingLength);
            Call Subroutine(LoopClip);
        End;
    }
}

// Rule Element Count: 18
rule("[interface/dummyBotsAndReplay/replay/replayDefs.del] Playback Loop")
{
    event
    {
        Ongoing - Each Player;
        All;
        All;
    }

    // Element Count: 13, Condition Count: 2
    conditions
    {
        Event Player.replayState == 2;
        Event Player.botReadyToReplay == True;
    }

    // Element Count: 4, Action Count: 3
    // Largest Action Index: 1 using 2 Elements
    actions
    {
        Call Subroutine(PlayFrame);
        Wait(0.016, Abort When False);
        Loop If Condition Is True;
    }
}
