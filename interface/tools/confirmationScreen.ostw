import "../menu.ostw";

Number endGameBtnsY: -0.7;
Number endGameBtnsSpread: 0.7;
Number endGameBtnsWidth: 0.4;
Number endGameBtnsHeight: 0.2;

void CreateEndGameConfirmationScreen() {
  # Create confirm and abort buttons
  OnScreenText.CreateOnScreenText(
    VisibleTo: LocalPlayer().currentMenuState == MenuState.CONFIRMATION_SCREEN ? LocalPlayer() : null,
    Header: $"Are you sure you want to {LocalPlayer().actionToConfirm}?",
    PositionX: 0,
    PositionY: 1,
    Scale: 3,
    Reevaluation: InworldTextRev.VisibleToPositionAndString,
    Color: Color.Rose,
    Spectators: Spectators.VisibleNever
  );
  OnScreenText.CreateOnScreenText(
    VisibleTo: LocalPlayer().currentMenuState == MenuState.CONFIRMATION_SCREEN ? LocalPlayer() : null,
    Header: "[YES]",
    PositionX: -endGameBtnsSpread,
    PositionY: endGameBtnsY,
    Scale: 3,
    Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
    Color: cursorOnConfirmBtn(LocalPlayer()) ? selectedColor : Color.Red,
    Spectators: Spectators.VisibleNever
  );
  OnScreenText.CreateOnScreenText(
    VisibleTo: LocalPlayer().currentMenuState == MenuState.CONFIRMATION_SCREEN ? LocalPlayer() : null,
    Header: "[NO]",
    PositionX: endGameBtnsSpread,
    PositionY: endGameBtnsY,
    Scale: 3,
    Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
    Color: cursorOnCancelBtn(LocalPlayer()) ? selectedColor : Color.LimeGreen,
    Spectators: Spectators.VisibleNever
  );
}

Boolean cursorOnMainEndGameBtn(Player p = EventPlayer()):
  isSelectingButton(p, 3, 3);
Boolean cursorOnConfirmBtn(Player p = EventPlayer()):
  isSelectingButton(p, 0, 0);
Boolean cursorOnCancelBtn(Player p = EventPlayer()):
  isSelectingButton(p, 1, 0);

rule: "Initiate confirmation dialog"
Event.OngoingPlayer
if (currentMenuState == MenuState.CONFIRMATION_SCREEN)
if (IsButtonHeld(Button: Button.PrimaryFire))
{
  menuXIndex = 1; menuYIndex = 0;
}

void HandleConfirmationScreenClick() "Handle confirm/cancel"
{
  if (cursorOnCancelBtn()) {
    confirmationState = ConfirmationState.CANCELLED;
  } else if (cursorOnConfirmBtn()) {
    confirmationState = ConfirmationState.CONFIRMED;
  }
}

enum ConfirmationState {
  UNDECIDED,
  CONFIRMED,
  CANCELLED
}

playervar String actionToConfirm;
playervar ConfirmationState confirmationState;

void WaitForConfirmation(in String action, in Player p = EventPlayer()) {
  p.actionToConfirm = action;
  p.confirmationState = ConfirmationState.UNDECIDED;
  OpenMenuToPage(p, MenuState.CONFIRMATION_SCREEN);
  WaitUntil(p.confirmationState != ConfirmationState.UNDECIDED, 1000000);
}

