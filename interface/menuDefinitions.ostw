import "../lib/logs/logs.del";
import "../OSTWUtils/OnScreenText.del";
import "../OSTWUtils/Math.del";

enum MenuState
{
  CLOSED = 0,
  MAIN_MENU,
  CONFIRMING_END_GAME,
  INFORMATION,
  MODIFICATIONS,
  TOOLS,
  DUMMY_BOTS_AND_REPLAY,
  EDITING_DUMMY_BOT
}

globalvar Any[][] ButtonActionGrid;
playervar String[][] ButtonLabelGrid; // Player variable so that the display may update per-player
playervar Color[][] ButtonColorGrid; // Player variable so that the display may update per-player

playervar MenuState currentMenuState = MenuState.CLOSED;
// playervar Cursor | Number cursor = -1;
playervar Number menuXIndex; // Positive to the right
playervar Number menuYIndex; // Positive downwards
playervar Boolean hideMenuOpenTooltip = WorkshopSettingToggle(MenuSettingsCategory, "Hide Before-First-Use Menu Open/Close Tooltip", true);

// Index is rowIndex * numCols + colIndex
MenuState[] mainMenuActionGrid: ButtonActionGrid[MenuState.MAIN_MENU];

/** Menu parameters */
Number xLim: 3.0;
Number yLim: 1.25;
Number firstRowY: 1.75;
Number rowSeparation: 0.75;
Number firstColumnX: -3.0;
Number columnSeparation: 1.5;

/** Utility function definitions */
Number rowIndexToY(Number rowIndex): firstRowY - (rowSeparation * rowIndex);
Number colIndexToX(Number colIndex): firstColumnX + (columnSeparation * colIndex);
Number numCols: RoundToInteger((xLim - firstColumnX) / columnSeparation, Rounding.Down) + 1; // 5
Number numRows: RoundToInteger((firstRowY + yLim) / rowSeparation, Rounding.Down) + 1; // 5
Number gridIndex(Number colIndex, Number rowIndex): rowIndex * numCols + colIndex;
Boolean isSelectingButton(in Player p = LocalPlayer(), Number colIndex = 0, Number rowIndex = 0): p.menuXIndex == colIndex && p.menuYIndex == rowIndex;
Any[] currentActionGrid(in Player p = EventPlayer()): ButtonActionGrid[p.currentMenuState];
String[] currentLabelGrid(in Player p = LocalPlayer()): p.ButtonLabelGrid[p.currentMenuState];
Color[] currentColorGrid(in Player p = LocalPlayer()): p.ButtonColorGrid[p.currentMenuState];
Number currentGridIndex(in Player p = EventPlayer()): gridIndex(p.menuXIndex, p.menuYIndex);
Any currentActionItem(in Player p = EventPlayer()): currentActionGrid(p)[currentGridIndex(p)];

void printMenuValues() {
  LogToInspector(<"Limits | xLeft: <0>, xRight: <1>, yTop: <2>, yBottom: <3>", firstColumnX, xLim, firstRowY, -yLim>);
  LogToInspector("Separations | row: {0}, col: {1}".Format([rowSeparation, columnSeparation]));
  LogToInspector(<"numCols calc | numerator: <0>, denominator: <1>, raw result: <2>, final result: <3>", xLim - firstColumnX, columnSeparation, (xLim - firstColumnX) / columnSeparation + 1, numCols>);
  LogToInspector(<"numRows calc | numerator: <0>, denominator: <1>, raw result: <2>, final result: <3>", firstRowY + yLim, rowSeparation, (firstRowY + yLim) / rowSeparation + 1, numRows>);
}

void CloseMenu(in Player player) {
  MinWait();
  player.currentMenuState = MenuState.CLOSED;
}

Color selectedColor: CustomColor(255,255,255,155 + 100 * SineFromDegrees((TotalTimeElapsed() * 720) % 360));
Boolean isSelectingGridIndex(Player p = EventPlayer(), Number x = 0, Number y = 0): p.menuXIndex == x && p.menuYIndex == y;

MenuState[] MenuStatesToHideDefaultButtonsIn: [MenuState.CLOSED, MenuState.CONFIRMING_END_GAME];
Any menuButton(in Number colIndex, in Number rowIndex):
  OnScreenText.CreateOnScreenText(
    VisibleTo: MenuStatesToHideDefaultButtonsIn.Contains(LocalPlayer().currentMenuState) ? null : LocalPlayer(),
    Header: currentLabelGrid()[gridIndex(colIndex, rowIndex)],
    PositionX: colIndexToX(colIndex),
    PositionY: rowIndexToY(rowIndex),
    Scale: 2,
    Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
    Color: isSelectingGridIndex(LocalPlayer(), colIndex, rowIndex) && ButtonActionGrid[LocalPlayer().currentMenuState][currentGridIndex(LocalPlayer())] ? selectedColor : currentColorGrid()[gridIndex(colIndex, rowIndex)],
    Spectators: Spectators.VisibleNever
  );

/** Menu navigation definitions and helper functions */
playervar Number rowOffset!;
playervar Number colOffset!;

void zeroOffsets() playervar "[interface/menuDefinitions.ostw | SUB] Zero row and column offsets"
{
  rowOffset = 0; colOffset = 0;
}

void applyOffsets() playervar "[interface/menuDefinitions.ostw | SUB] Apply current offsets"
{
  menuXIndex = Math.MathModulo(menuXIndex + colOffset, numCols);
  menuYIndex = Math.MathModulo(menuYIndex + rowOffset, numRows);
}

void findLeft() playervar "[interface/menuDefinitions.ostw | SUB] Find first item to the left" {
  zeroOffsets();
  while (AbsoluteValue(rowOffset) < numRows / 2) {
    colOffset = -1;
    while (AbsoluteValue(colOffset) < numCols) {
      # If item here, shift menu selection to the new item
      if (currentActionGrid()[gridIndex(
          colIndex: Math.MathModulo(menuXIndex + colOffset, numCols),
          rowIndex: menuYIndex + rowOffset)] != 0) {
        applyOffsets();
        return;
      }
      colOffset--;
    }
    if (rowOffset >= 0) {
      rowOffset++;
    }
    rowOffset = -rowOffset;
  }
}

void findRight() playervar "[interface/menuDefinitions.ostw | SUB] Find first item to the right" {
  zeroOffsets();
  while (AbsoluteValue(rowOffset) < numRows / 2) {
    colOffset = 1;
    while (colOffset < numCols) {
      # If item here, shift menu selection to the new item
      if (currentActionGrid()[gridIndex(
          colIndex: Math.MathModulo(menuXIndex + colOffset, numCols),
          rowIndex: menuYIndex + rowOffset)] != 0) {
        applyOffsets();
        return;
      }
      colOffset++;
    }
    if (rowOffset >= 0) {
      rowOffset++;
    }
    rowOffset = -rowOffset;
  }
}

void findUp() playervar "[interface/menuDefinitions.ostw | SUB] Find first item upwards" {
  zeroOffsets();
  while (AbsoluteValue(colOffset) < numCols / 2) {
    rowOffset = -1;
    while (AbsoluteValue(rowOffset) < numRows) {
      # If item here, shift menu selection to the new item
      if (currentActionGrid()[gridIndex(
          colIndex: menuXIndex + colOffset,
          rowIndex: Math.MathModulo(menuYIndex + rowOffset, numRows))] != 0) {
        applyOffsets();
        return;
      }
      rowOffset--;
    }
    if (colOffset >= 0) {
      colOffset++;
    }
    colOffset = -colOffset;
  }
}

void findDown() playervar "interface/menuDefinitions.ostw | [SUB] Find first item downwards" {
  zeroOffsets();
  while (AbsoluteValue(colOffset) < numCols / 2) {
    rowOffset = 1;
    while (rowOffset < numRows) {
      # If item here, shift menu selection to the new item
      if (currentActionGrid()[gridIndex(
          colIndex: menuXIndex + colOffset,
          rowIndex: Math.MathModulo(menuYIndex + rowOffset, numRows))] != 0) {
        applyOffsets();
        return;
      }
      rowOffset++;
    }
    if (colOffset >= 0) {
      colOffset++;
    }
    colOffset = -colOffset;
  }
}

# Sets the appearance of a given button
void UpdateButtonAppearance(in MenuState menuPage, in Number colIndex, in Number rowIndex, in String newLabel, in Color newColor, in Player p = EventPlayer())
{
  p.ButtonLabelGrid[menuPage][gridIndex(colIndex, rowIndex)] = newLabel;
  p.ButtonColorGrid[menuPage][gridIndex(colIndex, rowIndex)] = newColor;
}

void UpdateButtonColor(in MenuState menuPage, in Number colIndex, in Number rowIndex, in Color newColor, in Player p = EventPlayer())
{
  p.ButtonColorGrid[menuPage][gridIndex(colIndex, rowIndex)] = newColor;
}

void UpdateButtonLabel(in MenuState menuPage, in Number colIndex, in Number rowIndex, in String newLabel, in Player p = EventPlayer())
{
  p.ButtonLabelGrid[menuPage][gridIndex(colIndex, rowIndex)] = newLabel;
}
