import "../main.ostw";
import "./menuDefinitions.ostw";
import "../lib/utils/Colors.del";
import "../lib/player/buttonControl.del";

import "tools/toolsMenu.ostw";
import "information/informationMenu.ostw";
import "modifications/modsMenu.ostw";
import "dummyBotsAndReplay/botsMenu.ostw";
import "dummyBotsAndReplay/botEditPage.del";

playervar ResetPoint menuActivationPoint;

rule: "[interface/menu.ostw] Set up action grid" -100
{
  ButtonActionGrid = [];
  ButtonActionGrid[MenuState.MAIN_MENU] = mainMenuButtonActions;
  ButtonActionGrid[MenuState.CONFIRMING_END_GAME] = [true, true];
  ButtonActionGrid[MenuState.TOOLS] = toolsMenuButtonActions;
  ButtonActionGrid[MenuState.INFORMATION] = informationMenuButtonActions;
  ButtonActionGrid[MenuState.MODIFICATIONS] = modificationMenuButtonActions;
  ButtonActionGrid[MenuState.DUMMY_BOTS_AND_REPLAY] = botsReplayMenuButtonActions;
  ButtonActionGrid[MenuState.EDITING_DUMMY_BOT] = botEditPageButtonActions;
}
rule: "[interface/menu.ostw] Set up button label grid" -100
Event.OngoingPlayer
{
  ButtonLabelGrid = [];
  ButtonLabelGrid[MenuState.MAIN_MENU] = mainMenuButtonLabels;
  ButtonLabelGrid[MenuState.TOOLS] = toolsMenuButtonLabels;
  ButtonLabelGrid[MenuState.INFORMATION] = informationMenuButtonLabels;
  ButtonLabelGrid[MenuState.MODIFICATIONS] = modificationMenuButtonLabels;
  ButtonLabelGrid[MenuState.DUMMY_BOTS_AND_REPLAY] = botsReplayMenuButtonLabels;
  ButtonLabelGrid[MenuState.EDITING_DUMMY_BOT] = botEditPageButtonLabels;
}
rule: "[interface/menu.ostw] Set up color grid" -100
Event.OngoingPlayer
{
  ButtonColorGrid = [];
  ButtonColorGrid[MenuState.MAIN_MENU] = mainMenuButtonColors;
  ButtonColorGrid[MenuState.TOOLS] = toolsMenuButtonColors;
  ButtonColorGrid[MenuState.INFORMATION] = informationMenuButtonColors;
  ButtonColorGrid[MenuState.MODIFICATIONS] = modificationMenuButtonColors;
  ButtonColorGrid[MenuState.DUMMY_BOTS_AND_REPLAY] = botsReplayMenuButtonColors;
  ButtonColorGrid[MenuState.EDITING_DUMMY_BOT] = botEditPageButtonColors;
}

MenuState[] mainMenuButtonActions: [
  MenuState.CLOSED, MenuState.CLOSED,      MenuState.CLOSED, MenuState.CLOSED,                MenuState.CLOSED,
  MenuState.CLOSED, MenuState.INFORMATION, MenuState.CLOSED, MenuState.MODIFICATIONS,         MenuState.CLOSED,
  MenuState.CLOSED, MenuState.CLOSED,      MenuState.CLOSED, MenuState.CLOSED,                MenuState.CLOSED,
  MenuState.CLOSED, MenuState.TOOLS,       MenuState.CLOSED, MenuState.DUMMY_BOTS_AND_REPLAY, MenuState.CLOSED,
  MenuState.CLOSED, MenuState.CLOSED,      MenuState.CLOSED, MenuState.CLOSED,                MenuState.CLOSED
];
String[] mainMenuButtonLabels: [
  "", "",            "", "",                  "",
  "", "Information", "", "Modifications",     "",
  "", "",            "", "",                  "",
  "", "Tools",       "", "Dummy Bots",        "",
  "", "",            "", "",                  ""
];
Color[] mainMenuButtonColors: [
  null, null,               null, null,         null,
  null, LighterRed,  null, Color.Green,  null,
  null, null,               null, null,         null,
  null, Color.SkyBlue,      null, Color.Yellow, null,
  null, null,               null, null,         null
];

rule: "[interface/menu.ostw] Global menu setup"
{
  # Create prompt to open mneu
  CreateHudText(
    VisibleTo:     AllPlayers().Contains(LocalPlayer()) && (!LocalPlayer().hideMenuOpenTooltip || (LocalPlayer().currentMenuState != MenuState.CLOSED)) ? LocalPlayer() : null,
    Text:          <"Hold [<0>] to <1> menu",
                      InputBindingString(Button.Interact),
                      LocalPlayer().currentMenuState == MenuState.CLOSED ? "open" : "close">,
    Location:      Location.Top,
    SortOrder:     1,
    TextColor:     LocalPlayer().currentMenuState == MenuState.CLOSED ? Color.Green : Color.Red,
    Reevaluation:  HudTextRev.VisibleToStringAndColor,
    Spectators:    Spectators.VisibleNever);
  # Create controls hints
  OnScreenText.CreateOnScreenText(
    VisibleTo:     LocalPlayer().currentMenuState != MenuState.CLOSED ? LocalPlayer() : null,
    Header:          "{0} SELECT  |  {2} {1}".Format([InputBindingString(Button.PrimaryFire), InputBindingString(Button.SecondaryFire), LocalPlayer().currentMenuState == MenuState.MAIN_MENU ? "CLOSE" : "BACK"]),
    PositionX:     0,
    PositionY:     -1.48,
    Scale:         2,
    Color:         Color.White,
    Reevaluation:  InworldTextRev.VisibleToPositionAndString,
    Spectators:    Spectators.VisibleNever);
  OnScreenText.CreateOnScreenText(
    VisibleTo:     LocalPlayer().currentMenuState == MenuState.MAIN_MENU ? LocalPlayer() : null,
    Header:        "Use WASD to Navigate",
    PositionX:     0,
    PositionY:     -1.25,
    Scale:         2,
    Color:         Color.White,
    Reevaluation:  InworldTextRev.VisibleToPositionAndString,
    Spectators:    Spectators.VisibleNever);
  // # DEBUG: grid params
  // printMenuValues();
  # Create grid menu items
  for (Number colIndex = 0; colIndex < numCols; colIndex++) {
    for (Number rowIndex = 0; rowIndex < numRows; rowIndex++) {
      menuButton(EvaluateOnce(colIndex), EvaluateOnce(rowIndex));
    }
  }
  # Create bespoke end match confirm screen
  CreateEndGameConfirmationScreen();
  # Create background orbie
  CreateEffect(
    VisibleTo:    LocalPlayer().currentMenuState != MenuState.CLOSED ? LocalPlayer() : null,
    Type:         Effect.Orb,
    Color:        Color.Black,
    Position:     LocalPlayer().menuActivationPoint.eyePosition - 0.325 * LocalPlayer().menuActivationPoint.facing,
    Radius:       0.25,
    Reevaluation: EffectRev.VisibleToPositionAndRadius
  );

  # DEBUG: Show current menu state and current x/y menu indexes
  // CreateHudText(
  //   VisibleTo: LocalPlayer(),
  //   Text: $"shape: {numCols}, {numRows} | x: {LocalPlayer().menuXIndex} | y: {LocalPlayer().menuYIndex} | val: {currentActionGrid(LocalPlayer())[gridIndex(LocalPlayer().menuXIndex, LocalPlayer().menuYIndex)]}",
  //   Reevaluation: HudTextRev.VisibleToAndString
  // );
}

rule: "[interface/menu.ostw] Initialize player (one-time activation)"
Event.OngoingPlayer
{
  if (hideMenuOpenTooltip) {
    WaitUntil(HasSpawned(), 1000000);
    Wait(1);
    SmallMessage(EventPlayer(), <"   Hold <0> to open menu", InputBindingString(Button.Interact)>);
  }
}

rule: "[interface/menu.ostw] When player first opens menu, hide tooltip when menu is closed"
Event.OngoingPlayer
if (!hideMenuOpenTooltip)
if (currentMenuState != MenuState.CLOSED)
{
  hideMenuOpenTooltip = true;
}

rule: "[interface/menu.ostw] Initialize player and perform cleanup"
Event.OngoingPlayer
if (currentMenuState != MenuState.CLOSED)
{
  // cursor = new Cursor();
  # Note that we store it for reevaluation, because changing heroes causes a respawn which overwrites non-reeval force pos and facing
  menuActivationPoint = NewResetFromPlayer(EventPlayer());
  SetAimSpeed(EventPlayer(), 0);
  StartFacing(EventPlayer(), menuActivationPoint.facing, 1000, Relative.ToWorld, FacingRev.None);
  StartForcingPlayerPosition(EventPlayer(), menuActivationPoint.location, false);
  SetGravity(EventPlayer(), 0);
  AddOneLockToAllButtons();
  SetInvisible(EventPlayer(), InvisibleTo.All);
  // SetStatus(EventPlayer(), null, Status.Asleep, 100000);
  SetStatus(EventPlayer(), null, Status.PhasedOut, 1000000);
  DisableKillFeed();
  DisableGameModeInworldUI();
  DisableGameModeHud();
  DisableHeroHud();
  StartCamera(EventPlayer(), menuActivationPoint.eyePosition, menuActivationPoint.eyePosition + menuActivationPoint.facing, 100);

  menuXIndex = 0; menuYIndex = 0;

  WaitUntil(currentMenuState == MenuState.CLOSED, 9999);

  StopCamera();
  EnableKillFeed();
  EnableGameModeInworldUI();
  EnableGameModeHud();
  EnableHeroHud();
  StopFacing(EventPlayer());
  StopForcingPlayerPosition();
  if (!isNoClipActive) SetGravity(EventPlayer(), 100);
  SetAimSpeed(EventPlayer(), 100);
  # Give a leniency period for buttons to be let go of
  Wait(0.25, WaitBehavior.RestartWhenTrue);
  RemoveOneLockFromAllButtons();
  SetInvisible(EventPlayer(), InvisibleTo.None);
  ClearStatus(EventPlayer(), Status.PhasedOut);
  // ClearStatus(EventPlayer(), Status.Asleep);
}

rule: "[interface/menu.ostw] When player holds Interact long enough, toggle menu"
Event.OngoingPlayer
if (IsAlive())
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
  Wait(0.5, WaitBehavior.AbortWhenFalse);
  if (currentMenuState == MenuState.CLOSED) {
    OpenMenuToPage();
  } else {
    CloseMenu();
  }
}

rule: "[interface/menu.ostw] Primary fire to select current item"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
  AbortIf(currentMenuState == MenuState.CLOSED);
  AbortIf(currentActionItem() == 0);
  switch (currentMenuState) {
    case MenuState.MAIN_MENU:
      HandleMainMenuClick();
      break;
    case MenuState.CONFIRMING_END_GAME:
      HandleConfirmEndGameClick();
      break;
    case MenuState.TOOLS:
      HandleToolsMenuClick();
      break;
    case MenuState.INFORMATION:
      HandleInformationMenuClick();
      break;
    case MenuState.MODIFICATIONS:
      HandleModificationClick();
      break;
    case MenuState.DUMMY_BOTS_AND_REPLAY:
      HandleBotsMenuClick();
      break;
    case MenuState.EDITING_DUMMY_BOT:
      HandleBotEditPageClick();
      break;
    case MenuState.EDITING_DUMMY_BOT_BUTTONS:
      BotButtonEdit_HandlePrimaryFire();
      break;
  }
}

rule: "[interface/menu.ostw] Secondary fire to go back"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
{
  AbortIf(currentMenuState == MenuState.CLOSED);
  if (currentMenuState == MenuState.MAIN_MENU) {
    CloseMenu(EventPlayer());
    return;
  }
  if (ArrayContains([MenuState.INFORMATION, MenuState.MODIFICATIONS, MenuState.TOOLS,
      MenuState.DUMMY_BOTS_AND_REPLAY], currentMenuState)) {
    OpenMenuToPage();
    return;
  }
  if (currentMenuState == MenuState.CONFIRMING_END_GAME) {
    OpenMenuToPage(EventPlayer(), MenuState.TOOLS);
    return;
  }
  if (currentMenuState == MenuState.EDITING_DUMMY_BOT_BUTTONS) {
    OpenMenuToPage(EventPlayer(), MenuState.EDITING_DUMMY_BOT);
    return;
  }
  if (currentMenuState == MenuState.EDITING_DUMMY_BOT) {
    # We need to clear the selected control so that the instructions are shown again
    selectedControl = null;
    CloseMenu(EventPlayer());
    return;
  }
}

rule: "[interface/menu.ostw] Menu left-right"
Event.OngoingPlayer
if (currentMenuState != MenuState.CLOSED)
if (AbsoluteValue(XOf(ThrottleOf(EventPlayer()))) > 0.5)
{
  if (currentMenuState == MenuState.EDITING_DUMMY_BOT_BUTTONS) {
    # The left-right function does nothing in this menu page
    Abort();
  }
  if (XOf(ThrottleOf(EventPlayer())) > 0) {
    findLeft();
  } else {
    findRight();
  }
}

rule: "[interface/menu.ostw] Menu up-down"
Event.OngoingPlayer
if (currentMenuState != MenuState.CLOSED)
if (AbsoluteValue(ZOf(ThrottleOf())) > 0.5) {
  if (currentMenuState == MenuState.EDITING_DUMMY_BOT_BUTTONS) {
    BotButtonEdit_HandleUpDown();
    return;
  }
  if (ZOf(ThrottleOf()) > 0) {
    findUp();
  } else {
    findDown();
  }
}

MenuState[] NO_AUTO_SET_INDICES_MENUS: [MenuState.CONFIRMING_END_GAME, MenuState.EDITING_DUMMY_BOT_BUTTONS];
rule: "[interface/menu.ostw] When menu state changes, find new first selection" -1
Event.OngoingPlayer
if (currentMenuState != MenuState.CLOSED)
{
  Wait(0.064, WaitBehavior.AbortWhenFalse);
  // # DEBUG
  // LogToInspector($"Current action grid element count: {CountOf(currentActionGrid())}");
  if (currentActionGrid() != 0 && !ArrayContains(NO_AUTO_SET_INDICES_MENUS, currentMenuState)) {
    AutoSetMenuIndices();
  }
  WaitUntil(currentMenuState != EvaluateOnce(currentMenuState), 1000000);
  LoopIfConditionIsTrue();
}

void AutoSetMenuIndices() {
  menuXIndex = 0; menuYIndex = 0;
  while (menuYIndex < numRows) {
    while (menuXIndex < numCols) {
      if (currentActionItem() != 0) {
        return;
      }
      menuXIndex = menuXIndex + 1;
    }
    menuYIndex = menuYIndex + 1;
    menuXIndex = 0;
  }
}

void HandleMainMenuClick() {
  currentMenuState = mainMenuActionGrid[currentGridIndex()];
}
