enum ConfigItem {
  METERS_OPTIMIZED_FOR_OVER_TIME,
  AUTO_REGEN_DELAY,
  BUTTON_SPAM_PERIOD,
  SLOW_MOTION_SPEED,
  PUNCHING_BAG_HEALTH_PERCENTAGE,
  INTERACT_DESTROYS_DEPLOYABLES_IN_REPLAY,
  RECORD_IN_SLOW_MOTION,
  LOOP_REPLAY,
  SHOW_REPLAY_TIMECODE,
  TOGGLE_QUICK_ACTIONS,
  // SHOULD_PUNCHIING_BAG_NAME_CHANGE,
  END_SENTINEL
}

String currentConfigItem: [
  "HPS/DPS Meter Optimization",
  "Auto-Regen Delay",
  "Button Spam Period",
  "Slow Motion Speed",
  "Punching Bag Health Proportion",
  "Interact Destroys Deployables In Replay",
  "Auto Enable Slow-Mo During Recording",
  "Loop Replay Playback",
  "Show Replay Timecode",
  "Quick Actions Enabled"
][currentConfigSelection];

// globalvar Boolean SHOULD_PUNCHIING_BAG_NAME_CHANGE = WorkshopSettingToggle(BotAndReplaySettingsCategory, "Should Punching Bag Name Change", true);

playervar ConfigItem currentConfigSelection;

String leftArrow: "◀";
String rightArrow: "▶";

String[] configMenuButtonLabels: [
  "", "", "", "", "",
  "", leftArrow, currentConfigItem, rightArrow, "",
  "", "", $"{OptimizeMetricsForOverTime ? 'Over Time' : 'Normal'}", "", "",
  "", "", "", "", "",
  "", "", "", "", ""
];

Color[] configMenuButtonColors: [
  null, null, null, null, null,
  null, Color.White, Color.White, Color.White, null,
  null, Color.White, Color.White, Color.White, null,
  null, null, null, null, null,
  null, null, null, null, null
];

void ConfigMenu_ThrottleUpDown() {
  if (ZOf(ThrottleOf()) > 0 && menuYIndex == 2) {
    menuYIndex = 1;
    UpdateButtonLabel(MenuState.CONFIG, 1, 1, leftArrow);
    UpdateButtonLabel(MenuState.CONFIG, 3, 1, rightArrow);
    UpdateButtonLabel(MenuState.CONFIG, 1, 2, "");
    UpdateButtonLabel(MenuState.CONFIG, 3, 2, "");
  } else {
    menuYIndex = 2;
    UpdateButtonLabel(MenuState.CONFIG, 1, 1, "");
    UpdateButtonLabel(MenuState.CONFIG, 3, 1, "");
    UpdateButtonLabel(MenuState.CONFIG, 1, 2, arrowNarrowSpacing + leftArrow);
    UpdateButtonLabel(MenuState.CONFIG, 3, 2, rightArrow + arrowNarrowSpacing);
  }
}

void ConfigMenu_ThrottleLeftRight() {
  # Set the current config item
  if (menuYIndex == 1) {
    if (XOf(ThrottleOf(EventPlayer())) > 0) {
      currentConfigSelection = currentConfigSelection - 1;
      if (currentConfigSelection < 0) {
        currentConfigSelection = ConfigItem.END_SENTINEL - 1;
      }
    } else {
      currentConfigSelection = currentConfigSelection + 1;
      if (currentConfigSelection >= ConfigItem.END_SENTINEL) {
        currentConfigSelection = 0;
      }
    }
    UpdateButtonLabel(MenuState.CONFIG, 2, 1, currentConfigItem);
    switch (currentConfigSelection) {
      case ConfigItem.METERS_OPTIMIZED_FOR_OVER_TIME:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{OptimizeMetricsForOverTime ? 'Over Time' : 'Normal'}");
        break;
      case ConfigItem.AUTO_REGEN_DELAY:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{AUTO_REGEN_DELAY}");
        break;
      case ConfigItem.BUTTON_SPAM_PERIOD:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{BUTTON_SPAM_PERIOD}");
        break;
      case ConfigItem.SLOW_MOTION_SPEED:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SLOW_MOTION_SPEED}");
        break;
      case ConfigItem.INTERACT_DESTROYS_DEPLOYABLES_IN_REPLAY:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{interactDestroysDeployableCompensation}");
        break;
      case ConfigItem.RECORD_IN_SLOW_MOTION:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{RECORD_IN_SLOW_MOTION}");
        break;
      case ConfigItem.LOOP_REPLAY:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SHOULD_LOOP_CLIP}");
        break;
      case ConfigItem.SHOW_REPLAY_TIMECODE:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SHOW_REPLAY_TIMECODES}");
        break;
      case ConfigItem.TOGGLE_QUICK_ACTIONS:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{TRIGGERS_ENABLED}");
        break;
      case ConfigItem.PUNCHING_BAG_HEALTH_PERCENTAGE:
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{punchingBagTargetHealthProportion}");
        break;
    }
    return;
  }
  # Modify the current config item
  if (XOf(ThrottleOf(EventPlayer())) > 0) {
    ConfigMenu_Left();
  } else {
    // Decrease the value
    ConfigMenu_Right();
  }
}

void ConfigMenu_Left() {
  switch (currentConfigSelection) {
    case ConfigItem.METERS_OPTIMIZED_FOR_OVER_TIME:
      OptimizeMetricsForOverTime = !OptimizeMetricsForOverTime;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{OptimizeMetricsForOverTime ? 'Over Time' : 'Normal'}");
      break;
    case ConfigItem.AUTO_REGEN_DELAY:
      if (AUTO_REGEN_DELAY <= 0.1) return;
      AUTO_REGEN_DELAY -= IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
      AUTO_REGEN_DELAY = Max(AUTO_REGEN_DELAY, 0.1);
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{AUTO_REGEN_DELAY}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) > 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (AUTO_REGEN_DELAY <= 0.1) {
          Abort();
        }
        AUTO_REGEN_DELAY -= IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
        AUTO_REGEN_DELAY = Max(AUTO_REGEN_DELAY, 0.1);
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{AUTO_REGEN_DELAY}");
        Wait(0.064, WaitBehavior.AbortWhenFalse);
      }
      break;
    case ConfigItem.BUTTON_SPAM_PERIOD:
      if (BUTTON_SPAM_PERIOD <= 0.1) return;
      BUTTON_SPAM_PERIOD -= IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
      BUTTON_SPAM_PERIOD = Max(BUTTON_SPAM_PERIOD, 0.1);
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{BUTTON_SPAM_PERIOD}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) > 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (BUTTON_SPAM_PERIOD <= 0.1) {
          Abort();
        }
        BUTTON_SPAM_PERIOD -= IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
        BUTTON_SPAM_PERIOD = Max(BUTTON_SPAM_PERIOD, 0.1);
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{BUTTON_SPAM_PERIOD}");
        Wait(0.064, WaitBehavior.AbortWhenFalse);
      }
      break;
    case ConfigItem.SLOW_MOTION_SPEED:
      if (SLOW_MOTION_SPEED <= 10) return;
      SLOW_MOTION_SPEED -= 5;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SLOW_MOTION_SPEED}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) > 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (SLOW_MOTION_SPEED <= 10) {
          Abort();
        }
        SLOW_MOTION_SPEED -= 5;
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SLOW_MOTION_SPEED}");
        Wait(IsButtonHeld(EventPlayer(), Button.Ability1) ? 0.064 : 0.1, WaitBehavior.AbortWhenFalse);
      }
      break;
    case ConfigItem.INTERACT_DESTROYS_DEPLOYABLES_IN_REPLAY:
      interactDestroysDeployableCompensation = !interactDestroysDeployableCompensation;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{interactDestroysDeployableCompensation}");
      break;
    case ConfigItem.RECORD_IN_SLOW_MOTION:
      RECORD_IN_SLOW_MOTION = !RECORD_IN_SLOW_MOTION;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{RECORD_IN_SLOW_MOTION}");
      break;
    case ConfigItem.LOOP_REPLAY:
      SHOULD_LOOP_CLIP = !SHOULD_LOOP_CLIP;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SHOULD_LOOP_CLIP}");
      break;
    case ConfigItem.SHOW_REPLAY_TIMECODE:
      SHOW_REPLAY_TIMECODES = !SHOW_REPLAY_TIMECODES;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SHOW_REPLAY_TIMECODES}");
      break;
    case ConfigItem.TOGGLE_QUICK_ACTIONS:
      TRIGGERS_ENABLED = !TRIGGERS_ENABLED;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{TRIGGERS_ENABLED}");
      break;
    case ConfigItem.PUNCHING_BAG_HEALTH_PERCENTAGE:
      if (punchingBagTargetHealthProportion <= 10) return;
      punchingBagTargetHealthProportion -= 5;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{punchingBagTargetHealthProportion}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) > 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (punchingBagTargetHealthProportion <= 10) {
          Abort();
        }
        punchingBagTargetHealthProportion -= 5;
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{punchingBagTargetHealthProportion}");
        Wait(IsButtonHeld(EventPlayer(), Button.Ability1) ? 0.064 : 0.1, WaitBehavior.AbortWhenFalse);
      }
      break;
  }
}

void ConfigMenu_Right() {
  switch (currentConfigSelection) {
    case ConfigItem.METERS_OPTIMIZED_FOR_OVER_TIME:
      OptimizeMetricsForOverTime = !OptimizeMetricsForOverTime;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{OptimizeMetricsForOverTime ? 'Over Time' : 'Normal'}");
      break;
    case ConfigItem.AUTO_REGEN_DELAY:
      if (AUTO_REGEN_DELAY >= 30) return;
      AUTO_REGEN_DELAY += IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
      AUTO_REGEN_DELAY = Min(AUTO_REGEN_DELAY, 30);
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{AUTO_REGEN_DELAY}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) < 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (AUTO_REGEN_DELAY >= 30) {
          Abort();
        }
        AUTO_REGEN_DELAY += IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
        AUTO_REGEN_DELAY = Min(AUTO_REGEN_DELAY, 30);
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{AUTO_REGEN_DELAY}");
        Wait(0.064, WaitBehavior.AbortWhenFalse);
      }
      break;
    case ConfigItem.BUTTON_SPAM_PERIOD:
      if (BUTTON_SPAM_PERIOD >= 30) return;
      BUTTON_SPAM_PERIOD += IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
      BUTTON_SPAM_PERIOD = Min(BUTTON_SPAM_PERIOD, 30);
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{BUTTON_SPAM_PERIOD}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) < 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (BUTTON_SPAM_PERIOD >= 30) {
          Abort();
        }
        BUTTON_SPAM_PERIOD += IsButtonHeld(EventPlayer(), Button.Ability1) ? 1 : 0.1;
        BUTTON_SPAM_PERIOD = Min(BUTTON_SPAM_PERIOD, 30);
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{BUTTON_SPAM_PERIOD}");
        Wait(0.064, WaitBehavior.AbortWhenFalse);
      }
      break;
    case ConfigItem.SLOW_MOTION_SPEED:
      if (SLOW_MOTION_SPEED >= 100) return;
      SLOW_MOTION_SPEED += 5;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SLOW_MOTION_SPEED}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) < 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (SLOW_MOTION_SPEED >= 100) {
          Abort();
        }
        SLOW_MOTION_SPEED += 5;
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SLOW_MOTION_SPEED}");
        Wait(IsButtonHeld(EventPlayer(), Button.Ability1) ? 0.064 : 0.1, WaitBehavior.AbortWhenFalse);
      }
      break;
    case ConfigItem.INTERACT_DESTROYS_DEPLOYABLES_IN_REPLAY:
      interactDestroysDeployableCompensation = !interactDestroysDeployableCompensation;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{interactDestroysDeployableCompensation}");
      break;
    case ConfigItem.RECORD_IN_SLOW_MOTION:
      RECORD_IN_SLOW_MOTION = !RECORD_IN_SLOW_MOTION;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{RECORD_IN_SLOW_MOTION}");
      break;
    case ConfigItem.LOOP_REPLAY:
      SHOULD_LOOP_CLIP = !SHOULD_LOOP_CLIP;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SHOULD_LOOP_CLIP}");
      break;
    case ConfigItem.SHOW_REPLAY_TIMECODE:
      SHOW_REPLAY_TIMECODES = !SHOW_REPLAY_TIMECODES;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{SHOW_REPLAY_TIMECODES}");
      break;
    case ConfigItem.TOGGLE_QUICK_ACTIONS:
      TRIGGERS_ENABLED = !TRIGGERS_ENABLED;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{TRIGGERS_ENABLED}");
      break;
    case ConfigItem.PUNCHING_BAG_HEALTH_PERCENTAGE:
      if (punchingBagTargetHealthProportion >= 100) return;
      punchingBagTargetHealthProportion += 5;
      UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{punchingBagTargetHealthProportion}");
      tempMenuXIndex = menuXIndex;
      tempMenuYIndex = menuYIndex;
      SlowMoAgnosticWait(0.25, WaitBehavior.AbortWhenFalse);
      while (currentMenuState == MenuState.CONFIG
        && XOf(ThrottleOf()) < 0
        && menuXIndex == tempMenuXIndex
        && menuYIndex == tempMenuYIndex) {
        if (punchingBagTargetHealthProportion >= 100) {
          Abort();
        }
        punchingBagTargetHealthProportion += 5;
        UpdateButtonLabel(MenuState.CONFIG, 2, 2, $"{punchingBagTargetHealthProportion}");
        Wait(IsButtonHeld(EventPlayer(), Button.Ability1) ? 0.064 : 0.1, WaitBehavior.AbortWhenFalse);
      }
      break;
  }
}
