import "informationMenu.ostw";
import "../../lib/metrics/healingPerSecond.ostw";
import "../../lib/metrics/damagePerSecond.ostw";

rule: "[interface/information/metricsReadout.ostw] Player enables/disables heals dealt display"
Event.OngoingPlayer
if (activeInfoDisplays.Contains(InfoAction.HEALING_DEALT_PER_SECOND_DISPLAY))
{
  infoDisplayEntities[InfoAction.HEALING_DEALT_PER_SECOND_DISPLAY] = CreateHudText(
    VisibleTo: EventPlayer().currentMenuState == MenuState.CLOSED ? EventPlayer() : null,
    Header: <"HPS Dealt: <0>", UpdateEveryFrame((healDealtInPeriod) / durationToAverageOver)>,
    Subheader: <"Self: <0>", Max(0, UpdateEveryFrame((healDealtInPeriod - healDealtInPeriodNonSelf) / durationToAverageOver))>,
    Text: <"Other: <0><1>", UpdateEveryFrame((healDealtInPeriodNonSelf) / durationToAverageOver), MANY_SPACES>,
    SortOrder: activeInfoDisplays.IndexOf(InfoAction.HEALING_DEALT_PER_SECOND_DISPLAY)
  );
  UpdateButtonAppearance(MenuState.INFORMATION, 1, 3, "Hide HPS Dealt", Color.Gray);
  WaitUntil(!activeInfoDisplays.Contains(InfoAction.HEALING_DEALT_PER_SECOND_DISPLAY), 99999);
  DestroyHudText(infoDisplayEntities[InfoAction.HEALING_DEALT_PER_SECOND_DISPLAY]);
  UpdateButtonAppearance(MenuState.INFORMATION, 1, 3, "Show HPS Dealt", Color.Yellow);
}

rule: "[interface/information/metricsReadout.ostw] Player enables/disables heals received display"
Event.OngoingPlayer
if (activeInfoDisplays.Contains(InfoAction.HEALING_RECEIVED_PER_SECOND_DISPLAY))
{
  infoDisplayEntities[InfoAction.HEALING_RECEIVED_PER_SECOND_DISPLAY] = CreateHudText(
    VisibleTo: EventPlayer().currentMenuState == MenuState.CLOSED ? EventPlayer() : null,
    Header: <"HPS Received: <0>", UpdateEveryFrame((healReceivedInPeriod) / durationToAverageOver)>,
    Subheader: <"Self: <0>", Max(0, UpdateEveryFrame((healReceivedInPeriod - healReceivedInPeriodNonSelf) / durationToAverageOver))>,
    Text: <"Other: <0><1>", UpdateEveryFrame((healReceivedInPeriodNonSelf) / durationToAverageOver), MANY_SPACES>,
    SortOrder: activeInfoDisplays.IndexOf(InfoAction.HEALING_RECEIVED_PER_SECOND_DISPLAY)
  );
  UpdateButtonAppearance(MenuState.INFORMATION, 1, 4, "Hide HPS Received", Color.Gray);
  WaitUntil(!activeInfoDisplays.Contains(InfoAction.HEALING_RECEIVED_PER_SECOND_DISPLAY), 99999);
  DestroyHudText(infoDisplayEntities[InfoAction.HEALING_RECEIVED_PER_SECOND_DISPLAY]);
  UpdateButtonAppearance(MenuState.INFORMATION, 1, 4, "Show HPS Received", CustomColor(245, 200, 0, 255));
}

rule: "[interface/information/metricsReadout.ostw] Player enables/disables damage dealt display"
Event.OngoingPlayer
if (activeInfoDisplays.Contains(InfoAction.DAMAGE_DEALT_PER_SECOND_DISPLAY))
{
  infoDisplayEntities[InfoAction.DAMAGE_DEALT_PER_SECOND_DISPLAY] = CreateHudText(
    VisibleTo: EventPlayer().currentMenuState == MenuState.CLOSED ? EventPlayer() : null,
    Header: <"DPS Dealt: <0>", UpdateEveryFrame((damageDealtInPeriod) / durationToAverageOver)>,
    Subheader: <"Self: <0>", Max(0, UpdateEveryFrame((damageDealtInPeriod - damageDealtInPeriodNonSelf) / durationToAverageOver))>,
    Text: <"Other: <0><1>", UpdateEveryFrame((damageDealtInPeriodNonSelf) / durationToAverageOver), MANY_SPACES>,
    SortOrder: activeInfoDisplays.IndexOf(InfoAction.DAMAGE_DEALT_PER_SECOND_DISPLAY)
  );
  UpdateButtonAppearance(MenuState.INFORMATION, 3, 3, "Hide DPS Dealt", Color.Gray);
  WaitUntil(!activeInfoDisplays.Contains(InfoAction.DAMAGE_DEALT_PER_SECOND_DISPLAY), 99999);
  DestroyHudText(infoDisplayEntities[InfoAction.DAMAGE_DEALT_PER_SECOND_DISPLAY]);
  UpdateButtonAppearance(MenuState.INFORMATION, 3, 3, "Show DPS Dealt", Color.Red);
}

rule: "[interface/information/metricsReadout.ostw] Player enables/disables damage received display"
Event.OngoingPlayer
if (activeInfoDisplays.Contains(InfoAction.DAMAGE_RECEIVED_PER_SECOND_DISPLAY))
{
  infoDisplayEntities[InfoAction.DAMAGE_RECEIVED_PER_SECOND_DISPLAY] = CreateHudText(
    VisibleTo: EventPlayer().currentMenuState == MenuState.CLOSED ? EventPlayer() : null,
    Header: <"DPS Received: <0>", UpdateEveryFrame((damageReceivedInPeriod) / durationToAverageOver)>,
    Subheader: <"Self: <0>", Max(0, UpdateEveryFrame((damageReceivedInPeriod - damageReceivedInPeriodNonSelf) / durationToAverageOver))>,
    Text: <"Other: <0><1>", UpdateEveryFrame((damageReceivedInPeriodNonSelf) / durationToAverageOver), MANY_SPACES>,
    SortOrder: activeInfoDisplays.IndexOf(InfoAction.DAMAGE_RECEIVED_PER_SECOND_DISPLAY)
  );
  UpdateButtonAppearance(MenuState.INFORMATION, 3, 3, "Hide DPS Received", Color.Gray);
  WaitUntil(!activeInfoDisplays.Contains(InfoAction.DAMAGE_RECEIVED_PER_SECOND_DISPLAY), 99999);
  DestroyHudText(infoDisplayEntities[InfoAction.DAMAGE_RECEIVED_PER_SECOND_DISPLAY]);
  UpdateButtonAppearance(MenuState.INFORMATION, 3, 3, "Show DPS Received", CustomColor(218, 76, 10, 255));
}
