import "informationMenu.ostw";
import "../../lib/utils/Colors.del";

Number LINGER_TIME_IN_SECONDS: 3;

playervar Any totalDamageDisplayTextID = -1;
playervar Any lastDamageDisplayTextID = -1;
playervar Number totalDamage;
playervar Number lastDamageInstanceAmount;
playervar Vector lastDamageInstancePosition;

playervar Any totalHealingDisplayTextID = -1;
playervar Any lastHealingDisplayTextID = -1;
playervar Number totalHealing;
playervar Number lastHealInstanceAmount;
playervar Vector lastHealInstancePosition;

String OFFSET: "    ";

Number lastInstanceYOffset: 3;
Number cumulativeInstanceYOffset: 4;

rule: "[interface/information/damageNumbers.ostw] Update Information Menu button appearance for damage/heal numbers"
Event.OngoingPlayer
if (activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS))
{
  UpdateButtonAppearance(MenuState.INFORMATION, 2, 4, "Hide Damage/Heal Numbers", Color.Gray);
  SmallMessage(EventPlayer(), <" <0>  Damage/Heal Numbers Shown", IconString(Icon.Checkmark)>);

  WaitUntil(!activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS), 99999);

  SmallMessage(EventPlayer(), <" <0>  Damage/Heal Numbers Hidden", IconString(Icon.X)>);
  UpdateButtonAppearance(MenuState.INFORMATION, 2, 4, "Show Damage/Heal Numbers", Color.Blue);
}

rule: "[interface/information/damageNumbers.ostw] When player takes damage, create the text if necessary and update values"
Event.OnDamageTaken
if (EventDamage() > 0)
{
  lastDamageInstanceAmount = EventDamage();
  lastDamageInstancePosition = PositionOf();
  # If we don't have any active cumulative damage number, reset and create it
  if (totalDamageDisplayTextID == -1) {
    totalDamage = EventDamage();

    totalDamageDisplayTextID = CreateInWorldText(
      VisibleTo: AllPlayers().FilteredArray((player) => player.activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS)),
      Header: <"-<0><1>", totalDamage, (totalHealingDisplayTextID != -1 ? OFFSET : "")>,
      Position: UpdateEveryFrame(PositionOf()) + Up() * cumulativeInstanceYOffset,
      Scale: 4,
      Clipping: Clipping.DoNotClip,
      Reevaluation: InworldTextRev.VisibleToPositionAndString,
      TextColor: LighterRed
    );
    lastDamageDisplayTextID = CreateInWorldText(
      VisibleTo: AllPlayers().FilteredArray((player) => player.activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS)),
      Header: <"-<0><1>", lastDamageInstanceAmount, (totalHealingDisplayTextID != -1 ? OFFSET : "")>,
      Position: lastDamageInstancePosition + Up() * lastInstanceYOffset,
      Scale: 2,
      Clipping: Clipping.DoNotClip,
      Reevaluation: InworldTextRev.VisibleToPositionAndString,
      TextColor: LighterRed
    );
  } else {
    totalDamage += EventDamage();
  }
  Wait(LINGER_TIME_IN_SECONDS, WaitBehavior.RestartWhenTrue);
  DestroyInWorldText(totalDamageDisplayTextID);
  DestroyInWorldText(lastDamageDisplayTextID);
  totalDamageDisplayTextID = -1;
  lastDamageDisplayTextID = -1;
}

rule: "[interface/information/damageNumbers.ostw] When player received healing, create the text if necessary and update values"
Event.OnHealingTaken
if (EventHealing() > 0)
{
  lastHealInstanceAmount = EventHealing();
  lastHealInstancePosition = PositionOf();
  # If we don't have any active damage number, reset and create it
  if (totalHealingDisplayTextID == -1) {
    totalHealing = EventHealing();

    totalHealingDisplayTextID = CreateInWorldText(
      VisibleTo: AllPlayers().FilteredArray((player) => player.activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS)),
      Header: <"<1>+<0>", totalHealing, (totalDamageDisplayTextID != -1 ? OFFSET : "")>,
      Position: UpdateEveryFrame(PositionOf()) + Up() * cumulativeInstanceYOffset,
      Scale: 4,
      Clipping: Clipping.DoNotClip,
      Reevaluation: InworldTextRev.VisibleToPositionAndString,
      TextColor: Color.Yellow
    );
    lastHealingDisplayTextID = CreateInWorldText(
      VisibleTo: AllPlayers().FilteredArray((player) => player.activeInfoDisplays.Contains(InfoAction.DAMAGE_HEAL_NUMBERS)),
      Header: <"<1>+<0>", lastHealInstanceAmount, (totalDamageDisplayTextID != -1 ? OFFSET : "")>,
      Position: lastHealInstancePosition + Up() * lastInstanceYOffset,
      Scale: 1.5,
      Clipping: Clipping.DoNotClip,
      Reevaluation: InworldTextRev.VisibleToPositionAndString,
      TextColor: Color.Yellow
    );
  } else {
    totalHealing += EventHealing();
  }
  Wait(LINGER_TIME_IN_SECONDS, WaitBehavior.RestartWhenTrue);
  DestroyInWorldText(totalHealingDisplayTextID);
  DestroyInWorldText(lastHealingDisplayTextID);
  totalHealingDisplayTextID = -1;
  lastHealingDisplayTextID = -1;
}
