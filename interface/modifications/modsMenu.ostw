import "../menu.ostw";

enum Modification {
  NONE,
  FASTER_ABILITIES,
  REDUCE_DAMAGE_TAKEN,
  INCREASE_DAMAGE_DEALT,
  AUTO_REGEN_HEALTH,
  FASTER_RESPAWN,
  DISABLE_GAMEMODE_COMPLETION,
  SLOW_MOTION,
  DISABLE_SUPPORT_PASSIVE,
  UNKILLABLE
}

globalvar Boolean[] activeModifications;

Modification[] ModActionGrid: ButtonActionGrid[MenuState.MODIFICATIONS];

Modification[] modificationMenuButtonActions: [
  Modification.NONE,  Modification.NONE,                       Modification.NONE,                      Modification.NONE,                        Modification.NONE,
  Modification.NONE,  Modification.FASTER_ABILITIES,           Modification.UNKILLABLE,                      Modification.INCREASE_DAMAGE_DEALT,       Modification.NONE,
  Modification.NONE,  Modification.REDUCE_DAMAGE_TAKEN,        Modification.SLOW_MOTION,               Modification.FASTER_RESPAWN,              Modification.NONE,
  Modification.NONE,  Modification.AUTO_REGEN_HEALTH,          Modification.DISABLE_SUPPORT_PASSIVE,   Modification.DISABLE_GAMEMODE_COMPLETION, Modification.NONE,
  Modification.NONE,  Modification.NONE,                       Modification.NONE,                      Modification.NONE,                        Modification.NONE
];

String[] modificationMenuButtonLabels: [
  "", "", "", "", "",
  "", "Faster Abilities [OFF]", "Unkillable [OFF]", "Increased Damage Dealt [OFF]", "",
  "", "Reduced Damage Taken [OFF]", "Slow Motion [OFF]", "Faster Respawn [OFF]", "",
  "", "Auto-Regen Health [OFF]", "Self-Heal Passive [ON]", "Disable Mode Completion [OFF]", "",
  "", "", "", "", ""
];

Color[] modificationMenuButtonColors: [
  null, null, null, null, null,
  null, Color.Gray, Color.Gray,   Color.Gray, null,
  null, Color.Gray, Color.Gray,   Color.Gray, null,
  null, Color.Gray, Color.Yellow, Color.Gray, null,
  null, null, null, null, null
];

Boolean IsModificationActive(Modification mod): activeModifications[mod];

void HandleModificationClick() {
  AbortIf(ModActionGrid[currentGridIndex()] == Modification.NONE);
  activeModifications[ModActionGrid[currentGridIndex()]] = !activeModifications[ModActionGrid[currentGridIndex()]];
}

/** Faster Cooldowns */
rule: "[interface/modifications/modsMenu.ostw] Update faster abilities button appearance"
Event.OngoingPlayer
if (IsModificationActive(Modification.FASTER_ABILITIES))
{
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 1, 1, newLabel: "Faster Abilities [ON]", newColor: Color.Blue);
  SmallMessage(AllPlayers(), <"  <0> Faster Abilities On", Icon.Checkmark>);
  WaitUntil(!IsModificationActive(Modification.FASTER_ABILITIES), 99999);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 1, 1, newLabel: "Faster Abilities [OFF]", newColor: Color.Gray);
  SmallMessage(AllPlayers(), <"  <0> Faster Abilities Off", Icon.X>);
}

import "fasterAbilities.ostw";

/** Unkillable */
rule: "[interface/modifications/modsMenu.ostw] Handle unkillable modification"
Event.OngoingPlayer
if (IsModificationActive(Modification.UNKILLABLE))
{
  SetStatus(EventPlayer(), null, Status.Unkillable, 1000000);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 2, 1, "Unkillable [ON]", Color.Green);
  SmallMessage(AllPlayers(), <"  <0> Unkillable On", Icon.Checkmark>);
  WaitUntil(!IsModificationActive(Modification.UNKILLABLE), 1000000);
  ClearStatus(EventPlayer(), Status.Unkillable);
  SmallMessage(AllPlayers(), <"  <0> Unkillable Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 2, 1, "Unkillable [OFF]", Color.Gray);
}

/** Reduced Damage Taken */
rule: "[interface/modifications/modsMenu.ostw] Handle reduced damage taken"
Event.OngoingPlayer
if (IsModificationActive(Modification.REDUCE_DAMAGE_TAKEN))
{
  SetDamageReceived(EventPlayer(), 10);
    SmallMessage(AllPlayers(), <"  <0> Reduced Damage On", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 1, 2, "Reduced Damage Taken [ON]", Color.Orange);
  WaitUntil(!IsModificationActive(Modification.REDUCE_DAMAGE_TAKEN), 99999);
  SetDamageReceived(EventPlayer(), 100);
    SmallMessage(AllPlayers(), <"  <0> Reduced Damage Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 1, 2, "Reduced Damage Taken [OFF]", Color.Gray);
}

/** Increased Damage Dealt */
rule: "[interface/modifications/modsMenu.ostw] Handle increased damage dealt"
Event.OngoingPlayer
if (IsModificationActive(Modification.INCREASE_DAMAGE_DEALT))
{
  SetDamageDealt(EventPlayer(), 300);
    SmallMessage(AllPlayers(), <"  <0> Increased Damage On", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 3, 1, "Increased Damage Dealt [ON]", Color.Rose);
  WaitUntil(!IsModificationActive(Modification.INCREASE_DAMAGE_DEALT), 99999);
  SetDamageDealt(EventPlayer(), 100);
    SmallMessage(AllPlayers(), <"  <0> Increased Damage Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 3, 1, "Increased Damage Dealt [OFF]", Color.Gray);
}

/** Auto-Regen Health */

rule: "[interface/modifications/modsMenu.ostw] Handle auto-regen health"
Event.OngoingPlayer
if (IsModificationActive(Modification.AUTO_REGEN_HEALTH))
{
  SmallMessage(AllPlayers(), <"  <0> Auto-Regen On", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 1, 3, newLabel: "Auto-Regen Health [ON]", newColor: Color.Red);
  WaitUntil(!IsModificationActive(Modification.AUTO_REGEN_HEALTH), 99999);
  SmallMessage(AllPlayers(), <"  <0> Auto-Regen Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 1, 3, newLabel: "Auto-Regen Health [OFF]", newColor: Color.Gray);
}

globalvar Number AUTO_REGEN_DELAY = WorkshopSettingInteger(ModSettingsCategory, "Auto-Regen Delay", 5, 1, 20);
rule: "[interface/modifications/modsMenu.ostw] When player takes damage, and they avoid damage for 5 seconds, fill health"
Event.OnDamageTaken
if (IsModificationActive(Modification.AUTO_REGEN_HEALTH))
{
  Wait(AUTO_REGEN_DELAY, WaitBehavior.RestartWhenTrue);
  SetPlayerHealth(EventPlayer(), MaxHealth());
}

/** Faster Respawn */

rule: "[interface/modifications/modsMenu.ostw] Handle faster respawn button appearance"
Event.OngoingPlayer
if (IsModificationActive(Modification.FASTER_RESPAWN))
{
  SmallMessage(AllPlayers(), <"  <0> Faster Respawn On", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 3, 2, newLabel: "Faster Respawn [ON]", newColor: Color.Aqua);
  WaitUntil(!IsModificationActive(Modification.FASTER_RESPAWN), 99999);
  SmallMessage(AllPlayers(), <"  <0> Faster Respawn Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 3, 2, newLabel: "Faster Respawn [OFF]", newColor: Color.Gray);
}

rule: "[interface/modifications/modsMenu.ostw] Make respawn happen faster if enabled"
Event.OnDeath
if (IsModificationActive(Modification.FASTER_RESPAWN))
{
  WaitUntil(IsAlive(), 3);
  AbortIf(IsAlive());
  Respawn(EventPlayer());
}

/** Game Mode Completion */

rule: "[interface/modifications/modsMenu.ostw] Handle disable mode completion button appearance"
Event.OngoingPlayer
if (IsModificationActive(Modification.DISABLE_GAMEMODE_COMPLETION))
{
  SmallMessage(AllPlayers(), <"  <0> Mode Completion Disabled", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 3, 3, "Disable Mode Completion [ON]", Color.SkyBlue, <Player>AllPlayers());
  WaitUntil(!IsModificationActive(Modification.DISABLE_GAMEMODE_COMPLETION), 99999);
  SmallMessage(AllPlayers(), <"  <0> Mode Completion Enabled", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 3, 3, "Disable Mode Completion [OFF]", Color.Gray, <Player>AllPlayers());
}

rule: "[interface/modifications/modsMenu.ostw] Handle disable mode completion"
if (IsModificationActive(Modification.DISABLE_GAMEMODE_COMPLETION))
{
  DisableCompletion();
  WaitUntil(!IsModificationActive(Modification.DISABLE_GAMEMODE_COMPLETION), 99999);
  EnableCompletion();
}

/** Slow motion */

rule: "[interface/modifications/modsMenu.ostw] Handle slow motion button appearanace"
Event.OngoingPlayer
if (IsModificationActive(Modification.SLOW_MOTION))
{
  SmallMessage(AllPlayers(), <"  <0> Slow Motion On", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 2, 2, "Slow Motion [ON]", Color.Violet);
  WaitUntil(!IsModificationActive(Modification.SLOW_MOTION), 99999);
  SmallMessage(AllPlayers(), <"  <0> Slow Motion Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 2, 2, "Slow Motion [OFF]", Color.Gray);
}

globalvar Number SLOW_MOTION_SPEED = WorkshopSettingInteger(ModSettingsCategory, "Slow Motion Speed", 25, 10, 100);

rule: "[interface/modifications/modsMenu.ostw] Handle slow motion"
if (IsModificationActive(Modification.SLOW_MOTION))
{
  SetSlowMotion(SLOW_MOTION_SPEED);
  WaitUntil(!IsModificationActive(Modification.SLOW_MOTION), 99999);
  SetSlowMotion(100);
}

rule: "[interface/modifications/modsMenu.ostw] Handle disable self-heal passive button appearance"
Event.OngoingPlayer
if (IsModificationActive(Modification.DISABLE_SUPPORT_PASSIVE))
{
  SmallMessage(AllPlayers(), <"  <0> Self-Heal Passive Off", Icon.X>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 2, 3, "Self-Heal Passive [OFF]", Color.Gray);
  WaitUntil(!IsModificationActive(Modification.DISABLE_SUPPORT_PASSIVE), 99999);
  SmallMessage(AllPlayers(), <"  <0> Self-Heal Passive On", Icon.Checkmark>);
  UpdateButtonAppearance(MenuState.MODIFICATIONS, 2, 3, "Self-Heal Passive [ON]", Color.Yellow);
}

rule: "[interface/modifications/modsMenu.ostw] Handle preventing heal passive"
Event.OngoingPlayer
if (HasSpawned())
if (IsAlive())
if (NormalizedHealth() < 1)
{
  Wait(AllSupportHeroes().Contains(EffectiveHero()) ? 2.45 : MaxHealthOfType(EventPlayer(), HealthType.Shields) > 0 ? 2.95 : 4.95, WaitBehavior.AbortWhenFalse);
  LoopIf(HasStatus(EventPlayer(), Status.Asleep) || (!IsModificationActive(Modification.DISABLE_SUPPORT_PASSIVE) && !isPunchingBag));
  if (Health() <= 0.001) SetPlayerHealth(EventPlayer(), 0.002);
  Damage(EventPlayer(), null, 0.001);
  Heal(EventPlayer(), null, 0.001);
  LoopIfConditionIsTrue();
}
