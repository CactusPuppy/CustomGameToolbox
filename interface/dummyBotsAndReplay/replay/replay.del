import "replayDefs.del";
globalvar Boolean allBotsReplayDuringRecording = WorkshopSettingToggle(BotAndReplaySettingsCategory, "All Bots Replay During Recording", true);

playervar Hero recordingHero;
playervar Hero originalHero;
playervar Player waitingOnPlayer;
Boolean shouldAbortRecordingCountdown(Player p = EventPlayer()): p.IsDead() || p.currentMenuState != MenuState.CLOSED;

rule: "[UI] - HUD"
Event.OngoingGlobal
{
    // CreateHudText(LocalPlayer().replayState, null, "========================", null, Location.Right, -10, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(LocalPlayer().replayState, null, "========================", null, Location.Right, -5, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(LocalPlayer().replayState, null, "========================", null, Location.Right, 0, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), IconString(Icon.Radioactive), null, "Recording...", Location.Right, -9, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), null, <"Clip: <0> Seconds (FRAME <1>)", LocalPlayer().frame / 62.5, LocalPlayer().frame>, null, Location.Right, -8, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), null, "Hold Interact to Save", null, Location.Right, -4, Color.Orange, Color.Orange, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == 3), IconString(Icon.Spiral), null, "Playing...", Location.Right, -9, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == 3), null, <"Frame: <0>/<1>", ClipFrameCount, FrameCount>, null, Location.Right, -8, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == 3), null, "Press Interact to Cancel", null, Location.Right, -4, Color.Orange, Color.Orange, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

import "../../../lib/utils/SloMoAgnosticWait.del";

single struct RecordingCountdownInfo {
  public Number timerValue;
  public Color textColor;
  public Any textID;
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] If player dies while recording, stop recording"
Event.OnDeath
if (EventPlayer().replayState == ReplayState.RECORDING)
{
  replayStateAction = ReplayStateAction.STOP_PLAYBACK;
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] If player dies while playing, stop playing"
Event.OnDeath
if (EventPlayer().replayState == ReplayState.PLAYING)
{
  replayStateAction = ReplayStateAction.STOP_PLAYBACK;
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] Update longest recording length when player leaves"
Event.OnPlayerLeave
{
  UpdateLongestRecordingLength();
}

enum RecordingAction {
  NONE,
  PLAY,
  STOP,
  DELETE
}

playervar RecordingAction recordingPlayStopFlag;

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Handle when replay flag is set"
Event.OngoingPlayer
if (IsControllable(EventPlayer()))
if (recordingPlayStopFlag != RecordingAction.NONE)
{
  if (replayState == ReplayState.PLAYING && recordingPlayStopFlag == RecordingAction.STOP) {
    replayState = ReplayState.NONE;
  } else if (replayState == ReplayState.NONE
    && recordingPlayStopFlag == RecordingAction.PLAY
    && hasRecordedClip(EventPlayer())) {
    replayStateAction = ReplayStateAction.PREPARE_FOR_PLAYBACK;
  } else if (recordingPlayStopFlag == RecordingAction.DELETE) {
    if (replayState == ReplayState.PLAYING) {
      replayStateAction = ReplayStateAction.STOP_PLAYBACK;
    }
    DeleteRecording();
  }
  recordingPlayStopFlag = RecordingAction.NONE;
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Delete"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.DELETE)
{
  DestroyDummyBot(TeamOf(selectedBot), SlotOf(selectedBot));
  selectedBot = null;
  CloseMenu(EventPlayer());
}

// import "replay_DEBUG.del";
