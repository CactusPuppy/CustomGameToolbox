import "replayDefs.del";
globalvar Boolean allBotsReplayDuringRecording = WorkshopSettingToggle(BotAndReplaySettingsCategory, "All Bots Replay During Recording", true);

playervar Hero recordingHero;
playervar Hero originalHero;
Boolean shouldAbortRecordingCountdown(Player p = EventPlayer()): p.IsDead() || p.currentMenuState != MenuState.CLOSED;

rule: "[UI] - HUD"
Event.OngoingGlobal
{
    // CreateHudText(LocalPlayer().replayState, null, "========================", null, Location.Right, -10, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(LocalPlayer().replayState, null, "========================", null, Location.Right, -5, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(LocalPlayer().replayState, null, "========================", null, Location.Right, 0, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), IconString(Icon.Radioactive), null, "Recording...", Location.Right, -9, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), null, <"Clip: <0> Seconds (FRAME <1>)", LocalPlayer().frame / 62.5, LocalPlayer().frame>, null, Location.Right, -8, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), null, <"<0> Size: <1>%", IconString(Icon.Warning), LocalPlayer().sampleCount / MAX_SAMPLES * 100>, null, Location.Right, -7, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == ReplayState.RECORDING), null, "Hold Interact to Save", null, Location.Right, -4, Color.Orange, Color.Orange, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == 3), IconString(Icon.Spiral), null, "Playing...", Location.Right, -9, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == 3), null, <"Frame: <0>/<1>", ClipFrameCount, FrameCount>, null, Location.Right, -8, Color.Red, Color.Red, Color.Red, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    // CreateHudText(FilteredArray(LocalPlayer(), ArrayElement().replayState == 3), null, "Press Interact to Cancel", null, Location.Right, -4, Color.Orange, Color.Orange, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
}

void ReturnToPreRecordState() playervar "[SUB | interface/dummyBotsAndReplay/replay/replay.del] Restore selected bot to original state"
{
  if (recordingCountdownText.timerValue > 0) {
    RemoveOneLockFromAllButtons();
    DestroyInWorldText(recordingCountdownText.textID);
  }
  if (allBotsReplayDuringRecording) {
    AllPlayers().Filter(p => IsControllable(p) && hasRecordedClip(p)).waitingOnPlayer = null;
    AllPlayers().Filter(p => IsControllable(p) && hasRecordedClip(p)).recordingPlayStopFlag = RecordingAction.STOP;
  }

  # Restore bot to reset point and recording player to original hero
  ForcePlayerHero(EventPlayer(), originalHero);
  StopForcingHero(EventPlayer());
  StopForcingPlayerPosition(selectedBot);
  SetInvisible(selectedBot, InvisibleTo.None);
  TeleportPlayerToResetPoint(selectedBot, selectedBot.replayResetPoint);
  if (currentMenuState != MenuState.CLOSED) CloseMenu();
  Wait(0.032);
  StartEditingBots();
}

import "../../../lib/utils/SloMoAgnosticWait.del";

single struct RecordingCountdownInfo {
  public Number timerValue;
  public Color textColor;
  public Any textID;
}

playervar RecordingCountdownInfo recordingCountdownText;

void PreparePlayerForRecording() playervar "[SUB | interface/dummyBotsAndReplay/replay/replay.del] Prep player to record for selectedBot"
{
  selectedBot.replayResetPoint = NewResetFromPlayer(selectedBot);
  recordingHero = selectedBot.Hero();
  originalHero = HeroOf();

  # Move bot away from recording area
  StopForcingPlayerPosition(selectedBot);
  StartForcingPlayerPosition(selectedBot, Up() * 1000);
  SetInvisible(selectedBot, InvisibleTo.All);

  # Prepare player to record
  StopEditingBots();
  CloseMenu();
  if (botControlMode == BotControlMode.Edit) {
    botControlMode = BotControlMode.Normal;
  }
  MinWait();
  ForcePlayerHero(EventPlayer(), recordingHero);
  StartForcingPlayerPosition(EventPlayer(), selectedBot.replayResetPoint.location, true);
  StartFacing(EventPlayer(), selectedBot.replayResetPoint.facing, 1000, Relative.ToWorld);
  AddOneLockToAllButtons();

  # If we should prompt all other bots to play their recordings,
  # prompt them now.
  if (allBotsReplayDuringRecording) {
    AllPlayers().Filter(p => IsControllable(p) && hasRecordedClip(p)).waitingOnPlayer = EventPlayer();
    AllPlayers().Filter(p => IsControllable(p) && hasRecordedClip(p)).recordingPlayStopFlag = RecordingAction.PLAY;
  }
  recordingCountdownText = { timerValue: 3, textColor: LighterRed, textID: null };

  WaitUntil(shouldAbortRecordingCountdown(), 0.8);
  if (shouldAbortRecordingCountdown()) {
    ReturnToPreRecordState();
    SmallMessage(EventPlayer(), "  Recording aborted");
    Abort();
  }

  recordingCountdownText.textID = OnScreenText.CreateOnScreenText(
    VisibleTo: EventPlayer(),
    Header: $"Recording starts in {recordingCountdownText.timerValue}...",
    Color: recordingCountdownText.textColor,
    PositionY: -0.5,
    Scale: 2.5,
    Reevaluation: InworldTextRev.VisibleToPositionStringAndColor
  );
  // SmallMessage(EventPlayer(), "{0}  Recording starts in 3...".Format([IconString(Icon.ExclamationMark)]));
  SlowMoAgnosticWaitUntil(shouldAbortRecordingCountdown(), 0.8);
  if (shouldAbortRecordingCountdown()) {
    ReturnToPreRecordState();
    SmallMessage(EventPlayer(), "  Recording aborted");
    Abort();
  }
  // SmallMessage(EventPlayer(), "  2...");
  recordingCountdownText.timerValue = 2;
  recordingCountdownText.textColor = Color.Yellow;
  SlowMoAgnosticWaitUntil(shouldAbortRecordingCountdown(), 0.8);
  if (shouldAbortRecordingCountdown()) {
    ReturnToPreRecordState();
    SmallMessage(EventPlayer(), "  Recording aborted");
    Abort();
  }
  // SmallMessage(EventPlayer(), "  1...");
  recordingCountdownText.timerValue = 1;
  recordingCountdownText.textColor = Color.Green;
  SlowMoAgnosticWaitUntil(shouldAbortRecordingCountdown(), 0.8);
  if (shouldAbortRecordingCountdown()) {
    ReturnToPreRecordState();
    SmallMessage(EventPlayer(), "  Recording aborted");
    Abort();
  }
  recordingCountdownText.timerValue = 0;
  DestroyInWorldText(recordingCountdownText.textID);
  # Release player to record
  StopForcingPlayerPosition(EventPlayer());
  StopFacing(EventPlayer());
  UnlockAllButtons();

  # Start recording
  StartRecording();
  SmallMessage(EventPlayer(), "  Recording started");
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] If player dies while recording, stop recording"
Event.OnDeath
if (EventPlayer().replayState == ReplayState.RECORDING)
{
  Recorder_StopRecording();
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] If player dies while playing, stop playing"
Event.OnDeath
if (EventPlayer().replayState == ReplayState.PLAYING)
{
  StopClip();
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] Update longest recording length when player joins"
Event.OnPlayerJoin
{
  # Wait for a bit to avoid overloading the server
  Wait(0.1);
  UpdateLongestRecordingLength();
}

rule: "[interface/dummyBotsAndReplay/replay/replay.del] Update longest recording length when player leaves"
Event.OnPlayerLeave
{
  UpdateLongestRecordingLength();
}

enum RecordingAction {
  NONE,
  PLAY,
  STOP,
  DELETE
}

playervar RecordingAction recordingPlayStopFlag;

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Handle when replay flag is set to true"
Event.OngoingPlayer
if (IsControllable(EventPlayer()))
if (recordingPlayStopFlag != RecordingAction.NONE)
{
  if (replayState == ReplayState.PLAYING && recordingPlayStopFlag == RecordingAction.STOP) {
    StopClip();
  } else if (replayState == ReplayState.NONE
    && recordingPlayStopFlag == RecordingAction.PLAY
    && hasRecordedClip(EventPlayer())) {
    PlayClip();
  } else if (recordingPlayStopFlag == RecordingAction.DELETE) {
    if (replayState == ReplayState.PLAYING) {
      StopClip();
    }
    DeleteRecording();
  }
  recordingPlayStopFlag = RecordingAction.NONE;
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Delete"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.DELETE)
{
  DestroyDummyBot(TeamOf(selectedBot), SlotOf(selectedBot));
  selectedBot = null;
  CloseMenu(EventPlayer());
}

// import "replay_DEBUG.del";
