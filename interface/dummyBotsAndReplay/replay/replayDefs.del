import "replayStateMachine.del";

enum InputType {
  THROTTLE,
  FACING,
  WEAPON,
  PRIMARY_FIRE,
  SECONDARY_FIRE,
  ABILITY_1,
  ABILITY_2,
  CROUCH,
  JUMP,
  MELEE,
  RELOAD,
  ULTIMATE,
  INTERACT
}

struct InputChange<T> {
  public InputType type;
  public T new_value;

  public static InputChange<T> New(InputType type, in T new_value): { type: type, new_value: new_value };
}

struct DeltaFrame {
  public InputChange<Any>[] changes;
  public Number frame;

  public static DeltaFrame New(in InputChange<Any>[] changes, Number frame): { changes: changes, frame: frame };
}

single struct SnapshotState {
  public Vector throttle;
  public Vector facing;
  public Number weapon;
  public Boolean primaryFire;
  public Boolean secondaryFire;
  public Boolean ability1;
  public Boolean ability2;
  public Boolean crouch;
  public Boolean jump;
  public Boolean melee;
  public Boolean reload;
  public Boolean ultimate;
  public Boolean interact;
}

globalvar Boolean SHOULD_LOOP_CLIP = WorkshopSettingToggle(BotAndReplaySettingsCategory, "Loop Replay Playback", true);
globalvar Number longestRecordingLength = 0;

playervar ResetPoint replayResetPoint;
playervar Number frame;
playervar Number totalFrames;
playervar Number playbackOffset;


playervar SnapshotState lastRecordedState;

playervar DeltaFrame[][] recording;
playervar DeltaFrame currentFrame;
playervar Number nextFrameIndex;
playervar InputChange<Any>[] changeBuffer;


Player[] AllBotsWithRecordings(): AllPlayers().Filter(p => IsControllable(p) && hasRecordedClip(p));
Boolean IsBotReplaying(Player p = EventPlayer()): [
    ReplayState.PREPARING_FOR_PLAYBACK,
    ReplayState.PLAYING,
    ReplayState.REACHED_END_OF_REPLAY
  ].Contains(p.replayState);
Number MAX_ARRAY_SIZE: 1000;
Number TICK_LENGTH: 0.016;
Boolean hasRecordedClip(Player p = EventPlayer()): p.totalFrames > 0;
Number FirstIdx(Number i): RoundToInteger(i / MAX_ARRAY_SIZE, Rounding.Down);
Number SecondIdx(Number i): i % MAX_ARRAY_SIZE;
Number BigArrayLength<T>(T[][] arr): (arr.Length - 1) * MAX_ARRAY_SIZE + arr.Last.Length;
T BigArrayAccess<T>(T[][] arr, Number i): arr[FirstIdx(i)][SecondIdx(i)];

void SafeAppendToBigArray<T>(ref T[][] arr, in T value) {
  if (arr.Last.Length == MAX_ARRAY_SIZE) {
    arr[arr.Length] = [value];
  } else {
    // ModifyVariable(arr[arr.Length - 1], Operation.AppendToArray, [InputEvent.New(value, frame)]);
    arr[arr.Length - 1].ModAppend(value);
  }
}

void DeleteRecording() playervar "[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Delete Recording" {
  frame = 0;
  totalFrames = 0;
  playbackOffset = 0;
  recording = [[]];
  replayResetPoint.location = null;
  recordingHero = null;
  UpdateLongestRecordingLength();
  DumpLogBuffer($"DEL {TeamOf()} {SlotOf()}");
}

void TransferRecording(in Player from, in Player to) {
  DumpLogBuffer($"TR {TeamOf(from)} {SlotOf(from)} {TeamOf(to)} {SlotOf(to)}");
  to.recording = from.recording;
  to.totalFrames = from.totalFrames;
  to.playbackOffset = from.playbackOffset;
  to.recordingHero = from.recordingHero;
  from.recording = [[]];
  from.totalFrames = 0;
  from.playbackOffset = 0;
  from.recordingHero = null;
  UpdateLongestRecordingLength();
}

void UpdateLongestRecordingLength() "[SUB | interface/dummyBotsAndReplay/replay/replayDefs.del] Update Longest Recording Length" {
  longestRecordingLength = AllPlayers().Filter(p => IsControllable(p) && hasRecordedClip(p)).Sort(p => p.totalFrames + p.playbackOffset).Last;
  longestRecordingLength = (<Player>longestRecordingLength).totalFrames + (<Player>longestRecordingLength).playbackOffset;
}

rule: "[interface/dummyBotsAndReplay/replay/replayDefs.del] When bot is in recording state, loop every frame and record inputs"
Event.OngoingPlayer
// if (selectedBot != null)
if (replayState == ReplayState.RECORDING)
{
  # End the recording if the player opens the menu or switches to another hero
  if (currentMenuState != MenuState.CLOSED || HeroOf() != recordingHero) {
    replayStateAction = ReplayStateAction.STOP_RECORDING;
    Abort();
  }
  if (frame >= 0) OnRecordingFrame();
  frame += 1;
  MinWait();
  LoopIfConditionIsTrue();
}

void OnRecordingFrame() {
  logBuffer = "";
  selectedBot.changeBuffer = [];
  # THROTTLE
  if (selectedBot.lastRecordedState.throttle != ThrottleOf(EventPlayer())) {
    // ModifyVariable(selectedBot.changeBuffer, Operation.AppendToArray, [InputChange<Vector>.New(InputType.THROTTLE, ThrottleOf(EventPlayer()))]);
    selectedBot.changeBuffer += InputChange<Vector>.New(InputType.THROTTLE, ThrottleOf(EventPlayer()));
    selectedBot.lastRecordedState.throttle = ThrottleOf(EventPlayer());
    logBuffer = logBuffer + <"T <0> ", ThrottleOf()>;
  }
  # FACING
  if (selectedBot.lastRecordedState.facing != FacingDirectionOf(EventPlayer())) {
    selectedBot.changeBuffer += InputChange<Vector>.New(InputType.FACING, FacingDirectionOf(EventPlayer()));
    selectedBot.lastRecordedState.facing = FacingDirectionOf(EventPlayer());
    logBuffer = logBuffer + <"F <0> ", FacingDirectionOf() * 1000>;
  }
  # WEAPON
  if (selectedBot.lastRecordedState.weapon != Weapon(EventPlayer())) {
    selectedBot.changeBuffer += InputChange<Number>.New(InputType.WEAPON, Weapon(EventPlayer()));
    selectedBot.lastRecordedState.weapon = Weapon(EventPlayer());
    logBuffer = logBuffer + <"W <0>", Weapon(EventPlayer())>;
  }
  # PRIMARY FIRE
  if (selectedBot.lastRecordedState.primaryFire != IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.PRIMARY_FIRE, IsButtonHeld(EventPlayer(), Button.PrimaryFire));
    selectedBot.lastRecordedState.primaryFire = IsButtonHeld(EventPlayer(), Button.PrimaryFire);
    logBuffer = logBuffer + <"PF <0>", IsButtonHeld(EventPlayer(), Button.PrimaryFire)>;
  }
  # SECONDARY FIRE
  if (selectedBot.lastRecordedState.secondaryFire != IsButtonHeld(EventPlayer(), Button.SecondaryFire)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.SECONDARY_FIRE, IsButtonHeld(EventPlayer(), Button.SecondaryFire));
    selectedBot.lastRecordedState.secondaryFire = IsButtonHeld(EventPlayer(), Button.SecondaryFire);
    logBuffer = logBuffer + <"SF <0>", IsButtonHeld(EventPlayer(), Button.SecondaryFire)>;
  }
  # ABILITY 1
  if (selectedBot.lastRecordedState.ability1 != IsButtonHeld(EventPlayer(), Button.Ability1)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.ABILITY_1, IsButtonHeld(EventPlayer(), Button.Ability1));
    selectedBot.lastRecordedState.ability1 = IsButtonHeld(EventPlayer(), Button.Ability1);
    logBuffer = logBuffer + <"A1 <0>", IsButtonHeld(EventPlayer(), Button.Ability1)>;
  }
  # ABILITY 2
  if (selectedBot.lastRecordedState.ability2 != IsButtonHeld(EventPlayer(), Button.Ability2)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.ABILITY_2, IsButtonHeld(EventPlayer(), Button.Ability2));
    selectedBot.lastRecordedState.ability2 = IsButtonHeld(EventPlayer(), Button.Ability2);
    logBuffer = logBuffer + <"A2 <0>", IsButtonHeld(EventPlayer(), Button.Ability2)>;
  }
  # CROUCH
  if (selectedBot.lastRecordedState.crouch != IsButtonHeld(EventPlayer(), Button.Crouch)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.CROUCH, IsButtonHeld(EventPlayer(), Button.Crouch));
    selectedBot.lastRecordedState.crouch = IsButtonHeld(EventPlayer(), Button.Crouch);
    logBuffer = logBuffer + <"C <0>", IsButtonHeld(EventPlayer(), Button.Crouch)>;
  }
  # JUMP
  if (selectedBot.lastRecordedState.jump != IsButtonHeld(EventPlayer(), Button.Jump)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.JUMP, IsButtonHeld(EventPlayer(), Button.Jump));
    selectedBot.lastRecordedState.jump = IsButtonHeld(EventPlayer(), Button.Jump);
    logBuffer = logBuffer + <"J <0>", IsButtonHeld(EventPlayer(), Button.Jump)>;
  }
  # MELEE
  if (selectedBot.lastRecordedState.melee != IsButtonHeld(EventPlayer(), Button.Melee)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.MELEE, IsButtonHeld(EventPlayer(), Button.Melee));
    selectedBot.lastRecordedState.melee = IsButtonHeld(EventPlayer(), Button.Melee);
    logBuffer = logBuffer + <"M <0>", IsButtonHeld(EventPlayer(), Button.Melee)>;
  }
  # RELOAD
  if (selectedBot.lastRecordedState.reload != IsButtonHeld(EventPlayer(), Button.Reload)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.RELOAD, IsButtonHeld(EventPlayer(), Button.Reload));
    selectedBot.lastRecordedState.reload = IsButtonHeld(EventPlayer(), Button.Reload);
    logBuffer = logBuffer + <"R <0>", IsButtonHeld(EventPlayer(), Button.Reload)>;
  }
  # ULTIMATE
  if (selectedBot.lastRecordedState.ultimate != IsButtonHeld(EventPlayer(), Button.Ultimate)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.ULTIMATE, IsButtonHeld(EventPlayer(), Button.Ultimate));
    selectedBot.lastRecordedState.ultimate = IsButtonHeld(EventPlayer(), Button.Ultimate);
    logBuffer = logBuffer + <"U <0>", IsButtonHeld(EventPlayer(), Button.Ultimate)>;
  }
  # INTERACT
  if (selectedBot.lastRecordedState.interact != IsButtonHeld(EventPlayer(), Button.Interact)) {
    selectedBot.changeBuffer += InputChange<Boolean>.New(InputType.INTERACT, IsButtonHeld(EventPlayer(), Button.Interact));
    selectedBot.lastRecordedState.interact = IsButtonHeld(EventPlayer(), Button.Interact);
    logBuffer = logBuffer + <"I <0>", IsButtonHeld(EventPlayer(), Button.Interact)>;
  }
  if (selectedBot.changeBuffer.Length > 0) {
    // DumpLogBuffer(<"f<0> <1>", frame, logBuffer>);
    SafeAppendToBigArray(selectedBot.recording, <DeltaFrame>[DeltaFrame.New(selectedBot.changeBuffer, frame)]);
  }
}

rule: "[interface/dummyBotsAndReplay/replay/replayDefs.del] When bot is in playing state, loop every frame and replay inputs"
Event.OngoingPlayer
if (replayState == ReplayState.PLAYING)
{
  Wait(TICK_LENGTH * playbackOffset, WaitBehavior.AbortWhenFalse);
  for (frame = 0; totalFrames; 1) {
    if (frame >= currentFrame.frame) {
      ProcessAllChangesInCurrentFrame();
      nextFrameIndex += 1;
      currentFrame = BigArrayAccess(recording, nextFrameIndex);
    }
    Wait(TICK_LENGTH, WaitBehavior.AbortWhenFalse);
  }
  replayStateAction = ReplayStateAction.REACHED_END_OF_REPLAY;
}

void ProcessAllChangesInCurrentFrame() {
  for (i = 0; currentFrame.changes.Length; 1) {
    switch (currentFrame.changes[i].type) {
      case InputType.THROTTLE:
        StartThrottleInDirection(EventPlayer(), currentFrame.changes[i].new_value,
          MagnitudeOf(currentFrame.changes[i].new_value), Relative.ToPlayer, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.None);
        break;
      case InputType.FACING:
        SetFacing(EventPlayer(), currentFrame.changes[i].new_value, Relative.ToWorld);
        break;
      case InputType.WEAPON:
        SetWeapon(EventPlayer(), currentFrame.changes[i].new_value);
        break;
      case InputType.PRIMARY_FIRE:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.PrimaryFire);
        } else {
          StopHoldingButton(EventPlayer(), Button.PrimaryFire);
        }
        break;
      case InputType.SECONDARY_FIRE:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.SecondaryFire);
        } else {
          StopHoldingButton(EventPlayer(), Button.SecondaryFire);
        }
        break;
      case InputType.ABILITY_1:
        if (currentFrame.changes[i].new_value) {
          # SPECIAL CASE: Bots do not cancel Rein charge. Stop it manually if charging and ability 1 is pressed.
          if (EffectiveHero() == Hero.Reinhardt && IsUsingAbility1()) CancelPrimaryAction();
          StartHoldingButton(EventPlayer(), Button.Ability1);
        } else {
          StopHoldingButton(EventPlayer(), Button.Ability1);
        }
        break;
      case InputType.ABILITY_2:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Ability2);
        } else {
          StopHoldingButton(EventPlayer(), Button.Ability2);
        }
        break;
      case InputType.CROUCH:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Crouch);
        } else {
          StopHoldingButton(EventPlayer(), Button.Crouch);
        }
        break;
      case InputType.JUMP:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Jump);
        } else {
          StopHoldingButton(EventPlayer(), Button.Jump);
        }
        break;
      case InputType.MELEE:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Melee);
        } else {
          StopHoldingButton(EventPlayer(), Button.Melee);
        }
        break;
      case InputType.RELOAD:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Reload);
        } else {
          StopHoldingButton(EventPlayer(), Button.Reload);
        }
        break;
      case InputType.ULTIMATE:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Ultimate);
        } else {
          StopHoldingButton(EventPlayer(), Button.Ultimate);
        }
        break;
      case InputType.INTERACT:
        if (currentFrame.changes[i].new_value) {
          StartHoldingButton(EventPlayer(), Button.Interact);
        } else {
          StopHoldingButton(EventPlayer(), Button.Interact);
        }
        break;
    }
  }
}
