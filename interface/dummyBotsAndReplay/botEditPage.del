import "botEditPage_ButtonsControl.del";
import "botEditPage_ReplayEdit.del";
import "replay/replay.del";

enum BotEditAction {
  NONE,
  CHANGE_TEAM,
  CHANGE_HERO,
  DELETE,
  EDIT_BUTTON_CONTROL,
  SET_RESPAWN_POINT,
  PIN_BOT_TO_POSITION,
  RECORD_REPLAY,
  EDIT_REPLAY,
  DELETE_REPLAY
}

playervar BotEditAction selectedBotEditAction;
playervar ResetPoint pinnedPosition;

BotEditAction[] BotEditActionGrid: ButtonActionGrid[MenuState.EDITING_DUMMY_BOT];

BotEditAction[] botEditPageButtonActions: [
  BotEditAction.NONE, BotEditAction.NONE,                 BotEditAction.EDIT_BUTTON_CONTROL, BotEditAction.NONE, BotEditAction.NONE,
  BotEditAction.NONE, BotEditAction.NONE,                 BotEditAction.SET_RESPAWN_POINT, BotEditAction.NONE, BotEditAction.NONE,
  BotEditAction.DELETE_REPLAY, BotEditAction.EDIT_REPLAY, BotEditAction.RECORD_REPLAY, BotEditAction.CHANGE_HERO, BotEditAction.CHANGE_TEAM,
  BotEditAction.NONE, BotEditAction.NONE,                 BotEditAction.PIN_BOT_TO_POSITION, BotEditAction.NONE, BotEditAction.NONE,
  BotEditAction.NONE, BotEditAction.NONE,                 BotEditAction.DELETE, BotEditAction.NONE, BotEditAction.NONE
];

String[] botEditPageButtonLabels: [
  "", "", "Buttons", "", "",
  "", "", "Set Respawn Point", "", "",
  "Delete Replay", "Edit Replay", "Record Replay", "Change Hero", "Switch Team",
  "", "", "Pin Bot To Position", "", "",
  "", "", "Delete", "", ""
];

Color[] botEditPageButtonColors: [
  null, null, Color.Aqua, null, null,
  null, null, Color.Yellow, null, null,
  Color.Gray, Color.Gray, CustomColor(186, 70, 213, 255), Color.Green, Color.Blue,
  null, null, Color.Orange, null, null,
  null, null, Color.Red, null, null
];

void HandleBotEditPageClick() {
  AbortIf(BotEditActionGrid[currentGridIndex()] == BotEditAction.NONE);
  selectedBotEditAction = BotEditActionGrid[currentGridIndex()];
  MinWait();
  selectedBotEditAction = BotEditAction.NONE;
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] When a bot becomes selected, initialize display options"
Event.OngoingPlayer
if (selectedBot != null)
{
  if (selectedBot.respawnPoint.location != null) {
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 1, "Clear Respawn Point", Color.Orange);
  } else {
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 1, "Set Respawn Point", Color.Yellow);
  }
  if (selectedBot.pinnedPosition.location != null) {
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 3, "Unpin Bot", Color.Orange);
  } else {
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 3, "Pin Bot", Color.Orange);
  }
  if (hasRecordedClip(selectedBot)) {
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 2, "Play Replay", Color.LimeGreen);
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 1, 2, "Edit Replay", Color.Turquoise);
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 0, 2, "Delete Replay", Color.Red);
  } else {
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 2, "Record Replay", CustomColor(186, 70, 213, 255));
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 1, 2, "Edit Replay", Color.Gray);
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 0, 2, "Delete Replay", Color.Gray);
  }
  WaitUntil(selectedBot != EvaluateOnce(selectedBot) || selectedBot.sampleCount != EvaluateOnce(selectedBot.sampleCount), 1000000);
  LoopIfConditionIsTrue();
}

playervar Boolean wasPunchingBag!;
playervar ResetPoint tempPinnedPosition!;
playervar ResetPoint tempRespawnPoint!;
playervar ResetPoint tempResetPoint!;
playervar Team tempTeamStorage!;
playervar ResetPoint tempCurrentPosition!;

void StoreTempDataFromBot() playervar "[SUB | interface/dummyBotsAndReplay/botEditPage.del] Store data from bot onto player" {
  tempHeroStorage = HeroOf(selectedBot);
  tempCurrentPosition = NewResetFromPlayer(selectedBot);
  wasPunchingBag = selectedBot.isPunchingBag;
  tempPinnedPosition = selectedBot.pinnedPosition;
  tempRespawnPoint = selectedBot.respawnPoint;
  tempResetPoint = selectedBot.replayResetPoint;
  tempTeamStorage = TeamOf(selectedBot);
  # Temporarily store recording on player who is performing the action
  if (hasRecordedClip(selectedBot)) TransferRecording(selectedBot, EventPlayer());
}

void LoadTempDataToSelectedBot() playervar "[SUB | interface/dummyBotsAndReplay/botEditPage.del] Load data from player onto bot" {
  if (wasPunchingBag) {
    MarkLastCreatedBotAsPunchingBag();
  }
  if (tempPinnedPosition.location != null) {
    selectedBot.pinnedPosition = tempPinnedPosition;
  }
  if (tempResetPoint.location != null) {
    selectedBot.replayResetPoint = tempResetPoint;
  }
  if (tempRespawnPoint.location != null) {
    selectedBot.respawnPoint = tempRespawnPoint;
    botRespawnPoint_FX_Loc = CreateEffect(
      VisibleTo: playersWhoShouldSeeControls(selectedBot.positionControl),
      Type: Effect.Sphere,
      Color: Color.Green,
      Position: selectedBot.respawnPoint.location,
      Radius: 0.5,
      Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
    botRespawnPoint_FX_Fac = CreateBeamEffect(
      VisibleTo: playersWhoShouldSeeControls(selectedBot.positionControl),
      BeamType: BeamType.GoodBeam,
      StartPosition: selectedBot.respawnPoint.location + Up() * 0.25,
      EndPosition: selectedBot.respawnPoint.location + selectedBot.respawnPoint.facing + Up() * 0.25,
      Color: TeamOf(selectedBot),
      Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
  }
  Wait(0.064);
  # We wait to transfer the recording to the new bot to avoid overloading the server
  if (hasRecordedClip(EventPlayer())) TransferRecording(EventPlayer(), selectedBot);
  Wait(0.064);
  TeleportPlayerToResetPoint(selectedBot, tempCurrentPosition);
}

playervar Hero tempHeroStorage;
rule: "[interface/dummyBotsAndReplay/botEditPage.del] Change hero"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.CHANGE_HERO)
{
  # We don't want to transfer recordings between heroes
  if (hasRecordedClip(selectedBot)) {
    selectedBot.recordingPlayStopFlag = RecordingAction.DELETE;
    MinWait();
  }
  StoreTempDataFromBot();
  tempHeroStorage = HeroOf();
  SetAllowedHeroes(EventPlayer(), AllHeroes().Remove(tempHeroStorage));
  WaitUntil(!HasSpawned(), 1);
  ResetHeroAvailability(EventPlayer());
  WaitUntil(HasSpawned(), 1000000);
  DestroyDummyBot(TeamOf(selectedBot), SlotOf(selectedBot));
  MinWait();
  selectedBot = CreateDummyBot(HeroOf(), tempTeamStorage, -1, tempCurrentPosition.location, tempCurrentPosition.facing);
  ForcePlayerHero(EventPlayer(), tempHeroStorage);
  MinWait();
  StopForcingHero(EventPlayer());
  Wait(0.064);
  TeleportPlayerToResetPoint(EventPlayer(), menuActivationPoint);
  selectedControl = null;
  CloseMenu(EventPlayer());
  LoadTempDataToSelectedBot();
}


rule: "[interface/dummyBotsAndReplay/botEditPage.del] Change team"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.CHANGE_TEAM)
{
  StoreTempDataFromBot();
  DestroyDummyBot(selectedBot.Team(), SlotOf(selectedBot));
  selectedBot = CreateDummyBot(tempHeroStorage, OppositeTeamOf(tempTeamStorage), -1, tempCurrentPosition.location, tempCurrentPosition.facing);
  LoadTempDataToSelectedBot();
}

playervar Any botRespawnPoint_FX_Loc!;
playervar Any botRespawnPoint_FX_Fac!;

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Set respawn point"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.SET_RESPAWN_POINT)
{
  if (selectedBot.respawnPoint.location == null) {
    selectedBot.respawnPoint = NewResetFromPlayer(selectedBot);
    PlayEffect(EventPlayer(), PlayEffect.BuffImpactSound, null, EventPlayer(), 100);
    SmallMessage(EventPlayer(), "Respawn point set!");
    botRespawnPoint_FX_Loc = CreateEffect(
      VisibleTo: playersWhoShouldSeeControls(selectedBot.positionControl),
      Type: Effect.Sphere,
      Color: Color.Green,
      Position: selectedBot.respawnPoint.location,
      Radius: 0.5,
      Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
    botRespawnPoint_FX_Fac = CreateBeamEffect(
      VisibleTo: playersWhoShouldSeeControls(selectedBot.positionControl),
      BeamType: BeamType.GoodBeam,
      StartPosition: selectedBot.respawnPoint.location + Up() * 0.25,
      EndPosition: selectedBot.respawnPoint.location + selectedBot.respawnPoint.facing + Up() * 0.25,
      Color: TeamOf(selectedBot),
      Reevaluation: EffectRev.VisibleToPositionAndRadius
    );
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 1, "Clear Respawn Point", Color.Orange);
  } else {
    selectedBot.respawnPoint.location = null;
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    SmallMessage(EventPlayer(), "Respawn point cleared");
    DestroyEffect(botRespawnPoint_FX_Loc);
    DestroyEffect(botRespawnPoint_FX_Fac);
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 1, "Set Respawn Point", Color.Yellow);
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Switch to button control page"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.EDIT_BUTTON_CONTROL)
{
  OpenMenuToPage(EventPlayer(), MenuState.EDITING_DUMMY_BOT_BUTTONS);
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Toggle bot pin"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.PIN_BOT_TO_POSITION)
{
  if (selectedBot.pinnedPosition.location == null) {
    selectedBot.pinnedPosition = NewResetFromPlayer(selectedBot);
    SmallMessage(EventPlayer(), "  Pinned bot to current position");
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 3, "Unpin Bot", Color.Orange);
  } else {
    selectedBot.pinnedPosition = <ResetPoint>null;
    SmallMessage(EventPlayer(), "  Unpinned bot");
    UpdateButtonAppearance(MenuState.EDITING_DUMMY_BOT, 2, 3, "Pin Bot", Color.Orange);
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Handle pinning bot to current position"
Event.OngoingPlayer
if (pinnedPosition.location != null)
{
  while (pinnedPosition.location != null) {
    StartForcingPlayerPosition(EventPlayer(), pinnedPosition.location, true);
    WaitUntil(pinnedPosition.location == null, 0.2);
    StopForcingPlayerPosition();
    MinWait();
  }
  MinWait();
  if (SpeedOf(EventPlayer()) > 0.05) {
    ApplyImpulse(EventPlayer(), VelocityOf() * -1, 0.01, Relative.ToWorld, ContraryMotion.CancelXYZ);
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Record actions"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.RECORD_REPLAY)
{
  if (replayState == ReplayState.PLAYING) {
    if (selectedBot == null) {
      SmallMessage(EventPlayer(), "  No bot selected, this is a bug!");
      Wait(0.25);
      SmallMessage(EventPlayer(), "  Please report this to CactusPuppy.");
      Abort();
    }
    selectedBot.recordingPlayStopFlag = RecordingAction.STOP;
    Abort();
  }
  if (replayState == ReplayState.RECORDING) {
    SmallMessage(EventPlayer(), "  Menu opening should end recording. This is a bug!");
    Wait(0.25);
    SmallMessage(EventPlayer(), "  Please report this to CactusPuppy.");
    Abort();
  }
  if (replayState == ReplayState.NONE) {
    if (selectedBot == null) {
      SmallMessage(EventPlayer(), "  No bot selected, this is a bug!");
      Wait(0.25);
      SmallMessage(EventPlayer(), "  Please report this to CactusPuppy.");
      Abort();
    }
    if (hasRecordedClip(selectedBot)) {
      selectedBot.recordingPlayStopFlag = RecordingAction.PLAY;
      CloseMenu(EventPlayer());
    } else {
      PreparePlayerForRecording();
    }
    Abort();
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Edit replay"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.EDIT_REPLAY)
{
  if (selectedBot == null) {
    SmallMessage(EventPlayer(), "  No bot selected, this is a bug!");
    Wait(0.25);
    SmallMessage(EventPlayer(), "  Please report this to CactusPuppy.");
    Abort();
  }
  if (hasRecordedClip(selectedBot)) {
    OpenMenuToPage(EventPlayer(), MenuState.EDITING_REPLAY);
    UpdateOffsetDisplay();
  } else {
    SmallMessage(EventPlayer(), "  No replay recorded. Record a replay first!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Delete replay"
Event.OngoingPlayer
if (selectedBotEditAction == BotEditAction.DELETE_REPLAY)
{
  if (selectedBot == null) {
    SmallMessage(EventPlayer(), "  No bot selected, this is a bug!");
    Wait(0.25);
    SmallMessage(EventPlayer(), "  Please report this to CactusPuppy.");
    Abort();
  }
  if (hasRecordedClip(selectedBot)) {
    selectedBot.recordingPlayStopFlag = RecordingAction.DELETE;
    Wait(0.5);
    SmallMessage(EventPlayer(), "  Replay deleted");
  } else {
    SmallMessage(EventPlayer(), "  No replay to delete");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
  }
}
