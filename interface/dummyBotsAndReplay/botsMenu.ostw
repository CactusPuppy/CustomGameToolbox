import "../menu.ostw";
import "botPlacementModule.ostw";
import "botPlacementExtras.del";

enum BotsReplayAction {
  NONE,
  CREATE_BOT,
  CREATE_PUNCHING_BAG,
  EDIT_BOTS,
  RESET_BOTS,
  REMOVE_ALL_BOTS,
  TRIGGER_ALL_REPLAYS,
  DELETE_ALL_REPLAYS,
  TOGGLE_LOOPING_REPLAYS
}

playervar BotsReplayAction selectedBotsReplayAction;

BotsReplayAction[] BotsReplayActionGrid: ButtonActionGrid[MenuState.DUMMY_BOTS_AND_REPLAY];

BotsReplayAction[] botsReplayMenuButtonActions: [
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.CREATE_BOT, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.CREATE_PUNCHING_BAG, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.TRIGGER_ALL_REPLAYS, BotsReplayAction.EDIT_BOTS, BotsReplayAction.DELETE_ALL_REPLAYS, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.RESET_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.REMOVE_ALL_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE
];

String[] botsReplayMenuButtonLabels: [
  "", "", "Create Dummy Bot", "", "",
  "", "", "Create Punching Bag", "", "",
  "", "Play All Replays", "Edit Dummy Bots", "Delete All Replays", "",
  "", "", "Reset Bot Positions", "", "",
  "", "", "Remove All Bots", "", ""
];

Color[] botsReplayMenuButtonColors: [
  null, null, Color.Green, null, null,
  null, null, Color.SkyBlue, null, null,
  null, Color.LimeGreen, Color.Yellow, CustomColor(229, 100, 100, 255), null,
  null, null, Color.Purple, null, null,
  null, null, Color.Red, null, null
];

void MarkLastCreatedBotAsPunchingBag() {
  LastCreatedEntity().isPunchingBag = true;
  AddHealthPoolToPlayer(LastCreatedEntity(), HealthType.Health, 1250, true, false);
  // if (SHOULD_PUNCHIING_BAG_NAME_CHANGE) StartForcingDummyBotName(LastCreatedEntity(), "Punching Bag");
}

void HandleBotsMenuClick() {
  AbortIf(BotsReplayActionGrid[currentGridIndex()] == BotsReplayAction.NONE);
  selectedBotsReplayAction = BotsReplayActionGrid[currentGridIndex()];
  MinWait();
  selectedBotsReplayAction = BotsReplayAction.NONE;
}

void StartEditingBots() {
  UpdateButtonLabel(MenuState.DUMMY_BOTS_AND_REPLAY, 2, 2, "Stop Editing Bots");
  botControlMode = BotControlMode.Edit;
  if (!isNoClipActive) {
    toolsActionID = ToolsAction.NO_CLIP;
    MinWait();
    toolsActionID = ToolsAction.EMPTY;
  }
}

void StopEditingBots() {
  UpdateButtonLabel(MenuState.DUMMY_BOTS_AND_REPLAY, 2, 2, "Edit Dummy Bots");
  botControlMode = BotControlMode.Normal;
  if (isNoClipActive) {
    toolsActionID = ToolsAction.NO_CLIP;
    MinWait();
    toolsActionID = ToolsAction.EMPTY;
  }
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Handle bots menu actions"
Event.OngoingPlayer
if (selectedBotsReplayAction != BotsReplayAction.NONE)
{
  switch (selectedBotsReplayAction) {
    case BotsReplayAction.CREATE_BOT:
    case BotsReplayAction.CREATE_PUNCHING_BAG:
      # [CASE] Create dummy bot/punching bag
      Menu_CreateBot();
      if (selectedBotsReplayAction == BotsReplayAction.CREATE_PUNCHING_BAG) {
        MarkLastCreatedBotAsPunchingBag();
      }
      break;
    case BotsReplayAction.EDIT_BOTS:
      # [CASE] Toggle bot edit mode
      ToggleBotEditMode();
      break;
    case BotsReplayAction.RESET_BOTS:
      # [CASE] Reset all bots to reset points
      async! ResetAllBotsToResetPoints();
      break;
    case BotsReplayAction.REMOVE_ALL_BOTS:
      # [CASE] Destroy all bots
      DestroyAllDummyBots();
      BigMessage(AllPlayers(), "All Dummy Bots Destroyed");
      break;
    case BotsReplayAction.TRIGGER_ALL_REPLAYS:
      # [CASE] Initiate playback of all bots with clips
      PlayAllReplays();
      break;
    case BotsReplayAction.DELETE_ALL_REPLAYS:
      # [CASE] Delete all replay clips
      DeleteAllReplays();
      break;
  }
}

void ToggleBotEditMode()
{
  if (botControlMode == BotControlMode.Normal) {
    StartEditingBots();
  } else {
    StopEditingBots();
  }
  CloseMenu(EventPlayer());
}

void ResetAllBotsToResetPoints() playervar "[interface/dummyBotsAndReplay/botsMenu.ostw] Initiator perspective for resetting all bots to reset points"
{
  BigMessage(AllPlayers(), "Reset all bots to their reset points");
  if (AllControllablePlayers().Any(p => p.replayResetPoint.location == null && p.respawnPoint.location == null)) {
    SmallMessage(EventPlayer(), "  Some bots do not have reset points set!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    Wait(0.25);
    SmallMessage(EventPlayer(), "  Teleporting those bots to you...");
    return;
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Handle resetting all bots to their reset points"
Event.OngoingPlayer
if (IsControllable(EventPlayer()))
if (IsTrueForAny(AllPlayers().Filter((p) => !IsControllable(p)), ArrayElement().selectedBotsReplayAction == BotsReplayAction.RESET_BOTS))
{
  Respawn();
  WaitUntil(IsAlive(), 1);
  if (replayResetPoint.location != null) {
    TeleportPlayerToResetPoint(EventPlayer(), replayResetPoint);
  } else if (respawnPoint.location != null) {
    TeleportPlayerToResetPoint(EventPlayer(), respawnPoint);
  } else {
    Teleport(EventPlayer(), AllPlayers().Filter((p) => !IsControllable(p) && p.selectedBotsReplayAction == BotsReplayAction.RESET_BOTS)[0]);
  }
  if (AltitudeOf(EventPlayer()) > 1) {
    SetGravity(EventPlayer(), 0);
    MinWait();
    if (SpeedOf(EventPlayer()) > 0.05) {
      ApplyImpulse(EventPlayer(), VelocityOf() * -1, SpeedOf(), Relative.ToWorld, ContraryMotion.Incorporate);
    }
  } else {
    SetGravity(EventPlayer(), 100);
  }
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Update Play/Stop All Replays button appearance"
Event.OngoingPlayer
if (AllPlayers()
  .Filter((p) => IsControllable(p))
  .IsTrueForAny((p) => [
    ReplayState.PREPARING_FOR_PLAYBACK,
    ReplayState.PLAYING,
    ReplayState.REACHED_END_OF_REPLAY
  ].Contains(p.replayState)))
{
  UpdateButtonAppearance(MenuState.DUMMY_BOTS_AND_REPLAY, 1, 2, "Stop All Replays", Color.Red);
  WaitUntil(AllPlayers().Filter((p) => IsControllable(p)).IsTrueForAny((p) => p.replayState == ReplayState.PLAYING) == false, 9999);
  UpdateButtonAppearance(MenuState.DUMMY_BOTS_AND_REPLAY, 1, 2, "Play All Replays", Color.LimeGreen);
}

void PlayAllReplays()
{
  if (AllPlayers().Filter((p) => IsControllable(p) && hasRecordedClip(p)).Length == 0) {
    SmallMessage(EventPlayer(), "  No replays recorded yet!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    return;
  }
  if (AllPlayers().Filter((p) => IsControllable(p)).Any((p) => p.replayState == ReplayState.PLAYING)) {
    AllPlayers().Filter((p) => IsControllable(p)).recordingPlayStopFlag = RecordingAction.STOP;
    return;
  }
  AllPlayers().Filter((p) => IsControllable(p)).recordingPlayStopFlag = RecordingAction.PLAY;
  CloseMenu(EventPlayer());
}

void DeleteAllReplays()
{
  if (AllPlayers().Filter((p) => IsControllable(p) && hasRecordedClip(p)).Length == 0) {
    BigMessage(EventPlayer(), "  No replays recorded yet!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    return;
  }
  AllPlayers().Filter((p) => IsControllable(p)).recordingPlayStopFlag = RecordingAction.DELETE;
}
