import "../menu.ostw";
import "botPlacementModule.ostw";

enum BotsReplayAction {
  NONE,
  CREATE_BOT,
  CREATE_PUNCHING_BAG,
  EDIT_BOTS,
  RESET_BOTS,
  REMOVE_ALL_BOTS
}

playervar BotsReplayAction selectedBotsReplayAction;

BotsReplayAction[] BotsReplayActionGrid: ButtonActionGrid[MenuState.DUMMY_BOTS_AND_REPLAY];

BotsReplayAction[] botsReplayMenuButtonActions: [
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.CREATE_BOT, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.CREATE_PUNCHING_BAG, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.EDIT_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.RESET_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.REMOVE_ALL_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE
];

String[] botsReplayMenuButtonLabels: [
  "", "", "Create Dummy Bot", "", "",
  "", "", "Create Punching Bag", "", "",
  "", "", "Edit Dummy Bots", "", "",
  "", "", "Reset Bot Positions", "", "",
  "", "", "Remove All Bots", "", ""
];

Color[] botsReplayMenuButtonColors: [
  null, null, Color.Green, null, null,
  null, null, Color.Green, null, null,
  null, null, Color.Yellow, null, null,
  null, null, Color.Purple, null, null,
  null, null, Color.Red, null, null
];

void MarkLastCreatedBotAsPunchingBag() {
  LastCreatedEntity().isPunchingBag = true;
  AddHealthPoolToPlayer(LastCreatedEntity(), HealthType.Health, 1250, true, false);
  StartForcingDummyBotName(LastCreatedEntity(), "Punching Bag");
}

void HandleBotsMenuClick() {
  AbortIf(BotsReplayActionGrid[currentGridIndex()] == BotsReplayAction.NONE);
  selectedBotsReplayAction = BotsReplayActionGrid[currentGridIndex()];
  MinWait();
  selectedBotsReplayAction = BotsReplayAction.NONE;
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Start/stop editing bots"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.EDIT_BOTS)
{
  if (botControlMode == BotControlMode.Normal) {
    UpdateButtonLabel(MenuState.DUMMY_BOTS_AND_REPLAY, 2, 2, "Stop Editing Bots");
    botControlMode = BotControlMode.Edit;
    if (!isNoClipActive) {
      toolsActionID = ToolsAction.NO_CLIP;
      MinWait();
      toolsActionID = ToolsAction.EMPTY;
    }
  } else {
    UpdateButtonLabel(MenuState.DUMMY_BOTS_AND_REPLAY, 2, 2, "Edit Dummy Bots");
    botControlMode = BotControlMode.Normal;
    if (isNoClipActive) {
      toolsActionID = ToolsAction.NO_CLIP;
      MinWait();
      toolsActionID = ToolsAction.EMPTY;
    }
  }
  CloseMenu(EventPlayer());
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Create dummy bot"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.CREATE_BOT)
{
  Menu_CreateBot();
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Create punching bag"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.CREATE_PUNCHING_BAG)
{
  Menu_CreateBot();
  MarkLastCreatedBotAsPunchingBag();
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Initiator perspective for resetting all bots to reset points"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.RESET_BOTS)
{
  BigMessage(AllPlayers(), "Reset all bots to their reset points");
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Handle resetting all bots to their reset points"
Event.OngoingPlayer
if (IsControllable(EventPlayer()))
if (respawnPoint.location != null)
if (IsTrueForAny(AllPlayers().Filter((p) => !IsDummyBot(p)), ArrayElement().selectedBotsReplayAction == BotsReplayAction.RESET_BOTS))
{
  if (IsDead()) {
    Respawn();
    WaitUntil(IsAlive(), 1);
  }
  TeleportPlayerToResetPoint(EventPlayer(), respawnPoint);
  if (AltitudeOf(EventPlayer()) > 1) {
    SetGravity(EventPlayer(), 0);
    MinWait();
    if (SpeedOf(EventPlayer()) > 0.05) {
      ApplyImpulse(EventPlayer(), VelocityOf() * -1, SpeedOf(), Relative.ToWorld, ContraryMotion.Incorporate);
    }
  } else {
    SetGravity(EventPlayer(), 100);
  }
}

rule: "[interface/dummyBots/botsMenu.ostw] Destroy all bots"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.REMOVE_ALL_BOTS)
{
  DestroyAllDummyBots();
  CloseMenu(EventPlayer());
  BigMessage(AllPlayers(), "All Dummy Bots Destroyed");
}
