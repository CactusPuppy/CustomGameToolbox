import "../menu.ostw";
import "botPlacementModule.ostw";
import "botPlacementExtras.del";

enum BotsReplayAction {
  NONE,
  CREATE_BOT,
  CREATE_PUNCHING_BAG,
  EDIT_BOTS,
  RESET_BOTS,
  REMOVE_ALL_BOTS,
  TRIGGER_ALL_REPLAYS,
  DELETE_ALL_REPLAYS,
  TOGGLE_LOOPING_REPLAYS
}

playervar BotsReplayAction selectedBotsReplayAction;

BotsReplayAction[] BotsReplayActionGrid: ButtonActionGrid[MenuState.DUMMY_BOTS_AND_REPLAY];

BotsReplayAction[] botsReplayMenuButtonActions: [
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.CREATE_BOT, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.CREATE_PUNCHING_BAG, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.TRIGGER_ALL_REPLAYS, BotsReplayAction.EDIT_BOTS, BotsReplayAction.DELETE_ALL_REPLAYS, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.RESET_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE,
  BotsReplayAction.NONE, BotsReplayAction.NONE, BotsReplayAction.REMOVE_ALL_BOTS, BotsReplayAction.NONE, BotsReplayAction.NONE
];

String[] botsReplayMenuButtonLabels: [
  "", "", "Create Dummy Bot", "", "",
  "", "", "Create Punching Bag", "", "",
  "", "Play All Replays", "Edit Dummy Bots", "Delete All Replays", "",
  "", "", "Reset Bot Positions", "", "",
  "", "", "Remove All Bots", "", ""
];

Color[] botsReplayMenuButtonColors: [
  null, null, Color.Green, null, null,
  null, null, Color.SkyBlue, null, null,
  null, Color.LimeGreen, Color.Yellow, CustomColor(229, 100, 100, 255), null,
  null, null, Color.Purple, null, null,
  null, null, Color.Red, null, null
];

void MarkLastCreatedBotAsPunchingBag() {
  LastCreatedEntity().isPunchingBag = true;
  AddHealthPoolToPlayer(LastCreatedEntity(), HealthType.Health, 1250, true, false);
  StartForcingDummyBotName(LastCreatedEntity(), "Punching Bag");
}

void HandleBotsMenuClick() {
  AbortIf(BotsReplayActionGrid[currentGridIndex()] == BotsReplayAction.NONE);
  selectedBotsReplayAction = BotsReplayActionGrid[currentGridIndex()];
  MinWait();
  selectedBotsReplayAction = BotsReplayAction.NONE;
}

void StartEditingBots() {
  UpdateButtonLabel(MenuState.DUMMY_BOTS_AND_REPLAY, 2, 2, "Stop Editing Bots");
  botControlMode = BotControlMode.Edit;
  if (!isNoClipActive) {
    toolsActionID = ToolsAction.NO_CLIP;
    MinWait();
    toolsActionID = ToolsAction.EMPTY;
  }
}

void StopEditingBots() {
  UpdateButtonLabel(MenuState.DUMMY_BOTS_AND_REPLAY, 2, 2, "Edit Dummy Bots");
  botControlMode = BotControlMode.Normal;
  if (isNoClipActive) {
    toolsActionID = ToolsAction.NO_CLIP;
    MinWait();
    toolsActionID = ToolsAction.EMPTY;
  }
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Start/stop editing bots"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.EDIT_BOTS)
{
  if (botControlMode == BotControlMode.Normal) {
    StartEditingBots();
  } else {
    StopEditingBots();
  }
  CloseMenu(EventPlayer());
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Create dummy bot"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.CREATE_BOT)
{
  Menu_CreateBot();
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Create punching bag"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.CREATE_PUNCHING_BAG)
{
  Menu_CreateBot();
  MarkLastCreatedBotAsPunchingBag();
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Initiator perspective for resetting all bots to reset points"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.RESET_BOTS)
{
  BigMessage(AllPlayers(), "Reset all bots to their reset points");
  if (AllControllablePlayers().Any(p => p.replayResetPoint.location == null && p.respawnPoint.location == null)) {
    SmallMessage(EventPlayer(), "  Some bots do not have reset points set!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    Wait(0.25);
    SmallMessage(EventPlayer(), "  Teleporting those bots to you...");
    Abort();
  }
}

rule: "[interface/dummyBotsAndReplay/botEditPage.del] Handle resetting all bots to their reset points"
Event.OngoingPlayer
if (IsControllable(EventPlayer()))
if (IsTrueForAny(AllPlayers().Filter((p) => !IsControllable(p)), ArrayElement().selectedBotsReplayAction == BotsReplayAction.RESET_BOTS))
{
  StopForcingHero();
  Respawn();
  ForcePlayerHero(EventPlayer(), recordingHero);
  WaitUntil(IsAlive(), 1);
  if (replayResetPoint.location != null) {
    TeleportPlayerToResetPoint(EventPlayer(), replayResetPoint);
  } else if (respawnPoint.location != null) {
    TeleportPlayerToResetPoint(EventPlayer(), respawnPoint);
  } else {
    Teleport(EventPlayer(), AllPlayers().Filter((p) => !IsControllable(p) && p.selectedBotsReplayAction == BotsReplayAction.RESET_BOTS)[0]);
  }
  if (AltitudeOf(EventPlayer()) > 1) {
    SetGravity(EventPlayer(), 0);
    MinWait();
    if (SpeedOf(EventPlayer()) > 0.05) {
      ApplyImpulse(EventPlayer(), VelocityOf() * -1, SpeedOf(), Relative.ToWorld, ContraryMotion.Incorporate);
    }
  } else {
    SetGravity(EventPlayer(), 100);
  }
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Update Play/Stop All Replays button appearance"
Event.OngoingPlayer
if (AllPlayers().Filter((p) => IsControllable(p)).IsTrueForAny((p) => p.replayState == ReplayState.PLAYING))
{
  UpdateButtonAppearance(MenuState.DUMMY_BOTS_AND_REPLAY, 1, 2, "Stop All Replays", Color.Red);
  WaitUntil(AllPlayers().Filter((p) => IsControllable(p)).IsTrueForAny((p) => p.replayState == ReplayState.PLAYING) == false, 9999);
  UpdateButtonAppearance(MenuState.DUMMY_BOTS_AND_REPLAY, 1, 2, "Play All Replays", Color.LimeGreen);
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Play all replays"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.TRIGGER_ALL_REPLAYS)
{
  if (AllPlayers().Filter((p) => IsControllable(p) && hasRecordedClip(p)).Length == 0) {
    BigMessage(EventPlayer(), "  No replays recorded yet!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    Abort();
  }
  if (AllPlayers().Filter((p) => IsControllable(p)).Any((p) => p.replayState == ReplayState.PLAYING)) {
    AllPlayers().Filter((p) => IsControllable(p)).recordingPlayStopFlag = RecordingAction.STOP;
    Abort();
  }
  AllPlayers().Filter((p) => IsControllable(p)).recordingPlayStopFlag = RecordingAction.PLAY;
  CloseMenu(EventPlayer());
}

rule: "[interface/dummyBotsAndReplay/botsMenu.ostw] Delete all replays"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.DELETE_ALL_REPLAYS)
{
  if (AllPlayers().Filter((p) => IsControllable(p) && hasRecordedClip(p)).Length == 0) {
    BigMessage(EventPlayer(), "  No replays recorded yet!");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
    Abort();
  }
  AllPlayers().Filter((p) => IsControllable(p)).recordingPlayStopFlag = RecordingAction.DELETE;
}

rule: "[interface/dummyBots/botsMenu.ostw] Destroy all bots"
Event.OngoingPlayer
if (selectedBotsReplayAction == BotsReplayAction.REMOVE_ALL_BOTS)
{
  DestroyAllDummyBots();
  CloseMenu(EventPlayer());
  BigMessage(AllPlayers(), "All Dummy Bots Destroyed");
}
