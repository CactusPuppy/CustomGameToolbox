import "botsMenu.ostw";
import "botPlacementModule.del";

// import "botPlacementExtras.del";
void Menu_CreateBot() {
  CreateDummyBot(
    HeroOf(),
    OppositeTeamOf(TeamOf()),
    -1,
    RayCastHitPosition(EyePosition(), EyePosition() + FacingDirectionOf() * 10, null, null, false),
    -1 * FacingDirectionOf()
  );
}

globalvar Number punchingBagTargetHealthProportion = WorkshopSettingInteger(BotAndReplayCategory, "Punching Bag Target Health Proportion", 80, 10, 100, 0.01);
rule: "[interface/dummyBotsAndReplay/botPlacementModule.ostw] Maintain punching bag health"
Event.OngoingPlayer
if (isPunchingBag)
if (AbsoluteValue(NormalizedHealth() - punchingBagTargetHealthProportion/100) > 0.005)
{
  SetPlayerHealth(EventPlayer(), punchingBagTargetHealthProportion/100 * MaxHealth());
  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: "[interface/dummyBotsAndReplay/botPlacementModule.ostw] When entering edit mode, add locks to used buttons"
Event.OngoingPlayer
if (botControlMode == BotControlMode.Edit)
{
  AddOneLockToButton(EventPlayer(), Button.PrimaryFire);
  AddOneLockToButton(EventPlayer(), Button.SecondaryFire);
  AddOneLockToButton(EventPlayer(), Button.Reload);
  WaitUntil(botControlMode != BotControlMode.Edit, 1000000);
  RemoveOneLockFromButton(EventPlayer(), Button.PrimaryFire);
  RemoveOneLockFromButton(EventPlayer(), Button.SecondaryFire);
  RemoveOneLockFromButton(EventPlayer(), Button.Reload);
  MinWait();
  LoopIfConditionIsTrue();
}

playervar SelectionEntity selectedControl;
playervar Number selectionSetDistance;
void BotPlacementPFire() playervar "[interface/dummyBotsAndReplay/botPlacementModule.ostw] Handle left-click"
{
  if (!(HasSpawned() && IsAlive() && currentMenuState == MenuState.CLOSED)) return;
  selectedControl = getClosestSelectionEntity(EventPlayer());
  if (selectedControl.Id == 0) return;
  if (getAllMovableTargetsAsSelectionEntities().Map((e) => e.Id).Contains(selectedControl.Id)) {
    # Check if the bot is currently pinned to a position
    if (selectedControl.Owner.pinnedPosition.location != null) {
      SmallMessage(EventPlayer(), "  This bot is pinned to its current location, unpin it first.");
      PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 100);
      Abort();
    }
    # If a bot got selected, move it
    selectionSetDistance = DistanceBetween(EventPlayer().EyePosition(), selectedControl.Owner);
    StartForcingPlayerPosition(
      Player: selectedControl.Owner,
      Position: UpdateEveryFrame(RayCastHitPosition(
        StartPOS: EventPlayer().EyePosition(),
        EndPOS: EventPlayer().EyePosition()
          + FacingDirectionOf() * selectionSetDistance,
        PlayersToInclude: null,
        PlayersToExclude: null,
        IncludePlayerOwnedObjects: false)),
      Reevaluation: true);
    WaitUntil(!(EventPlayer().IsButtonHeld(Button.PrimaryFire) && botControlMode == BotControlMode.Edit), 1000000);
    // selectedControl.Position = RayCastHitPosition(
    //   StartPOS: EventPlayer().EyePosition(),
    //   EndPOS: EventPlayer().EyePosition()
    //     + FacingDirectionOf() * selectionSetDistance,
    //   PlayersToInclude: null,
    //   PlayersToExclude: null,
    //   IncludePlayerOwnedObjects: false)+ Up();
    if (AltitudeOf(selectedControl.Owner) > 1) {
      SetGravity(selectedControl.Owner, 0);
      MinWait();
      if (SpeedOf(selectedControl.Owner) > 0.05) {
        ApplyImpulse(selectedControl.Owner, VelocityOf() * -1, 0.01, Relative.ToWorld, ContraryMotion.CancelXYZ);
      }
    } else {
      SetGravity(selectedControl.Owner, 100);
    }
    StopForcingPlayerPosition(selectedControl.Owner);
  } else if (getFacingControlTargets().Map((e) => e.Id).Contains(selectedControl.Id)) {
    # If a bot's facing got selected, rotate it
    StartFacing(
      Player: selectedControl.Owner,
      Direction: UpdateEveryFrame(DirectionTowards(selectedControl.Owner.EyePosition(), RayCastHitPosition(
        StartPOS: EventPlayer().EyePosition(),
        EndPOS: EventPlayer().EyePosition()
          + FacingDirectionOf() * EvaluateOnce(DistanceBetween(EventPlayer().EyePosition(), selectedControl.Position)),
        PlayersToInclude: null,
        PlayersToExclude: null,
        IncludePlayerOwnedObjects: false))),
      TurnRate: 999999,
      Reevaluation: FacingRev.DirectionAndTurnRate);
    WaitUntil(!(EventPlayer().IsButtonHeld(Button.PrimaryFire) && botControlMode == BotControlMode.Edit), 1000000);
    selectedControl.Position = desiredFacingControlPosition(selectedControl.Owner);
    StopFacing(selectedControl.Owner);
  }
  selectedControl = null;
}

playervar Player selectedBot;
void BotPlacementSFire() playervar "[interface/dummyBotsAndReplay/botPlacementModule.ostw] Handle right-click"
{
  if (!(HasSpawned() && IsAlive() && currentMenuState == MenuState.CLOSED)) return;
  selectedControl = getClosestSelectionEntity(EventPlayer());
  if (selectedControl.Id == 0 || selectedControl.ControlType != BotControlType.DummyBot){
    selectedControl = null;
    return;
  }
  selectedBot = selectedControl.Owner;
  OpenMenuToPage(EventPlayer(), MenuState.EDITING_DUMMY_BOT);
}

