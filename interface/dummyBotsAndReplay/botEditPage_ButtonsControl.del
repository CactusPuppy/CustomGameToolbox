Number BUTTON_CONTROL_SCALE: 1.25;
Number BUTTON_CONTROL_START_Y: 1;
Number BUTTON_CONTROL_SPACING_Y: -0.17;
Number BUTTON_CONTROL_X: 0.75;

globalvar Number BUTTON_SPAM_PERIOD = WorkshopSettingReal(BotAndReplayCategory, "Bot Button Spam Wait Time", 1, 0.1, 30, -1);

playervar ButtonControlState[] buttonControlStates = ValidBotButtons.Map((_) => ButtonControlState.NONE);

enum ButtonControlState {
  NONE = "None",
  HOLDING = "Holding",
  SPAMMING = "Spamming"
}

Button[] ValidBotButtons: AllButtons;
Button ithButton(Number i): ValidBotButtons[i];
Number indexOfButton(Button button): ValidBotButtons.IndexOf(button);

void CreateBotButtonEditPage() {
  for (i = 0; i < ValidBotButtons.Length; i += 1) {
    OnScreenText.CreateOnScreenText(
      VisibleTo: LocalPlayer().currentMenuState == MenuState.EDITING_DUMMY_BOT_BUTTONS ? LocalPlayer() : null,
      Header: "{0}: {1}".Format([
        ithButton(EvaluateOnce(i)),
        LocalPlayer().selectedBot.buttonControlStates[EvaluateOnce(i)]]),
      PositionX: BUTTON_CONTROL_X,
      PositionY: BUTTON_CONTROL_START_Y + EvaluateOnce(i) * BUTTON_CONTROL_SPACING_Y,
      Scale: BUTTON_CONTROL_SCALE,
      Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
      Color: isSelectingGridIndex(LocalPlayer(), 0, EvaluateOnce(i)) ? selectedColor : Color.Gray,
      Spectators: Spectators.VisibleNever,
      PerspectivePlayer: LocalPlayer()
    );
  }
}

/*
 * Up/Down: Selectes a button to change
 * Primary Fire: Cycles the button control state
 * Reload: manual button control
*/

void BotButtonEdit_HandleUpDown() {
  if (ZOf(ThrottleOf()) > 0.5) {
    menuYIndex -= 1;
    if (menuYIndex < 0) {
      menuYIndex = ValidBotButtons.Length - 1;
    }
  } else {
    menuYIndex += 1;
    if (menuYIndex >= ValidBotButtons.Length) {
      menuYIndex = 0;
    }
  }
}

ButtonControlState SelectedButtonControlState(Number buttonIndex): selectedBot.buttonControlStates[buttonIndex];

void BotButtonEdit_HandlePrimaryFire() {
  if (selectedBot.buttonControlStates.Length < menuYIndex + 1) {
    selectedBot.buttonControlStates[menuYIndex] = ButtonControlState.NONE;
  }
  if (SelectedButtonControlState(menuYIndex) == ButtonControlState.NONE) {
    selectedBot.buttonControlStates[menuYIndex] = ButtonControlState.HOLDING;
  } else if (SelectedButtonControlState(menuYIndex) == ButtonControlState.HOLDING) {
    selectedBot.buttonControlStates[menuYIndex] = ButtonControlState.SPAMMING;
  } else {
    selectedBot.buttonControlStates[menuYIndex] = ButtonControlState.NONE;
  }
}

// If any buttons are marked as being spammed, start spamming them
rule: "[interface/dummyBotsAndReplay/botEditPage_ButtonsControl] Primary fire control"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.PrimaryFire)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.PrimaryFire)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.PrimaryFire);
  } else {
    StopHoldingButton(EventPlayer(), Button.PrimaryFire);
  }
  while (buttonControlStates[indexOfButton(Button.PrimaryFire)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.PrimaryFire);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.PrimaryFire);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.PrimaryFire)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.PrimaryFire)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.PrimaryFire)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If secondary fire button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.SecondaryFire)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.SecondaryFire)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);
  } else {
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
  }
  while (buttonControlStates[indexOfButton(Button.SecondaryFire)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.SecondaryFire);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.SecondaryFire);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.SecondaryFire)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.SecondaryFire)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.SecondaryFire)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Ability 1 button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Ability1)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Ability1)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Ability1);
  } else {
    StopHoldingButton(EventPlayer(), Button.Ability1);
  }
  while (buttonControlStates[indexOfButton(Button.Ability1)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Ability1);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Ability1);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Ability1)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Ability1)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Ability1)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Ability 2 button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Ability2)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Ability2)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Ability2);
  } else {
    StopHoldingButton(EventPlayer(), Button.Ability2);
  }
  while (buttonControlStates[indexOfButton(Button.Ability2)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Ability2);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Ability2);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Ability2)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Ability2)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Ability2)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Ultimate button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Ultimate)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Ultimate)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Ultimate);
  } else {
    StopHoldingButton(EventPlayer(), Button.Ultimate);
  }
  while (buttonControlStates[indexOfButton(Button.Ultimate)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Ultimate);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Ultimate);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Ultimate)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Ultimate)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Ultimate)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Interact button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Interact)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Interact)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Interact);
  } else {
    StopHoldingButton(EventPlayer(), Button.Interact);
  }
  while (buttonControlStates[indexOfButton(Button.Interact)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Interact);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Interact);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Interact)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Interact)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Interact)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Reload button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Reload)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Reload)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Reload);
  } else {
    StopHoldingButton(EventPlayer(), Button.Reload);
  }
  while (buttonControlStates[indexOfButton(Button.Reload)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Reload);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Reload);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Reload)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Reload)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Reload)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Jump button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Jump)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Jump)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Jump);
  } else {
    StopHoldingButton(EventPlayer(), Button.Jump);
  }
  while (buttonControlStates[indexOfButton(Button.Jump)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Jump);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Jump);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Jump)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Jump)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Jump)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Crouch button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Crouch)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Crouch)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Crouch);
  } else {
    StopHoldingButton(EventPlayer(), Button.Crouch);
  }
  while (buttonControlStates[indexOfButton(Button.Crouch)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Crouch);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Crouch);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Crouch)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Crouch)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Crouch)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "If Melee button is marked as being spammed, start spamming it"
Event.OngoingPlayer
if (buttonControlStates[indexOfButton(Button.Melee)] != ButtonControlState.NONE)
{
  if (buttonControlStates[indexOfButton(Button.Melee)] == ButtonControlState.HOLDING) {
    StartHoldingButton(EventPlayer(), Button.Melee);
  } else {
    StopHoldingButton(EventPlayer(), Button.Melee);
  }
  while (buttonControlStates[indexOfButton(Button.Melee)] == ButtonControlState.SPAMMING) {
    StartHoldingButton(EventPlayer(), Button.Melee);
    Wait(0.064);
    StopHoldingButton(EventPlayer(), Button.Melee);
    WaitUntil(
      buttonControlStates[indexOfButton(Button.Melee)] == ButtonControlState.NONE
      || TotalTimeElapsed() - EvaluateOnce(TotalTimeElapsed()) >= BUTTON_SPAM_PERIOD - 0.064,
      1000000
    );
    AbortIfConditionIsFalse();
  }
  WaitUntil(buttonControlStates[indexOfButton(Button.Melee)] != EvaluateOnce(buttonControlStates[indexOfButton(Button.Melee)]), 1000000);
  LoopIfConditionIsTrue();
}

rule: "When player enters this menu, set menuXIndex and menuYIndex to 0"
Event.OngoingPlayer
if (currentMenuState == MenuState.EDITING_DUMMY_BOT_BUTTONS)
{
  menuXIndex = 0;
  menuYIndex = 0;
}

rule: "When player is holding Reload in the button control menu, start holding the current button until reload is released"
Event.OngoingPlayer
if (currentMenuState == MenuState.EDITING_DUMMY_BOT_BUTTONS)
if (EventPlayer().IsButtonHeld(Button.Reload))
{
  Number cacheMenuYIndex = menuYIndex;
  StartHoldingButton(selectedBot, ithButton(cacheMenuYIndex));
  WaitUntil(!EventPlayer().IsButtonHeld(Button.Reload) || menuYIndex != cacheMenuYIndex, 1000000);
  StopHoldingButton(selectedBot, ithButton(cacheMenuYIndex));
  LoopIfConditionIsTrue();
}
