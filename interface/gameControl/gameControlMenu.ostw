import "../menu.ostw";

import "endGame.ostw";

enum GameControlAction {
  EMPTY = 0,
  BACK = 1,
  END_GAME,
  END_ROUND,
  SKIP_SETUP,
  PAUSE_TIMER
}

GameControlAction[] GameControlActionGrid: ButtonActionGrid[MenuState.GAME_CONTROL];

playervar GameControlAction gameControlActionID;

GameControlAction[] gameControlButtonActions: [
  GameControlAction.EMPTY, GameControlAction.EMPTY,       GameControlAction.EMPTY, GameControlAction.EMPTY,
  GameControlAction.EMPTY, GameControlAction.PAUSE_TIMER, GameControlAction.EMPTY, GameControlAction.SKIP_SETUP,
  GameControlAction.EMPTY, GameControlAction.EMPTY,       GameControlAction.EMPTY, GameControlAction.EMPTY,
  GameControlAction.EMPTY, GameControlAction.END_ROUND,   GameControlAction.EMPTY, GameControlAction.END_GAME
];
String[] gameControlButtonLabels: [
  "", "", "", "",
  "", "Pause Timer", "", "Skip Setup",
  "", "", "", "",
  "", "End Round", "", "End Game"
];
Color[] gameControlButtonColors: [
  Colors.Hidden, Colors.Hidden, Colors.Hidden, Colors.Hidden,
  Colors.Hidden, Color.Aqua,    Colors.Hidden, Color.Yellow,
  Colors.Hidden, Colors.Hidden, Colors.Hidden, Colors.Hidden,
  Colors.Hidden, Color.Orange, Colors.Hidden, Color.Red
];

globalvar Boolean isGameInProgress;
globalvar Boolean isInSetup;
rule: "[Menu - BODGE] server-side updates for IsGameInProgress"
if (IsGameInProgress())
{
  isGameInProgress = true;
  WaitUntil(!IsGameInProgress(), 1000000);
  isGameInProgress = false;
}

rule: "[Menu - BODGE] server-side updates for IsInSetup"
if (IsInSetup())
{
  isInSetup = true;
  WaitUntil(!IsInSetup(), 1000000);
  isInSetup = false;
}

void HandleGameControlClick() {
  AbortIf (GameControlActionGrid[currentGridIndex()] == 0);
  gameControlActionID = GameControlActionGrid[currentGridIndex()];
  MinWait();
  gameControlActionID = null;
}

rule: "[Game Control] When end game button pressed, trigger End Game screen"
Event.OngoingPlayer
if (gameControlActionID == GameControlAction.END_GAME)
{
  MinWait();
  currentMenuState = MenuState.CONFIRMING_END_GAME;
  menuXIndex = 1; menuYIndex = 0;
}

rule: "[Game Control] When end round button pressed, end the round"
Event.OngoingPlayer
if (gameControlActionID == GameControlAction.END_ROUND)
{
  if (Not(IsGameInProgress())) {
    SmallMessage(EventPlayer(), " It doesn't seem like there's an active round happening.");
    return;
  }
  if (CurrentGameMode() == GameMode.Control) {
    DeclareRoundVictory(TeamOf(EventPlayer()));
  } else {
    SetMatchTime(0);
  }
  if (isTimePaused) {
    UnpauseMatchTime();
    isTimePaused = false;
    MinWait();
    PauseMatchTime();
    isTimePaused = true;
  }
  currentMenuState = MenuState.CLOSED;
}

rule: "[Game Control] Skip setup button"
Event.OngoingPlayer
if (gameControlActionID == GameControlAction.SKIP_SETUP)
{
  if (Not(IsInSetup())) {
    SmallMessage(EventPlayer(), " It doesn't seem like we're in setup right now.");
    return;
  }
  SetMatchTime(0);
  if (isTimePaused) {
    UnpauseMatchTime();
    isTimePaused = false;
    MinWait();
    PauseMatchTime();
    isTimePaused = true;
  }
  SmallMessage(EventPlayer(), " Skipped setup!");
}

globalvar Boolean isTimePaused;

rule: "[Game Control] Pause time button"
Event.OngoingPlayer
if (gameControlActionID == GameControlAction.PAUSE_TIMER)
{
  if (isTimePaused) {
    UnpauseMatchTime();
  } else {
    PauseMatchTime();
  }
  isTimePaused = !isTimePaused;
}

