import "../menu.ostw";

enum CheatAction {
  NONE = 0,
  FULL_HEAL,
  RESET_COOLDOWNS,
  FILL_ULT,
  INSTANT_ULT,
  INSTANT_COOLDOWNS
}

playervar CheatAction cheatActionID;
playervar Boolean[] ActiveCheat;

CheatAction[] cheatButtonActions: [
  CheatAction.FULL_HEAL, CheatAction.INSTANT_COOLDOWNS, CheatAction.NONE, CheatAction.NONE,
  CheatAction.NONE,      CheatAction.NONE,            CheatAction.NONE, CheatAction.NONE,
  CheatAction.NONE,      CheatAction.NONE,            CheatAction.NONE, CheatAction.NONE,
  CheatAction.NONE,      CheatAction.NONE,            CheatAction.NONE, CheatAction.NONE
];
String[] cheatButtonLabels: [
  "Full Heal", "Fast Abilities", "", "",
  "", "", "", "",
  "", "", "", "",
  "", "", "", ""
];
Color[] cheatButtonColors: [
  Color.White, Color.White, null, null,
  null, null, null, null,
  null, null, null, null,
  null, null, null, null
];
CheatAction[] CheatActionGrid: ButtonActionGrid[-1];

void HandleCheatClick() {
  AbortIf(CheatActionGrid[currentGridIndex()] == 0);
  cheatActionID = CheatActionGrid[currentGridIndex()];
  MinWait();
  cheatActionID = null;
}

rule: "[Cheats] Full heal handler"
Event.OngoingPlayer
if (cheatActionID == CheatAction.FULL_HEAL)
{
  SetPlayerHealth(EventPlayer(), MaxHealth());
  PlayEffect(EventPlayer(), PlayEffect.BuffImpactSound, null, PositionOf(), 200);
  SmallMessage(EventPlayer(), "   Health restored");
}

Boolean isInstantCooldownsActive(in Player p = EventPlayer()): p.ActiveCheat[CheatAction.INSTANT_COOLDOWNS];
rule: "[Cheats] Make cooldowns faster handler"
Event.OngoingPlayer
if (cheatActionID == CheatAction.INSTANT_COOLDOWNS)
{
  ActiveCheat[CheatAction.INSTANT_COOLDOWNS] = !ActiveCheat[CheatAction.INSTANT_COOLDOWNS];
  if (ActiveCheat[CheatAction.INSTANT_COOLDOWNS]) {
    SetValueIn2DArray(ButtonLabelGrid, -1, <Number>gridIndex(1, 0), "Normal Abilities");
    SmallMessage(EventPlayer(), "   Fast Abilities Activated");
    PlayEffect(EventPlayer(), PlayEffect.BuffImpactSound, null, EventPlayer(), 200);
  } else {
    SetValueIn2DArray(ButtonLabelGrid, -1, <Number>gridIndex(1, 0), "Fast Abilities");
    SmallMessage(EventPlayer(), "   Fast Abilities Deactivated");
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 200);
  }
}

rule: "[Cheats] Primary fire ability cooldown faster"
Event.OngoingPlayer
if (isInstantCooldownsActive())
if (AbilityCooldown(Button: Button.PrimaryFire) > 1)
{
  SetAbilityCooldown(Button: Button.PrimaryFire, Cooldown: 1);
}

rule: "[Cheats] Secondary fire ability cooldown faster"
Event.OngoingPlayer
if (isInstantCooldownsActive())
if (AbilityCooldown(Button: Button.SecondaryFire) > 1)
{
  SetAbilityCooldown(Button: Button.SecondaryFire, Cooldown: 1);
}

rule: "[Cheats] Ability 1 cooldown faster"
Event.OngoingPlayer
if (isInstantCooldownsActive())
if (AbilityCooldown(Button: Button.Ability1) > 1)
{
  SetAbilityCooldown(Button: Button.Ability1, Cooldown: 1);
}

rule: "[Cheats] Ability 2 cooldown faster"
Event.OngoingPlayer
if (isInstantCooldownsActive())
if (AbilityCooldown(Button: Button.Ability2) > 1)
{
  SetAbilityCooldown(Button: Button.Ability2, Cooldown: 1);
}

rule: "[Cheats] Ability 2 - Reinhardt recharge (Currently broken)"
Event.OngoingPlayer
Player.Reinhardt
if (AbilityCharge(EventPlayer(), Button.Ability2) < 2)
{
  SetAbilityCharge(EventPlayer(), Button.Ability2, 2);
}

rule: "[Cheats] Crouch ability cooldown faster"
Event.OngoingPlayer
if (isInstantCooldownsActive())
if (AbilityCooldown(Button: Button.Crouch) > 1)
{
  SetAbilityCooldown(Button: Button.Crouch, Cooldown: 1);
}

rule: "[Cheats] Ultimate charges faster"
Event.OngoingPlayer
if (isInstantCooldownsActive())
if (UltimateChargePercent() < 100)
{
  Wait(1, WaitBehavior.AbortWhenFalse);
  SetUltimateCharge(EventPlayer(), 100);
  Loop();
}

void ResetAbilities() playervar "[SUB] Reset cooldowns and weapons"
{
  SetAmmo(EventPlayer(), 0, MaxAmmo(EventPlayer(), 0));
  SetAmmo(EventPlayer(), 1, MaxAmmo(EventPlayer(), 1));
  SetAbilityCooldown(EventPlayer(), Button.PrimaryFire, 0);
  SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 0);
  SetAbilityCooldown(EventPlayer(), Button.Ability1, 0);
  SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
  SetAbilityCooldown(EventPlayer(), Button.Crouch, 0);
  switch (HeroOf()) {
    case Hero.Dva:
      SetAbilityResource(EventPlayer(), Button.SecondaryFire, 100);
      break;
    case Hero.Reinhardt:
      # Doesn't work right now lole
      SetAbilityCharge(EventPlayer(), Button.Ability2, 2);
      break;
    case Hero.Zarya:
      # Doesn't work right now lole
      SetAbilityCharge(EventPlayer(), Button.Ability1, 2);
      break;
    case Hero.Junkrat:
      SetAbilityCharge(EventPlayer(), Button.Ability1, 2);
      break;
    case Hero.Symmetra:
      SetAbilityCharge(EventPlayer(), Button.Ability1, 3);
      break;
    case Hero.Brigitte:
      SetAbilityCharge(EventPlayer(), Button.Ability2, 3);
      break;
  }
  PlayEffect(EventPlayer(), PlayEffect.BuffImpactSound, null, PositionOf(), 200);
  SmallMessage(EventPlayer(), "   Abilities and weapons reset");
}

